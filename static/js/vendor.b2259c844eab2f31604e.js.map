{"version":3,"sources":["webpack:///./node_modules/lodash/_objectToString.js","webpack:///./node_modules/core-js/library/modules/_descriptors.js","webpack:///./node_modules/core-js/library/modules/_ctx.js","webpack:///./node_modules/vue/dist/vue.runtime.esm.js","webpack:///./node_modules/core-js/library/modules/_iterators.js","webpack:///./node_modules/vue-router/dist/vue-router.esm.js","webpack:///./node_modules/core-js/library/modules/_uid.js","webpack:///./node_modules/core-js/library/modules/core.get-iterator-method.js","webpack:///./node_modules/core-js/library/modules/_defined.js","webpack:///./node_modules/core-js/library/fn/array/from.js","webpack:///./node_modules/lodash/isSymbol.js","webpack:///./node_modules/core-js/library/modules/_an-object.js","webpack:///./node_modules/core-js/library/modules/_global.js","webpack:///./node_modules/core-js/library/modules/_redefine.js","webpack:///./node_modules/core-js/library/modules/_iter-create.js","webpack:///./node_modules/core-js/library/modules/es6.object.keys.js","webpack:///./node_modules/elasticsearch-browser/elasticsearch.js","webpack:///./node_modules/core-js/library/modules/_has.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/core-js/library/modules/_is-object.js","webpack:///./node_modules/core-js/library/modules/_core.js","webpack:///./node_modules/bootstrap-vue/es/utils/array.js","webpack:///./node_modules/babel-runtime/helpers/toConsumableArray.js","webpack:///./node_modules/core-js/library/modules/_object-keys-internal.js","webpack:///./node_modules/bootstrap-vue/es/utils/dom.js","webpack:///./node_modules/core-js/library/modules/_iobject.js","webpack:///./node_modules/core-js/library/modules/_is-array-iter.js","webpack:///./node_modules/core-js/library/modules/_to-primitive.js","webpack:///./node_modules/lodash/_Symbol.js","webpack:///./node_modules/lodash/debounce.js","webpack:///./node_modules/core-js/library/modules/_library.js","webpack:///./node_modules/core-js/library/modules/_dom-create.js","webpack:///./node_modules/core-js/library/modules/_object-gpo.js","webpack:///./node_modules/core-js/library/modules/_to-length.js","webpack:///./node_modules/core-js/library/modules/_cof.js","webpack:///./node_modules/core-js/library/modules/_html.js","webpack:///./node_modules/lodash/now.js","webpack:///./node_modules/core-js/library/modules/_classof.js","webpack:///./node_modules/core-js/library/modules/_fails.js","webpack:///./node_modules/core-js/library/modules/_ie8-dom-define.js","webpack:///./node_modules/lodash/_root.js","webpack:///./node_modules/core-js/library/modules/_to-iobject.js","webpack:///./node_modules/bootstrap-vue/es/mixins/listen-on-root.js","webpack:///./node_modules/bootstrap-vue/es/components/collapse/collapse.js","webpack:///./node_modules/lodash/isObjectLike.js","webpack:///./node_modules/core-js/library/modules/_to-integer.js","webpack:///./node_modules/vue-loader/lib/component-normalizer.js","webpack:///./node_modules/core-js/library/modules/_property-desc.js","webpack:///./node_modules/core-js/library/modules/_object-create.js","webpack:///./node_modules/lodash/_baseGetTag.js","webpack:///./node_modules/core-js/library/modules/_shared-key.js","webpack:///./node_modules/lodash/_freeGlobal.js","webpack:///./node_modules/vue-infinite-scroll/vue-infinite-scroll.js","webpack:///./node_modules/babel-runtime/core-js/array/from.js","webpack:///./node_modules/core-js/library/modules/_wks.js","webpack:///./node_modules/core-js/library/modules/_iter-detect.js","webpack:///./node_modules/core-js/library/modules/_set-to-string-tag.js","webpack:///./node_modules/core-js/library/modules/_shared.js","webpack:///./node_modules/core-js/library/modules/_object-dp.js","webpack:///./node_modules/core-js/library/modules/_create-property.js","webpack:///./node_modules/babel-runtime/core-js/object/keys.js","webpack:///./node_modules/core-js/library/modules/_to-absolute-index.js","webpack:///./node_modules/core-js/library/modules/_string-at.js","webpack:///./node_modules/core-js/library/modules/_hide.js","webpack:///./node_modules/core-js/library/fn/object/keys.js","webpack:///./node_modules/core-js/library/modules/_export.js","webpack:///./node_modules/lodash/toNumber.js","webpack:///./node_modules/core-js/library/modules/_a-function.js","webpack:///./node_modules/core-js/library/modules/_object-keys.js","webpack:///./node_modules/core-js/library/modules/_iter-call.js","webpack:///./node_modules/bootstrap-vue/es/utils/object.js","webpack:///./node_modules/bootstrap-vue/es/utils/target.js","webpack:///./node_modules/bootstrap-vue/es/directives/toggle/toggle.js","webpack:///./node_modules/core-js/library/modules/_object-dps.js","webpack:///./node_modules/core-js/library/modules/es6.array.from.js","webpack:///./node_modules/core-js/library/modules/_to-object.js","webpack:///./node_modules/lodash/_getRawTag.js","webpack:///./node_modules/core-js/library/modules/_object-sap.js","webpack:///./node_modules/core-js/library/modules/_array-includes.js","webpack:///./node_modules/core-js/library/modules/_iter-define.js","webpack:///./node_modules/core-js/library/modules/_enum-bug-keys.js","webpack:///./node_modules/lodash/isObject.js","webpack:///./node_modules/core-js/library/modules/es6.string.iterator.js"],"names":["nativeObjectToString","Object","prototype","toString","module","exports","value","call","__webpack_require__","defineProperty","get","a","aFunction","fn","that","length","undefined","b","c","apply","arguments","global","emptyObject","freeze","isUndef","v","isDef","isTrue","isPrimitive","isObject","obj","_toString","isPlainObject","isRegExp","isValidArrayIndex","val","n","parseFloat","String","Math","floor","isFinite","JSON","stringify","toNumber","isNaN","makeMap","str","expectsLowerCase","map","create","list","split","i","toLowerCase","isReservedAttribute","remove","arr","item","index","indexOf","splice","hasOwnProperty","hasOwn","key","cached","cache","camelizeRE","camelize","replace","_","toUpperCase","capitalize","charAt","slice","hyphenateRE","hyphenate","bind","ctx","boundFn","l","_length","toArray","start","ret","Array","extend","to","_from","toObject","res","noop","no","identity","looseEqual","isObjectA","isObjectB","isArrayA","isArray","isArrayB","every","e","keysA","keys","keysB","looseIndexOf","once","called","this","SSR_ATTR","ASSET_TYPES","LIFECYCLE_HOOKS","config","optionMergeStrategies","silent","productionTip","devtools","performance","errorHandler","warnHandler","ignoredElements","keyCodes","isReservedTag","isReservedAttr","isUnknownElement","getTagNamespace","parsePlatformTagName","mustUseProp","_lifecycleHooks","isReserved","charCodeAt","def","enumerable","writable","configurable","bailRE","_isServer","hasProto","inBrowser","window","inWeex","WXEnvironment","platform","weexPlatform","UA","navigator","userAgent","isIE","test","isIE9","isEdge","isAndroid","isIOS","nativeWatch","watch","supportsPassive","opts","addEventListener","isServerRendering","env","VUE_ENV","__VUE_DEVTOOLS_GLOBAL_HOOK__","isNative","Ctor","_Set","hasSymbol","Symbol","Reflect","ownKeys","Set","set","has","add","clear","warn","uid$1","Dep","id","subs","addSub","sub","push","removeSub","depend","target","addDep","notify","update","targetStack","VNode","tag","data","children","text","elm","context","componentOptions","asyncFactory","ns","fnContext","fnOptions","fnScopeId","componentInstance","parent","raw","isStatic","isRootInsert","isComment","isCloned","isOnce","asyncMeta","isAsyncPlaceholder","prototypeAccessors","child","defineProperties","createEmptyVNode","node","createTextVNode","cloneVNode","vnode","deep","cloned","cloneVNodes","vnodes","len","arrayProto","arrayMethods","forEach","method","original","args","inserted","result","ob","__ob__","observeArray","dep","arrayKeys","getOwnPropertyNames","observerState","shouldConvert","Observer","vmCount","protoAugment","copyAugment","walk","src","__proto__","observe","asRootData","isExtensible","_isVue","defineReactive","customSetter","shallow","property","getOwnPropertyDescriptor","getter","setter","childOb","dependArray","newVal","max","del","items","strats","mergeData","from","toVal","fromVal","mergeDataOrFn","parentVal","childVal","vm","instanceData","defaultData","mergeHook","concat","mergeAssets","hook","type","key$1","props","methods","inject","computed","provide","defaultStrat","mergeOptions","options","normalizeProps","normalized","normalizeInject","dirs","directives","normalizeDirectives","extendsFrom","extends","mixins","mergeField","strat","resolveAsset","warnMissing","assets","camelizedId","PascalCaseId","validateProp","propOptions","propsData","prop","absent","isType","Boolean","default","$options","_props","getType","getPropDefaultValue","prevShouldConvert","match","handleError","err","info","cur","$parent","hooks","errorCaptured","globalHandleError","logError","console","error","microTimerFunc","macroTimerFunc","callbacks","pending","flushCallbacks","copies","useMacroTask","setImmediate","MessageChannel","setTimeout","channel","port","port2","port1","onmessage","postMessage","Promise","p","resolve","then","nextTick","cb","_resolve","seenObjects","traverse","_traverse","seen","isA","isFrozen","depId","normalizeEvent","name","passive","once$$1","capture","createFnInvoker","fns","invoker","arguments$1","updateListeners","on","oldOn","remove$$1","old","event","params","mergeVNodeHook","hookKey","oldHook","wrappedHook","merged","checkProp","hash","altKey","preserve","normalizeChildren","normalizeArrayChildren","nestedIndex","lastIndex","last","isTextNode","shift","_isVList","ensureCtor","comp","base","__esModule","toStringTag","getFirstComponentChild","$once","$on","remove$1","$off","updateComponentListeners","listeners","oldListeners","resolveSlots","slots","attrs","slot","name$1","isWhitespace","resolveScopedSlots","activeInstance","isInInactiveTree","_inactive","activateChildComponent","direct","_directInactive","$children","callHook","handlers","j","_hasHookEvent","$emit","queue","activatedChildren","waiting","flushing","flushSchedulerQueue","watcher","sort","run","activatedQueue","updatedQueue","callActivatedHooks","_watcher","_isMounted","callUpdatedHooks","emit","uid$2","Watcher","expOrFn","isRenderWatcher","_watchers","user","lazy","sync","active","dirty","deps","newDeps","depIds","newDepIds","expression","path","segments","parsePath","_target","pop","cleanupDeps","tmp","queueWatcher","oldValue","evaluate","teardown","_isBeingDestroyed","sharedPropertyDefinition","proxy","sourceKey","initState","propsOptions","_propKeys","isRoot","loop","initProps","initMethods","_data","getData","initData","watchers","_computedWatchers","isSSR","userDef","computedWatcherOptions","defineComputed","initComputed","handler","createWatcher","initWatch","shouldCache","createComputedGetter","keyOrFn","$watch","resolveInject","filter","provideKey","source","_provided","provideDefault","renderList","render","renderSlot","fallback","bindObject","nodes","scopedSlotFn","$scopedSlots","slotNodes","$slots","_rendered","$createElement","resolveFilter","checkKeyCodes","eventKeyCode","builtInAlias","eventKeyName","bindObjectProps","asProp","isSync","domProps","$event","renderStatic","isInFor","_staticTrees","tree","markStatic","staticRenderFns","_renderProxy","markOnce","markStaticNode","bindObjectListeners","existing","ours","installRenderHelpers","_o","_n","_s","_l","_t","_q","_i","_m","_f","_k","_b","_v","_e","_u","_g","FunctionalRenderContext","injections","contextVm","isCompiled","_compiled","needNormalization","scopedSlots","_scopeId","_c","d","createElement","mergeProps","componentVNodeHooks","init","hydrating","parentElm","refElm","_isDestroyed","_isComponent","_parentVnode","_parentElm","_refElm","inlineTemplate","createComponentInstanceForVnode","$mount","keepAlive","mountedNode","prepatch","oldVnode","parentVnode","renderChildren","hasChildren","_renderChildren","$vnode","_vnode","$attrs","$listeners","propKeys","_parentListeners","$forceUpdate","updateChildComponent","insert","destroy","deactivateChildComponent","$destroy","hooksToMerge","createComponent","baseCtor","_base","cid","factory","errorComp","resolved","loading","loadingComp","contexts","forceRender","reject","reason","component","delay","timeout","resolveAsyncComponent","createAsyncPlaceholder","resolveConstructorOptions","model","callback","transformModel","extractPropsFromVNodeData","functional","renderContext","createFunctionalComponent","nativeOn","abstract","fromParent","mergeHook$1","mergeHooks","one","two","SIMPLE_NORMALIZE","ALWAYS_NORMALIZE","normalizationType","alwaysNormalize","is","simpleNormalizeChildren","applyNS","force","_createElement","uid","super","superOptions","modifiedOptions","modified","latest","extended","extendOptions","sealed","sealedOptions","dedupe","resolveModifiedOptions","components","Vue$3","_init","initExtend","Vue","Super","SuperId","cachedCtors","_Ctor","Sub","constructor","Comp","initProps$1","initComputed$1","mixin","use","getComponentName","matches","pattern","pruneCache","keepAliveInstance","cachedNode","pruneCacheEntry","current","cached$$1","_uid","vnodeComponentOptions","_componentTag","initInternalComponent","_self","$root","$refs","initLifecycle","_events","initEvents","parentData","initRender","initInjections","initProvide","el","dataDef","propsDef","$set","$delete","immediate","stateMixin","hookRE","cbs","i$1","eventsMixin","_update","prevEl","$el","prevVnode","prevActiveInstance","__patch__","__vue__","lifecycleMixin","$nextTick","_render","ref","renderMixin","patternTypes","RegExp","builtInComponents","KeepAlive","include","exclude","Number","created","destroyed","parseInt","configDef","util","delete","plugin","installedPlugins","_installedPlugins","unshift","install","initUse","initMixin$1","definition","initAssetRegisters","initGlobalAPI","ssrContext","version","acceptValue","isEnumeratedAttr","isBooleanAttr","xlinkNS","isXlink","getXlinkProp","isFalsyAttrValue","genClassForVnode","parentNode","childNode","mergeClassData","staticClass","dynamicClass","stringifyClass","renderClass","class","stringified","stringifyArray","stringifyObject","namespaceMap","svg","math","isHTMLTag","isSVG","unknownElementCache","isTextInputType","nodeOps","tagName","document","multiple","setAttribute","createElementNS","namespace","createTextNode","createComment","insertBefore","newNode","referenceNode","removeChild","appendChild","nextSibling","setTextContent","textContent","registerRef","isRemoval","refs","refInFor","emptyNode","sameVnode","typeA","typeB","sameInputType","createKeyToOldIdx","beginIdx","endIdx","updateDirectives","oldDir","dir","isCreate","isDestroy","oldDirs","normalizeDirectives$1","newDirs","dirsWithInsert","dirsWithPostpatch","callHook$1","componentUpdated","callInsert","emptyModifiers","modifiers","getRawDirName","rawName","join","baseModules","updateAttrs","inheritAttrs","oldAttrs","setAttr","removeAttributeNS","removeAttribute","setAttributeNS","__ieph","blocker","stopImmediatePropagation","removeEventListener","updateClass","oldData","cls","transitionClass","_transitionClasses","_prevClass","target$1","klass","RANGE_TOKEN","CHECKBOX_RADIO_TOKEN","add$1","_withTask","onceHandler","remove$2","createOnceHandler","updateDOMListeners","change","normalizeEvents","events","updateDOMProps","oldProps","childNodes","_value","strCur","shouldUpdateValue","checkVal","composing","notInFocus","activeElement","isNotInFocusAndDirty","_vModifiers","number","trim","isDirtyWithModifiers","parseStyleText","cssText","propertyDelimiter","normalizeStyleData","style","normalizeStyleBinding","staticStyle","bindingStyle","emptyStyle","cssVarRE","importantRE","setProp","setProperty","normalizedName","normalize","vendorNames","capName","updateStyle","oldStaticStyle","oldStyleBinding","normalizedStyle","oldStyle","newStyle","checkChild","styleData","getStyle","addClass","classList","getAttribute","removeClass","tar","resolveTransition","css","autoCssTransition","enterClass","enterToClass","enterActiveClass","leaveClass","leaveToClass","leaveActiveClass","hasTransition","TRANSITION","ANIMATION","transitionProp","transitionEndEvent","animationProp","animationEndEvent","ontransitionend","onwebkittransitionend","onanimationend","onwebkitanimationend","raf","requestAnimationFrame","nextFrame","addTransitionClass","transitionClasses","removeTransitionClass","whenTransitionEnds","expectedType","getTransitionInfo","propCount","ended","end","onEnd","transformRE","styles","getComputedStyle","transitionDelays","transitionDurations","transitionTimeout","getTimeout","animationDelays","animationDurations","animationTimeout","hasTransform","delays","durations","toMs","s","enter","toggleDisplay","_leaveCb","cancelled","transition","_enterCb","nodeType","appearClass","appearToClass","appearActiveClass","beforeEnter","afterEnter","enterCancelled","beforeAppear","appear","afterAppear","appearCancelled","duration","transitionNode","isAppear","startClass","activeClass","toClass","beforeEnterHook","enterHook","afterEnterHook","enterCancelledHook","explicitEnterDuration","expectsCSS","userWantsControl","getHookArgumentsLength","show","pendingNode","_pending","isValidDuration","leave","rm","beforeLeave","afterLeave","leaveCancelled","delayLeave","explicitLeaveDuration","performLeave","invokerFns","_enter","patch","backend","modules","removeNode","createElm","insertedVnodeQueue","nested","isReactivated","initComponent","innerNode","activate","reactivateComponent","setScope","createChildren","invokeCreateHooks","pendingInsert","isPatchable","ref$$1","ancestor","addVnodes","startIdx","invokeDestroyHook","removeVnodes","ch","removeAndInvokeRemoveHook","childElm","createRmCb","findIdxInOld","oldCh","patchVnode","removeOnly","hydrate","newCh","oldKeyToIdx","idxInOld","vnodeToMove","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","canMove","updateChildren","postpatch","invokeInsertHook","initial","isRenderedModule","inVPre","pre","hasChildNodes","innerHTML","childrenMatch","firstChild","fullInvoke","isInitialPatch","isRealElement","hasAttribute","oldElm","parentElm$1","patchable","i$2","createPatchFunction","vmodel","trigger","directive","binding","_vOptions","setSelected","getValue","onCompositionEnd","onCompositionStart","prevOptions","curOptions","some","o","hasNoMatchingOption","actuallySetSelected","isMultiple","selected","option","selectedIndex","createEvent","initEvent","dispatchEvent","locateNode","platformDirectives","transition$$1","originalDisplay","__vOriginalDisplay","display","unbind","transitionProps","mode","getRealChild","compOptions","extractTransitionData","placeholder","h","rawChild","Transition","this$1","hasParentTransition","_leaving","oldRawChild","oldChild","isSameChild","delayedLeave","moveClass","callPendingCbs","_moveCb","recordPosition","newPos","getBoundingClientRect","applyTranslation","oldPos","pos","dx","left","dy","top","moved","transform","WebkitTransform","transitionDuration","platformComponents","TransitionGroup","prevChildren","rawChildren","transitionData","kept","removed","c$1","beforeUpdate","updated","hasMove","_reflow","body","offsetHeight","propertyName","_hasMove","clone","cloneNode","attr","HTMLUnknownElement","HTMLElement","mountComponent","querySelector","query","__webpack_exports__","condition","message","isError","View","routerView","route","$route","_routerViewCache","depth","inactive","_routerRoot","routerViewDepth","matched","registerRouteInstance","instances","propsToPass","resolveProps","encodeReserveRE","encodeReserveReplacer","commaRE","encode","encodeURIComponent","decode","decodeURIComponent","parseQuery","param","parts","stringifyQuery","val2","x","trailingSlashRE","createRoute","record","location","redirectedFrom","router","stringifyQuery$$1","meta","fullPath","getFullPath","formatMatch","START","_stringifyQuery","isSameRoute","isObjectEqual","aKeys","bKeys","aVal","bVal","_Vue","toTypes","eventTypes","Link","required","exact","append","exactActiveClass","$router","href","classes","globalActiveClass","linkActiveClass","globalExactActiveClass","linkExactActiveClass","activeClassFallback","exactActiveClassFallback","compareTarget","queryIncludes","isIncludedRoute","guardEvent","click","findAnchor","metaKey","ctrlKey","shiftKey","defaultPrevented","button","currentTarget","preventDefault","installed","registerInstance","callVal","beforeCreate","_router","history","_route","beforeRouteEnter","beforeRouteLeave","beforeRouteUpdate","resolvePath","relative","firstChar","stack","segment","cleanPath","isarray","pathToRegexp_1","pathToRegexp","parse_1","parse","compile_1","tokensToFunction","tokensToFunction_1","tokensToRegExp_1","tokensToRegExp","PATH_REGEXP","tokens","defaultDelimiter","delimiter","exec","m","escaped","offset","next","prefix","group","modifier","asterisk","partial","repeat","optional","escapeGroup","escapeString","substr","encodeURIComponentPretty","encodeURI","pretty","token","TypeError","attachKeys","re","flags","sensitive","strict","endsWithDelimiter","groups","regexpToRegexp","arrayToRegexp","stringToRegexp","compile","regexpCompileCache","fillParams","routeMsg","createRouteMap","routes","oldPathList","oldPathMap","oldNameMap","pathList","pathMap","nameMap","addRouteRecord","matchAs","pathToRegexpOptions","normalizedPath","normalizePath","caseSensitive","regex","compileRouteRegex","redirect","childMatchAs","alias","aliases","aliasRoute","normalizeLocation","_normalized","assign","rawPath","parsedPath","hashIndex","queryIndex","basePath","extraQuery","_parseQuery","parsedQuery","resolveQuery","createMatcher","currentRoute","_createRoute","paramNames","record$1","matchRoute","originalRedirect","resolveRecordPath","aliasedMatch","aliasedRecord","addRoutes","positionStore","setupScroll","replaceState","getStateKey","saveScrollPosition","state","_key","handleScroll","isPop","app","behavior","scrollBehavior","position","getScrollPosition","shouldScroll","scrollToPosition","catch","pageXOffset","y","pageYOffset","isValidPosition","isNumber","normalizePosition","selector","docRect","documentElement","elRect","getElementPosition","scrollTo","ua","supportsPushState","Time","now","Date","genKey","toFixed","pushState","url","runQueue","step","resolveAsyncComponents","hasAsync","flatMapComponents","resolvedDef","msg","Error","flatten","History","baseEl","normalizeBase","ready","readyCbs","readyErrorCbs","errorCbs","extractGuards","records","reverse","guards","instance","guard","extractGuard","bindGuard","listen","onReady","errorCb","onError","transitionTo","onComplete","onAbort","confirmTransition","updateRoute","ensureURL","abort","activated","deactivated","resolveQueue","extractLeaveGuards","beforeHooks","extractUpdateHooks","iterator","postEnterCbs","isValid","poll","bindEnterGuard","extractEnterGuards","resolveHooks","prev","afterHooks","HTML5History","History$$1","expectScroll","initLocation","getLocation","go","fromRoute","getCurrentLocation","pathname","search","HashHistory","checkFallback","ensureSlash","setupListeners","supportsScroll","getHash","replaceHash","pushHash","getUrl","AbstractHistory","targetIndex","VueRouter","apps","matcher","registerHook","setupHashListener","beforeEach","beforeResolve","afterEach","back","forward","getMatchedComponents","createHref","normalizedTo","px","random","classof","ITERATOR","Iterators","getIteratorMethod","it","baseGetTag","isObjectLike","symbolTag","self","Function","__g","descriptor","setToStringTag","IteratorPrototype","Constructor","NAME","$keys","installedModules","moduleId","loaded","es","Client","ConnectionPool","Transport","errors","clientAction","__reused","EsApiClient","log","hosts","host","close","transport","each","Fn","ApiNamespace","_namespaces","funcEnum","apis","sniffEndpoint","plugins","cloneDeep","setup","connectors","loggers","selectors","serializers","Connection","Errors","Host","Log","Logger","NodesToHost","utils","process","patchSniffOnConnectionFault","findCommonProtocol","LogClass","_config","connectionPools","connectionPool","Serializer","serializer","nodesToHostCallback","nodesToHostCallbacks","maxRetries","requestTimeout","defer","randomizeHosts","hostsConfig","createArray","isString","shuffle","setHosts","sniffedNodesProtocol","getAllHosts","sniffedNodesFilterPath","sniffOnStart","sniff","sniffInterval","_timeout","doSniff","sniffOnConnectionFault","main","promise","request","connection","requestAborter","requestTimeoutId","remainingRetries","aborted","headers","debug","domain","abortRequest","respond","serializeFn","bulkBody","contentType","sendReqWithConnection","_connection","req","checkRespForFailure","warning","NoConnections","status","RequestTypeError","setStatus","errMsg","makeUrl","select","ConnectionFault","parsedBody","isJson","deserialize","Serialization","ignore","errorMetadata","pick","statusCode","response","wwwAuthenticateDirective","Generic","castExists","NotFound","Infinity","RequestTimeout","closed","timers","_timers","pull","clearTimeout","filter_path","resp","hostsConfigs","hostConfig","protocol","globalConfig","conf","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","array","title","browser","argv","versions","addListener","off","removeListener","removeAllListeners","prependListener","prependOnceListener","cwd","chdir","umask","Buffer","nodeUtils","lodash","adjustWordCase","firstWordCap","otherWordsCap","sep","string","code","upper","lower","words","word","joinPath","trimEnd","deepMerge","check","ucfirst","substring","studlyCase","camelCase","snakeCase","toLowerString","any","toUpperString","isNumeric","intervalRE","isInterval","what","times","applyArgs","func","sliceIndex","bindKey","_provideBound","scheduled","makeBoundMethods","bound","size","input","output","getUnwrittenFromStream","stream","writeBuffer","getStreamWriteBuffer","out","writeReq","chunk","isBuffer","_writableState","writeState","getBuffer","buffer","clearWriteStreamBuffer","getTime","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","RangeError","Uint8Array","arg","encodingOrOffset","allocUnsafe","ArrayBuffer","byteOffset","byteLength","fromArrayLike","fromArrayBuffer","encoding","isEncoding","actual","write","fromString","checked","copy","fromObject","assertSize","isView","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","buf","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","min","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","typedArraySupport","poolSize","_augment","species","fill","allocUnsafeSlow","_isBuffer","compare","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","thisStart","thisEnd","thisCopy","targetCopy","includes","toJSON","_arr","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","INVALID_BASE64_RE","leadSurrogate","toByteArray","stringtrim","base64clean","dst","b64","placeHoldersCount","placeHolders","Arr","L","revLookup","uint8","extraBytes","len2","encodeChunk","lookup","num","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","LN2","normalizeArray","allowAboveRoot","up","splitPathRe","splitPath","filename","xs","f","resolvedPath","resolvedAbsolute","isAbsolute","trailingSlash","paths","fromParts","toParts","samePartsLength","outputParts","dirname","root","basename","extname","formatRegExp","format","objects","isNull","deprecate","isUndefined","noDeprecation","warned","throwDeprecation","traceDeprecation","trace","debugEnviron","debugs","stylize","stylizeNoColor","colors","isBoolean","showHidden","_extend","customInspect","stylizeWithColor","formatValue","styleType","recurseTimes","isFunction","primitive","simple","formatPrimitive","visibleKeys","idx","arrayToHash","formatError","isDate","braces","toUTCString","formatProperty","formatArray","reduce","reduceToSingleString","desc","line","ar","objectToString","pad","debuglog","NODE_DEBUG","pid","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","special","boolean","null","date","regexp","isNullOrUndefined","isSymbol","months","time","getHours","getMinutes","getSeconds","getDate","getMonth","inherits","origin","ctor","superCtor","super_","TempCtor","__WEBPACK_AMD_DEFINE_RESULT__","arrayPool","objectPool","idCounter","indicatorObject","keyPrefix","largeArraySize","maxPoolSize","whitespace","reEmptyStringLeading","reEmptyStringMiddle","reEmptyStringTrailing","reEsTemplate","reFlags","reFuncName","reInterpolate","reLeadingSpacesAndZeros","reNoMatch","reThis","reUnescapedString","contextProps","shadowedProps","templateCounter","argsClass","arrayClass","boolClass","dateClass","errorClass","funcClass","numberClass","objectClass","regexpClass","stringClass","cloneableClasses","debounceOptions","leading","maxWait","trailing","iteratorData","bottom","firstArg","support","useHas","objectTypes","function","object","stringEscapes","\\","'","\n","\r","\t"," "," ","freeModule","freeGlobal","baseIndexOf","fromIndex","cacheIndexOf","cachePush","typeCache","charAtCallback","compareAscending","ac","criteria","bc","other","createCache","first","mid","getObject","escapeStringChar","getArray","false","true","isNode","releaseArray","releaseObject","runInContext","defaults","arrayRef","errorProto","objectProto","stringProto","oldDash","reNative","ceil","fnToString","getPrototypeOf","propertyIsEnumerable","nativeCreate","nativeIsArray","nativeIsFinite","nativeIsNaN","nativeKeys","nativeMax","nativeMin","nativeParseInt","nativeRandom","ctorByClass","nonEnumProps","lodashWrapper","chainAll","__chain__","__wrapped__","toLocaleString","valueOf","className","0","argsObject","enumErrorProps","enumPrototypes","funcDecomp","WinRTError","funcNames","nonEnumArgs","nonEnumShadows","ownLast","spliceObjects","unindexedChars","nodeClass","templateSettings","escape","interpolate","variable","imports","iteratorTemplate","__p","conditions","k","baseBind","bindData","partialArgs","thisArg","thisBinding","baseCreate","setBindData","baseClone","isDeep","stackA","stackB","isArr","initedStack","baseEach","forOwn","objValue","properties","baseCreateCallback","argCount","__bindData__","collection","accumulator","baseCreateWrapper","bitmask","partialRightArgs","arity","isBind","isBindKey","isCurry","isCurryBound","baseDifference","values","getIndexOf","isLarge","baseFlatten","isShallow","isStrict","isArguments","valIndex","resIndex","baseIsEqual","isWhere","otherType","otherClass","aWrapped","bWrapped","ctorA","ctorB","forIn","baseMerge","stackLength","baseRandom","baseUniq","isSorted","createAggregator","createCallback","createWrapper","isPartial","isPartialRight","createIterator","escapeHtmlChar","htmlEscapes","shimIsPlainObject","unescapeHtmlChar","htmlUnescapes","shimKeys","eachIteratorOptions","defaultsIteratorOptions","forOwnIteratorOptions","&","<",">","\"","invert","reEscapedHtml","reUnescapedHtml","forOwnRight","functions","objProto","contains","countBy","find","forEachRight","iterable","groupBy","indexBy","pluck","noaccum","reduceRight","rand","where","sortedIndex","rest","low","high","uniq","zip","zipObject","debounce","wait","maxTimeoutId","stamp","timeoutId","trailingCall","lastCalled","delayed","isCalled","maxDelayed","leadingCall","chain","methodNames","isFunc","methodName","radix","wrapperValueOf","after","at","bindAll","funcs","compact","compose","constant","curry","difference","forInRight","pairs","intersection","argsIndex","argsLength","caches","trustIndexOf","outer","invoke","mapValues","memoize","resolver","memoized","merge","sources","omit","ran","partialRight","range","sortBy","tap","interceptor","throttle","proto","union","without","wrap","wrapper","xor","collect","drop","eachRight","tail","unique","unzip","findIndex","findKey","findLast","findLastIndex","findLastKey","isElement","isEmpty","isEqual","noConflict","floating","noMin","noMax","template","settings","isEvaluating","importsKeys","importsValues","reDelimiters","escapeValue","interpolateValue","esTemplateValue","evaluateValue","hasVariable","sourceURL","unescape","uniqueId","all","detect","findWhere","foldl","foldr","sample","take","head","callbackable","VERSION","isSplice","webpackPolyfill","FUNC_ERROR_TEXT","HASH_UNDEFINED","INFINITY","funcTag","genTag","reIsDeepProp","reIsPlainProp","reLeadingDot","rePropName","reEscapeChar","reIsHostCtor","freeSelf","funcProto","coreJsData","maskSrcKey","IE_PROTO","funcToString","reIsNative","Map","getNative","symbolProto","symbolToString","Hash","entries","entry","ListCache","MapCache","assocIndexOf","baseGet","isKey","stringToPath","toKey","baseIsNative","isHostObject","toSource","getMapData","__data__","baseToString","quote","Cache","defaultValue","reTrimEnd","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsSeq","rsSymbol","reUnicode","reHasUnicode","predicate","fromRight","baseFindIndex","baseIsNaN","stringToArray","hasUnicode","unicodeToArray","asciiToArray","castSlice","baseSlice","chars","strSymbols","chrSymbols","charsEndIndex","canCapture","captureStackTrace","canStack","ErrorAbstract","metadata","_Abstract","feature","tuple","names","allNames","primaryName","StatusCodeError","displayName","esErrObject","root_cause","memo","cause","extraData","print","subv","prettyPrint","btoa","qs","startsWithProtocolRE","defaultProto","urlParseFields","simplify","sslDefaults","pfx","passphrase","cert","ca","ciphers","rejectUnauthorized","secureProtocol","suggestCompression","ssl","firstColon","firstSlash","noSlash","portNoPath","defaultPorts","auth","httpAuth","Authorization","objectPropertyGetter","preOverride","overrides","http","https","getQuery","getHeaders","Accept-Encoding","punycode","Url","slashes","hostname","urlParse","resolveObject","protocolPattern","portPattern","simplePathPattern","unwise","autoEscape","nonHostChars","hostEndingChars","hostnamePartPattern","hostnamePartStart","unsafeProtocol","javascript","javascript:","hostlessProtocol","slashedProtocol","ftp","gopher","file","http:","https:","ftp:","gopher:","file:","querystring","parseQueryString","slashesDenoteHost","u","splitter","uSplit","simplePath","lowerProto","atSign","hostEnd","hec","parseHost","ipv6Hostname","hostparts","part","newpart","validParts","notHost","bit","toASCII","ae","esc","qm","rel","tkeys","tk","tkey","rkeys","rk","rkey","relPath","isSourceAbs","isRelAbs","mustEndAbs","removeAllDots","srcPath","psychotic","authInHost","hasTrailingSlash","maxInt","tMin","tMax","skew","damp","initialBias","initialN","regexPunycode","regexNonASCII","regexSeparators","overflow","not-basic","invalid-input","baseMinusTMin","stringFromCharCode","mapDomain","ucs2decode","extra","counter","ucs2encode","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","basic","oldi","w","t","baseMinusT","inputLength","bias","handledCPCount","basicLength","q","currentValue","handledCPCountPlusOne","qMinusT","ucs2","toUnicode","eq","maxKeys","kstr","vstr","stringifyPrimitive","ks","failures","pool","originalOnDied","_onConnectionDied","work","timerId","wasAlreadyDead","ms","calcDeadTimeout","countdown","countdownTo","restore","commonProtocol","MAX_SAFE_INTEGER","argsTag","mapTag","setTag","freeExports","moduleExports","nativeIsBuffer","DataView","WeakMap","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","getTag","isArrayLike","isArrayLikeObject","ctorString","isLength","isPrototype","EventEmitter","outputs","isArrayOfStrings","levels","level","addOutput","listenerCount","clearAllListeners","parseLevels","valid","arrayish","requestUrl","responseBody","responseStatus","normalizeTraceArgs","_maxListeners","defaultMaxListeners","setMaxListeners","er","listener","newListener","fired","g","evlistener","emitter","Console","LoggerAbstract","color","label","onWarning","onInfo","onDebug","onTrace","_formatTraceMessage","listeningLevels","cleanUpListeners","padNumToTen","timestamp","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","space","spaces","fnName","requestDetails","_prettyJson","defaultSelector","connectionClasses","defaultConnectionClass","deadTimeout","maxDeadTimeout","calcDeadTimeoutOptions","_conns","alive","dead","_timeouts","_default","flat","attempt","baseTimeout","exponential","_selectDeadConnection","onStatusSet","oldStatus","died","revived","noChange","_onConnectionRevived","conn","alreadyWasDead","revive","ping","runAt","orderedTimeouts","getConnections","addConnection","removeConnection","toRemove","removeIds","empty","roundRobin","connections","xhr","jquery","angular","XhrConnector","ConnectionAbstract","asyncDefault","getXhr","XMLHttpRequest","appName","ActiveXObject","async","open","setRequestHeader","onreadystatechange","readyState","responseText","statusText","send","pingTimeout","origStatus","json","JsonSerializer","AngularSerializer","toJson","Json","serialize","replacer","hostProp","extractHostPartsRE1x","address","_meta","malformedError","matches1x","withHostParts","addressParts","makeFactoryWithModifier","spec","action","paramAsBody","castToArray","needsBody","resolveUrl","urls","minUrl","paramKeys","requireParamKeys","paramSpec","castType","proxyFactory","_resolveUrl","namespaceFactory","ClientNamespace","client","enum","validSelection","commaSepList","vars","reqParamKeys","opt","optParamKeys","fmt","note","6.1","6.0","5.6","5.5","5.4","6.x","6.2","master","filterPath","api","bulk","waitForActiveShards","refresh","routing","fields","_source","_sourceExclude","_sourceInclude","pipeline","needBody","cat","local","masterTimeout","help","allocation","nodeId","count","fielddata","health","ts","indices","pri","nodeattrs","fullId","pendingTasks","recovery","repositories","shards","snapshots","ignoreUnavailable","repository","tasks","actions","detailed","parentTask","templates","threadPool","threadPoolPatterns","clearScroll","scrollId","cluster","allocationExplain","includeYesDecisions","includeDiskInfo","getSettings","flatSettings","includeDefaults","waitForNodes","waitForEvents","waitForNoRelocatingShards","waitForStatus","putSettings","remoteInfo","reroute","dryRun","explain","retryFailed","metric","allowNoIndices","expandWildcards","stats","minScore","preference","analyzer","analyzeWildcard","defaultOperator","df","lenient","terminateAfter","versionType","deleteByQuery","conflicts","scroll","searchType","searchTimeout","requestCache","scrollSize","waitForCompletion","requestsPerSecond","slices","deleteScript","exists","storedFields","realtime","existsSource","fieldCaps","getScript","getSource","opType","analyze","preferLocal","clearCache","fieldData","recycler","updateAllTypes","deleteAlias","deleteTemplate","existsAlias","existsTemplate","existsType","flush","waitIfOngoing","flushSynced","forcemerge","maxNumSegments","onlyExpungeDeletes","operationThreading","waitForMerge","getAlias","getFieldMapping","getMapping","getTemplate","getUpgrade","putAlias","putMapping","preserveExisting","putTemplate","order","activeOnly","rollover","newIndex","verbose","shardStores","shrink","completionFields","fielddataFields","types","includeSegmentFileSizes","updateAliases","upgrade","onlyAncientSegments","validateQuery","rewrite","allShards","ingest","deletePipeline","getPipeline","processorGrok","putPipeline","simulate","mget","msearch","maxConcurrentSearches","typedKeys","preFilterShardSize","msearchTemplate","mtermvectors","ids","termStatistics","fieldStatistics","offsets","positions","payloads","hotThreads","interval","threads","ignoreIdleThreads","indexMetric","usage","human","putScript","reindex","reindexRethrottle","taskId","renderSearchTemplate","docvalueFields","suggestField","suggestMode","suggestSize","suggestText","trackScores","trackTotalHits","batchedReduceSize","maxConcurrentShardRequests","searchShards","searchTemplate","profile","snapshot","createRepository","verify","deleteRepository","getRepository","verifyRepository","cancel","parentTaskId","termvectors","lang","retryOnConflict","updateByQuery","countPercolate","percolateIndex","percolateType","ttl","fieldStats","charFilter","field","tokenizer","attributes","mpercolate","percolate","percolateRouting","percolatePreference","percolateFormat","suggest","remote","waitForNoInitializingShards","rankEval","allowPartialSearchResults","eval","core","__e","toStr","isCallable","maxSafeInteger","toLength","toInteger","arrayLike","mapFn","T","A","kValue","_from2","arr2","toIObject","O","Node","ELEMENT_NODE","reflow","hasClass","cof","ArrayProto","S","lastArgs","lastThis","lastCallTime","lastInvokeTime","maxing","invokeFunc","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","ObjectProto","TAG","ARG","B","tryGet","callee","IObject","defined","BVRL","listen_on_root","listenOnRoot","emitOnRoot","_$root","_len","_toConsumableArray","beforeDestroy","_BVRL$shift","content","classObject","clickHandler","onEnter","onAfterEnter","onLeave","onAfterLeave","visible","transitioning","isNav","accordion","oldVal","emitState","navbar-collapse","collapse","toggle","height","dom","scrollHeight","evt","handleToggleEvt","handleAccordionEvt","openedId","handleResize","mounted","rawScriptExports","compiledTemplate","functionalTemplate","injectStyles","scopeId","moduleIdentifier","esModule","scriptExports","__VUE_SSR_CONTEXT__","_registeredComponents","_ssrRegister","_injectStyles","bitmap","anObject","dPs","enumBugKeys","Empty","createDict","iframeDocument","iframe","contentWindow","lt","F","Properties","getRawTag","nullTag","undefinedTag","symToStringTag","shared","getScrollTop","element","scrollTop","defaultView","getElementTop","isAttached","currentNode","doBind","binded","lastExec","timer","execute","throttleDelayExpr","throttleDelay","scrollEventTarget","overflowY","getScrollEventTarget","scrollListener","doCheck","diff","disabledExpr","disabled","immediateCheck","distanceExpr","distance","immediateCheckExpr","eventName","viewportScrollTop","viewportBottom","clientHeight","getVisibleHeight","shouldTrigger","InfiniteScroll","bindTryCount","tryBind","infiniteScroll","store","USE_SYMBOL","SAFE_CLOSING","riter","skipClosing","safe","iter","done","stat","IE8_DOM_DEFINE","toPrimitive","dP","P","Attributes","$defineProperty","createDesc","TO_STRING","hide","$export","own","IS_FORCED","IS_GLOBAL","G","IS_STATIC","IS_PROTO","IS_BIND","IS_WRAP","W","expProto","C","virtual","R","U","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","isBinary","varArgs","nextSource","nextKey","getOwnPropertySymbols","allListenTypes","hover","focus","toggle_listenTypes","BVT","targets","listenTypes","target_targets","_ref","getKeys","isArrayIter","createProperty","getIterFn","aLen","mapfn","mapping","iterFn","isOwn","unmasked","fails","KEY","exp","toAbsoluteIndex","IS_INCLUDES","$this","LIBRARY","redefine","$iterCreate","BUGGY","returnThis","Base","DEFAULT","IS_SET","FORCED","getMethod","kind","DEF_VALUES","VALUES_BUG","$native","$default","$entries","$anyNative","$at","iterated","point"],"mappings":"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E,KAAA,wBAGAowE,OAEAkB,IAAA,4BACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,qBAeAW,EAAAqB,QAAA9pF,UAAAqwF,OAAAlc,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,kBAEAmyE,qBACAr3E,KAAA,SACAkF,KAAA,2BAGAm+B,KACAmzC,IAAA,kCACAvnC,KACA98C,OACA6N,KAAA,UAEAhG,QACAgG,KAAA,YAIApD,OAAA,SAaAu6E,EAAAqB,QAAA9pF,UAAAkD,MAAAixE,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,kBAEAmyE,qBACAr3E,KAAA,SACAkF,KAAA,2BAGAm+B,KACAmzC,IAAA,iCACAvnC,KACA98C,OACA6N,KAAA,UAEAhG,QACAgG,KAAA,YAIApD,OAAA,SAiBAu6E,EAAAqB,QAAA9pF,UAAAssF,MAAAnY,GACA78D,QACAg5E,kBACAh/E,KAAA,OACAkF,KAAA,qBAEA+5E,iBACAj/E,KAAA,OACAkF,KAAA,oBAEAsyE,QACAx3E,KAAA,QAEA49B,QACA59B,KAAA,QAEA2tE,OACA3tE,KAAA,OACAiC,QAAA,UACAxB,SACA,UACA,UACA,WAGAy+E,OACAl/E,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,iCACAvnC,KACA98C,OACA6N,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,sBACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,qBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,cAYAW,EAAAqB,QAAA9pF,UAAA0wF,cAAAvc,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,mBAGAm+B,KACAmzC,IAAA,aAEAqB,UAAA,EACAj7E,OAAA,SAcAu6E,EAAAqB,QAAA9pF,UAAA2wF,QAAAxc,GACA78D,QACA80E,gBACA96E,KAAA,UACAkF,KAAA,oBAEA61E,iBACA/6E,KAAA,OACAiC,QAAA,OACAxB,SACA,OACA,SACA,OACA,OAEAyE,KAAA,oBAEA+zE,mBACAj5E,KAAA,UACAkF,KAAA,sBAEA+2E,mBACAj8E,KAAA,UACAkF,KAAA,uBAEAo6E,qBACAt/E,KAAA,UACAkF,KAAA,0BAGAowE,OAEAkB,IAAA,uBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,cAGA55E,OAAA,SAuBAu6E,EAAAqB,QAAA9pF,UAAA6wF,cAAA1c,GACA78D,QACA20E,SACA36E,KAAA,WAEAi5E,mBACAj5E,KAAA,UACAkF,KAAA,sBAEA41E,gBACA96E,KAAA,UACAkF,KAAA,oBAEA61E,iBACA/6E,KAAA,OACAiC,QAAA,OACAxB,SACA,OACA,SACA,OACA,OAEAyE,KAAA,oBAEA44E,oBACA54E,KAAA,uBAEAwlE,GACA1qE,KAAA,UAEAm7E,UACAn7E,KAAA,UAEAo7E,iBACAp7E,KAAA,UACAkF,KAAA,oBAEAm2E,iBACAr7E,KAAA,OACAiC,QAAA,KACAxB,SACA,MACA,MAEAyE,KAAA,oBAEAo2E,IACAt7E,KAAA,UAEAu7E,SACAv7E,KAAA,WAEAw/E,SACAx/E,KAAA,WAEAy/E,WACAz/E,KAAA,UACAkF,KAAA,eAGAowE,OAEAkB,IAAA,wCACAvnC,KACA98C,OACA6N,KAAA,QAEAA,MACAA,KAAA,WAKAw2E,IAAA,8BACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,qBAGA55E,OAAA,SAQAu6E,EAAAz0E,KAAAmgE,GACAx/B,KACAmzC,IAAA,OAIAW,EAAAuI,OAAAhhE,IAUAy4D,EAAAuI,OAAAhxF,UAAAixF,eAAA9c,GACA78D,QACAgyE,eACAh4E,KAAA,OACAkF,KAAA,kBAEA0P,SACA5U,KAAA,SAGAqjC,KACAmzC,IAAA,4BACAvnC,KACAx1C,IACAuG,KAAA,YAIApD,OAAA,WAUAu6E,EAAAuI,OAAAhxF,UAAAkxF,YAAA/c,GACA78D,QACAgyE,eACAh4E,KAAA,OACAkF,KAAA,mBAGAowE,OAEAkB,IAAA,4BACAvnC,KACAx1C,IACAuG,KAAA,aAKAw2E,IAAA,wBAUAW,EAAAuI,OAAAhxF,UAAAmxF,cAAAhd,GACAx/B,KACAmzC,IAAA,6BAYAW,EAAAuI,OAAAhxF,UAAAoxF,YAAAjd,GACA78D,QACAgyE,eACAh4E,KAAA,OACAkF,KAAA,kBAEA0P,SACA5U,KAAA,SAGAqjC,KACAmzC,IAAA,4BACAvnC,KACAx1C,IACAuG,KAAA,YAIA63E,UAAA,EACAj7E,OAAA,QAUAu6E,EAAAuI,OAAAhxF,UAAAqxF,SAAAld,GACA78D,QACA64E,SACA7+E,KAAA,UACAiC,SAAA,IAGAqzE,OAEAkB,IAAA,sCACAvnC,KACAx1C,IACAuG,KAAA,aAKAw2E,IAAA,gCAGAqB,UAAA,EACAj7E,OAAA,SAkBAu6E,EAAA6I,KAAAnd,GACA78D,QACAs2E,cACAt8E,KAAA,OACAkF,KAAA,iBAEAg2E,YACAl7E,KAAA,UAEAu8E,UACAv8E,KAAA,WAEAs3E,SACAt3E,KAAA,WAEAu3E,SACAv3E,KAAA,UAEAy3E,SACAz3E,KAAA,QAEA03E,gBACA13E,KAAA,OACAkF,KAAA,mBAEAyyE,gBACA33E,KAAA,OACAkF,KAAA,oBAGAowE,OAEAkB,IAAA,8BACAvnC,KACA98C,OACA6N,KAAA,UAEAA,MACAA,KAAA,aAKAw2E,IAAA,oBACAvnC,KACA98C,OACA6N,KAAA,aAKAw2E,IAAA,WAGAqB,UAAA,EACAj7E,OAAA,SAcAu6E,EAAA8I,QAAApd,GACA78D,QACA61E,YACA77E,KAAA,OACAS,SACA,mBACA,kBACA,uBACA,uBAEAyE,KAAA,eAEAg7E,uBACAlgF,KAAA,SACAkF,KAAA,2BAEAi7E,WACAngF,KAAA,UACAkF,KAAA,cAEAk7E,oBACApgF,KAAA,SACAiC,QAAA,IACAiD,KAAA,0BAGAowE,OAEAkB,IAAA,iCACAvnC,KACA98C,OACA6N,KAAA,QAEAA,MACAA,KAAA,WAKAw2E,IAAA,uBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,cAGAqB,UAAA,EACAhpC,UAAA,EACAjyC,OAAA,SAaAu6E,EAAAkJ,gBAAAxd,GACA78D,QACA61E,YACA77E,KAAA,OACAS,SACA,mBACA,kBACA,uBACA,uBAEAyE,KAAA,eAEAi7E,WACAngF,KAAA,UACAkF,KAAA,cAEAg7E,uBACAlgF,KAAA,SACAkF,KAAA,4BAGAowE,OAEAkB,IAAA,0CACAvnC,KACA98C,OACA6N,KAAA,QAEAA,MACAA,KAAA,WAKAw2E,IAAA,gCACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,uBAGAqB,UAAA,EACAhpC,UAAA,EACAjyC,OAAA,SAuBAu6E,EAAAmJ,aAAAzd,GACA78D,QACAu6E,KACAvgF,KAAA,OACA04B,UAAA,GAEA8nD,gBACAxgF,KAAA,UACAiC,SAAA,EACAy2B,UAAA,EACAxzB,KAAA,mBAEAu7E,iBACAzgF,KAAA,UACAiC,SAAA,EACAy2B,UAAA,EACAxzB,KAAA,oBAEAsyE,QACAx3E,KAAA,OACA04B,UAAA,GAEAgoD,SACA1gF,KAAA,UACAiC,SAAA,EACAy2B,UAAA,GAEAioD,WACA3gF,KAAA,UACAiC,SAAA,EACAy2B,UAAA,GAEAkoD,UACA5gF,KAAA,UACAiC,SAAA,EACAy2B,UAAA,GAEAwiD,YACAl7E,KAAA,SACA04B,UAAA,GAEA6+C,SACAv3E,KAAA,SACA04B,UAAA,GAEAv9B,QACA6E,KAAA,SACA04B,UAAA,GAEA6jD,UACAv8E,KAAA,UACA04B,UAAA,GAEAjc,SACAzc,KAAA,UAEAy7E,aACAz7E,KAAA,OACAS,SACA,WACA,WACA,eACA,SAEAyE,KAAA,iBAGAowE,OAEAkB,IAAA,sCACAvnC,KACA98C,OACA6N,KAAA,UAEAA,MACAA,KAAA,aAKAw2E,IAAA,4BACAvnC,KACA98C,OACA6N,KAAA,aAKAw2E,IAAA,mBAGA55E,OAAA,SAGAu6E,EAAAjpE,MAAAwQ,IAcAy4D,EAAAjpE,MAAAxf,UAAAmyF,WAAAhe,GACA78D,QACA86E,UACA9gF,KAAA,QAEAg5E,WACAh5E,KAAA,UAEA+gF,SACA/gF,KAAA,UAEAghF,mBACAhhF,KAAA,UACAkF,KAAA,uBAEAlF,MACAA,KAAA,OACAS,SACA,MACA,OACA,UAGAmU,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,iCACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,yBAcAW,EAAAjpE,MAAAxf,UAAAgU,KAAAmgE,GACA78D,QACAi0E,cACAj6E,KAAA,UACAkF,KAAA,iBAEA0P,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,kCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,WACA,KACA,UACA,MACA,cACA,YACA,OACA,UACA,cAMA+1E,IAAA,sBACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,sBACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,WACA,KACA,UACA,MACA,cACA,YACA,OACA,UACA,cAMA+1E,IAAA,cAqBAW,EAAAjpE,MAAAxf,UAAAssF,MAAAnY,GACA78D,QACAg5E,kBACAh/E,KAAA,OACAkF,KAAA,qBAEA+5E,iBACAj/E,KAAA,OACAkF,KAAA,oBAEAsyE,QACAx3E,KAAA,QAEA49B,QACA59B,KAAA,WAEA2tE,OACA3tE,KAAA,OACAiC,QAAA,OACAxB,SACA,UACA,OACA,WAGAy+E,OACAl/E,KAAA,QAEA4U,SACA5U,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,yDACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,wCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,6CACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,4BACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,4BACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,oBAcAW,EAAAjpE,MAAAxf,UAAAwyF,MAAAre,GACA78D,QACAm7E,OACAnhF,KAAA,UACAiC,SAAA,GAEA2S,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,wCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,oBAMA+1E,IAAA,4BACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,4BACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,oBAMA+1E,IAAA,oBAUAW,EAAAlF,KAAApP,GACAx/B,KACAmzC,IAAA,KAEA1pC,eAAA,IACAlwC,OAAA,SAYAu6E,EAAAiK,UAAAve,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,kBAEAvK,SACAqF,KAAA,WAGAs1E,OAEAkB,IAAA,iCACAvnC,KACAx1C,IACAuG,KAAA,UAEArF,SACAqF,KAAA,aAKAw2E,IAAA,oBACAvnC,KACAx1C,IACAuG,KAAA,aAKA63E,UAAA,EACAj7E,OAAA,QAcAu6E,EAAAkK,QAAAxe,GACA78D,QACAsxE,SACAt3E,KAAA,WAEA4U,SACA5U,KAAA,OACAiC,QAAA,MAEAo1E,qBACAr3E,KAAA,SACAkF,KAAA,0BAEA+2E,mBACAj8E,KAAA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ACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,sBACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,qBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,cAYAW,EAAAqB,QAAA9pF,UAAA0wF,cAAAvc,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,mBAGAm+B,KACAmzC,IAAA,aAEAqB,UAAA,EACAj7E,OAAA,SAcAu6E,EAAAqB,QAAA9pF,UAAA2wF,QAAAxc,GACA78D,QACA80E,gBACA96E,KAAA,UACAkF,KAAA,oBAEA61E,iBACA/6E,KAAA,OACAiC,QAAA,OACAxB,SACA,OACA,SACA,OACA,OAEAyE,KAAA,oBAEA+zE,mBACAj5E,KAAA,UACAkF,KAAA,sBAEA+2E,mBACAj8E,KAAA,UACAkF,KAAA,uBAEAo6E,qBACAt/E,KAAA,UACAkF,KAAA,0BAGAowE,OAEAkB,IAAA,uBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,cAGA55E,OAAA,SAuBAu6E,EAAAqB,QAAA9pF,UAAA6wF,cAAA1c,GACA78D,QACA20E,SACA36E,KAAA,WAEAi5E,mBACAj5E,KAAA,UACAkF,KAAA,sBAEA41E,gBACA96E,KAAA,UACAkF,KAAA,oBAEA61E,iBACA/6E,KAAA,OACAiC,QAAA,OACAxB,SACA,OACA,SACA,OACA,OAEAyE,KAAA,oBAEA44E,oBACA54E,KAAA,uBAEAwlE,GACA1qE,KAAA,UAEAm7E,UACAn7E,KAAA,UAEAo7E,iBACAp7E,KAAA,UACAkF,KAAA,oBAEAm2E,iBACAr7E,KAAA,OACAiC,QAAA,KACAxB,SACA,MACA,MAEAyE,KAAA,oBAEAo2E,IACAt7E,KAAA,UAEAu7E,SACAv7E,KAAA,WAEAw/E,SACAx/E,KAAA,WAEAy/E,WACAz/E,KAAA,UA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,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,yDACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,wCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,6CACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,4BACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,4BACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,oBAcAW,EAAAjpE,MAAAxf,UAAAwyF,MAAAre,GACA78D,QACAm7E,OACAnhF,KAAA,UACAiC,SAAA,GAEA2S,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,wCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,oBAMA+1E,IAAA,4BACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,4BACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,oBAMA+1E,IAAA,oBAUAW,EAAAlF,KAAApP,GACAx/B,KACAmzC,IAAA,KAEA1pC,eAAA,IACAlwC,OAAA,SAYAu6E,EAAAiK,UAAAve,GACA78D,QACA4O,SA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AAA,kBAEA+sB,GACAjyB,KAAA,QAEAi4E,MACAj4E,KAAA,UACAiC,SAAA,GAEA8mB,GACA/oB,KAAA,QAEA/P,GACA+P,KAAA,UACAiC,SAAA,IAGAohC,KACAmzC,IAAA,mBAiBAW,EAAAW,IAAAppF,UAAAmqF,SAAAhW,GACA78D,QACAq9C,QACArjD,KAAA,UAEA88C,OACA98C,KAAA,OACAS,SACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,OAGAu3E,eACAh4E,KAAA,OACAkF,KAAA,kBAEA+sB,GACAjyB,KAAA,QAEAi4E,MACAj4E,KAAA,UACAiC,SAAA,GAEA8mB,GACA/oB,KAAA,QAEA/P,GACA+P,KAAA,UACAiC,SAAA,IAGAqzE,OAEAkB,IAAA,4BACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,qBAiBAW,EAAAW,IAAAppF,UAAAoqF,aAAAjW,GACA78D,QACAq9C,QACArjD,KAAA,UAEA+3E,OACA/3E,KAAA,UACAiC,SAAA,GAEA+1E,eACAh4E,KAAA,OACAkF,KAAA,kBAEA+sB,GACAjyB,KAAA,QAEAi4E,MACAj4E,KAAA,UACAiC,SAAA,GAEA8mB,GACA/oB,KAAA,QAEA/P,GACA+P,KAAA,UACAiC,SAAA,IAGAohC,KACAmzC,IAAA,wBAgBAW,EAAAW,IAAAppF,UAAAuc,SAAA43D,GACA78D,QACAq9C,QACArjD,KAAA,UAEA88C,OACA98C,KAAA,OACAS,SACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,OAGAwxB,GACAjyB,KAAA,QAEAi4E,MACAj4E,KAAA,UACAiC,SAAA,GAEA8mB,GACA/oB,KAAA,QAEA/P,GACA+P,KAAA,UACAiC,SAAA,IAGAqzE,OAEAkB,IAAA,4BACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,qBAmBAW,EAAAW,IAAAppF,UAAAqqF,OAAAlW,GACA78D,QACAq9C,QACArjD,KAAA,UAEA88C,OACA98C,KAAA,OACAS,SACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA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ACAmzC,IAAA,kCACAvnC,KACA98C,OACA6N,KAAA,UAEAhG,QACAgG,KAAA,YAIApD,OAAA,SAiBAu6E,EAAAqB,QAAA9pF,UAAAssF,MAAAnY,GACA78D,QACAg5E,kBACAh/E,KAAA,OACAkF,KAAA,qBAEA+5E,iBACAj/E,KAAA,OACAkF,KAAA,oBAEAsyE,QACAx3E,KAAA,QAEA49B,QACA59B,KAAA,QAEA2tE,OACA3tE,KAAA,OACAiC,QAAA,UACAxB,SACA,UACA,UACA,WAGAy+E,OACAl/E,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,iCACAvnC,KACA98C,OACA6N,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,YACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,sBACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,YACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,qBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,cAYAW,EAAAqB,QAAA9pF,UAAA0wF,cAAAvc,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,mBAGAm+B,KACAmzC,IAAA,aAEAqB,UAAA,EACAj7E,OAAA,SAcAu6E,EAAAqB,QAAA9pF,UAAA2wF,QAAAxc,GACA78D,QACA80E,gBACA96E,KAAA,UACAkF,KAAA,oBAEA61E,iBACA/6E,KAAA,OACAiC,QAAA,OACAxB,SACA,OACA,SACA,OACA,OAEAyE,KAAA,oBAEA+zE,mBACAj5E,KAAA,UACAkF,KAAA,sBAEA+2E,mBACAj8E,KAAA,UACAkF,KAAA,uBAEAo6E,qBACAt/E,KAAA,UACAkF,KAAA,0BAGAowE,OAEAkB,IAAA,uBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,cAGA55E,OAAA,SAuBAu6E,EAAAqB,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/gF,KAAA,UAEAghF,mBACAhhF,KAAA,UACAkF,KAAA,uBAEAlF,MACAA,KAAA,OACAS,SACA,MACA,OACA,UAGAmU,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,iCACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,yBAcAW,EAAAjpE,MAAAxf,UAAAgU,KAAAmgE,GACA78D,QACAi0E,cACAj6E,KAAA,UACAkF,KAAA,iBAEA0P,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,kCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,WACA,KACA,UACA,MACA,cACA,YACA,OACA,UACA,cAMA+1E,IAAA,sBACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,sBACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,WACA,KACA,UACA,MACA,cACA,YACA,OACA,UACA,cAMA+1E,IAAA,cAqBAW,EAAAjpE,MAAAxf,UAAAssF,MAAAnY,GACA78D,QACAg5E,kBACAh/E,KAAA,OACAkF,KAAA,qBAEA+5E,iBACAj/E,KAAA,OACAkF,KAAA,oBAEAsyE,QACAx3E,KAAA,QAEA49B,QACA59B,KAAA,WAEA2tE,OACA3tE,KAAA,OACAiC,QAAA,OACAxB,SACA,UACA,OACA,WAGAy+E,OACAl/E,KAAA,QAEA4U,SACA5U,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,yDACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,YACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,wCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,6CACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,YACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,4BACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,4BACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,oBAyBAW,EAAAwM,UAAA9gB,GACA78D,QACAuxE,SACAv3E,KAAA,QAEAk7E,YACAl7E,KAAA,UAEAi5E,mBACAj5E,KAAA,UACAkF,KAAA,sBAEA41E,gBACA96E,KAAA,UACAkF,KAAA,oBAEA61E,iBACA/6E,KAAA,OACAiC,QAAA,OACAxB,SACA,OACA,SACA,OACA,OAEAyE,KAAA,oBAEAg+E,gBACAljF,KAAA,SACAkF,KAAA,mBAEAi+E,eACAnjF,KAAA,SACAkF,KAAA,kBAEA0+E,kBACA5jF,KAAA,SACAkF,KAAA,qBAEA2+E,qBACA7jF,KAAA,SACAkF,KAAA,wBAEA4+E,iBACA9jF,KAAA,OACAS,SACA,OAEAyE,KAAA,oBAEAuX,SACAzc,KAAA,UAEAy7E,aACAz7E,KAAA,OACAS,SACA,WACA,WACA,eACA,SAEAyE,KAAA,iBAGAowE,OAEAkB,IAAA,2CACAvnC,KACA98C,OACA6N,KAAA,UAEAA,MACAA,KAAA,UAEAvG,IACAuG,KAAA,aAKAw2E,IAAA,mCACAvnC,KACA98C,OACA6N,KAAA,UAEAA,MACAA,KAAA,aAKApD,OAAA,SAQAu6E,EAAAlF,KAAApP,GACAx/B,KACAmzC,IAAA,KAEA1pC,eAAA,IACAlwC,OAAA,SAYAu6E,EAAAiK,UAAAve,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,mBAGAowE,OAEAkB,IAAA,8BACAvnC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CA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,kBAEAmyE,qBACAr3E,KAAA,SACAkF,KAAA,2BAGAm+B,KACAmzC,IAAA,kCACAvnC,KACA98C,OACA6N,KAAA,UAEAhG,QACAgG,KAAA,YAIApD,OAAA,SAiBAu6E,EAAAqB,QAAA9pF,UAAAssF,MAAAnY,GACA78D,QACAg5E,kBACAh/E,KAAA,OACAkF,KAAA,qBAEA+5E,iBACAj/E,KAAA,OACAkF,KAAA,oBAEAsyE,QACAx3E,KAAA,QAEA49B,QACA59B,KAAA,QAEA2tE,OACA3tE,KAAA,OACAiC,QAAA,UACAxB,SACA,UACA,UACA,WAGAy+E,OACAl/E,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,iCACAvnC,KACA98C,OACA6N,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,YACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,sBACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,YACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,qBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,cAYAW,EAAAqB,QAAA9pF,UAAA0wF,cAAAvc,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,mBAGAm+B,KACAmzC,IAAA,aAEAqB,UAAA,EACAj7E,OAAA,SAcAu6E,EAAAqB,QAAA9pF,UAAA2wF,QAAAxc,GACA78D,QACA80E,gBACA96E,KAAA,UACAkF,KAAA,oBAEA61E,iBACA/6E,KAAA,OACAiC,QAAA,OACAxB,SACA,OACA,SACA,OACA,OAEAyE,KAAA,oBAEA+zE,mBACAj5E,KAAA,UACAkF,KAAA,sBAEA+2E,mBACAj8E,KAAA,UACAkF,KAAA,uBAEAo6E,qBACAt/E,KAAA,UACAkF,KA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AEAghF,mBACAhhF,KAAA,UACAkF,KAAA,uBAEAlF,MACAA,KAAA,OACAS,SACA,MACA,OACA,UAGAmU,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,iCACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,yBAcAW,EAAAjpE,MAAAxf,UAAAgU,KAAAmgE,GACA78D,QACAi0E,cACAj6E,KAAA,UACAkF,KAAA,iBAEA0P,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,kCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,WACA,KACA,UACA,MACA,cACA,YACA,OACA,UACA,cAMA+1E,IAAA,sBACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,sBACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,WACA,KACA,UACA,MACA,cACA,YACA,OACA,UACA,cAMA+1E,IAAA,cAqBAW,EAAAjpE,MAAAxf,UAAAssF,MAAAnY,GACA78D,QACAg5E,kBACAh/E,KAAA,OACAkF,KAAA,qBAEA+5E,iBACAj/E,KAAA,OACAkF,KAAA,oBAEAsyE,QACAx3E,KAAA,QAEA49B,QACA59B,KAAA,WAEA2tE,OACA3tE,KAAA,OACAiC,QAAA,OACAxB,SACA,UACA,OACA,WAGAy+E,OACAl/E,KAAA,QAEA4U,SACA5U,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,yDACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,YACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,wCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,6CACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,YACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,4BACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,4BACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,oBAyBAW,EAAAwM,UAAA9gB,GACA78D,QACAuxE,SACAv3E,KAAA,QAEAk7E,YACAl7E,KAAA,UAEAi5E,mBACAj5E,KAAA,UACAkF,KAAA,sBAEA41E,gBACA96E,KAAA,UACAkF,KAAA,oBAEA61E,iBACA/6E,KAAA,OACAiC,QAAA,OACAxB,SACA,OACA,SACA,OACA,OAEAyE,KAAA,oBAEAg+E,gBACAljF,KAAA,SACAkF,KAAA,mBAEAi+E,eACAnjF,KAAA,SACAkF,KAAA,kBAEA0+E,kBACA5jF,KAAA,SACAkF,KAAA,qBAEA2+E,qBACA7jF,KAAA,SACAkF,KAAA,wBAEA4+E,iBACA9jF,KAAA,OACAS,SACA,OAEAyE,KAAA,oBAEAuX,SACAzc,KAAA,UAEAy7E,aACAz7E,KAAA,OACAS,SACA,WACA,WACA,eACA,SAEAyE,KAAA,iBAGAowE,OAEAkB,IAAA,2CACAvnC,KACA98C,OACA6N,KAAA,UAEAA,MACAA,KAAA,UAEAvG,IACAuG,KAAA,aAKAw2E,IAAA,mCACAvnC,KACA98C,OACA6N,KAAA,UAEAA,MACAA,KAAA,aAKApD,OAAA,SAQAu6E,EAAAlF,KAAApP,GACAx/B,KACAmzC,IAAA,KAEA1pC,eAAA,IACAlwC,OAAA,SAUAu6E,EAAAiK,UAAAve,GACAyS,OAEAkB,IAAA,8BACAvnC,KACA6zC,MACA9iF,KAAA,UAEAvG,IACAuG,KAAA,aAKAw2E,IAAA,sBACAvnC,KACA6zC,M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qBACAr3E,KAAA,SACAkF,KAAA,2BAGAm+B,KACAmzC,IAAA,kCACAvnC,KACA98C,OACA6N,KAAA,UAEAhG,QACAgG,KAAA,YAIApD,OAAA,SAiBAu6E,EAAAqB,QAAA9pF,UAAAssF,MAAAnY,GACA78D,QACAg5E,kBACAh/E,KAAA,OACAkF,KAAA,qBAEA+5E,iBACAj/E,KAAA,OACAkF,KAAA,oBAEAsyE,QACAx3E,KAAA,QAEA49B,QACA59B,KAAA,QAEA2tE,OACA3tE,KAAA,OACAiC,QAAA,UACAxB,SACA,UACA,UACA,WAGAy+E,OACAl/E,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,iCACAvnC,KACA98C,OACA6N,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,YACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,sBACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,YACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,qBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,cAYAW,EAAAqB,QAAA9pF,UAAA0wF,cAAAvc,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,mBAGAm+B,KACAmzC,IAAA,aAEAqB,UAAA,EACAj7E,OAAA,SAcAu6E,EAAAqB,QAAA9pF,UAAA2wF,QAAAxc,GACA78D,QACA80E,gBACA96E,KAAA,UACAkF,KAAA,oBAEA61E,iBACA/6E,KAAA,OACAiC,QAAA,OACAxB,SACA,OACA,SACA,OACA,OAEAyE,KAAA,oBAEA+zE,mBACAj5E,KAAA,UACAkF,KAAA,sBAEA+2E,mBACAj8E,KAAA,UACAkF,KAAA,uBAEAo6E,qBACAt/E,KAAA,UACAkF,KAAA,0BAGAowE,OAEAkB,IAAA,uBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2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GAs1E,OAEAkB,IAAA,iCACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,yBAcAW,EAAAjpE,MAAAxf,UAAAgU,KAAAmgE,GACA78D,QACAi0E,cACAj6E,KAAA,UACAkF,KAAA,iBAEA0P,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,kCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,WACA,KACA,UACA,MACA,cACA,YACA,OACA,UACA,cAMA+1E,IAAA,sBACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,sBACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,WACA,KACA,UACA,MACA,cACA,YACA,OACA,UACA,cAMA+1E,IAAA,cAqBAW,EAAAjpE,MAAAxf,UAAAssF,MAAAnY,GACA78D,QACAg5E,kBACAh/E,KAAA,OACAkF,KAAA,qBAEA+5E,iBACAj/E,KAAA,OACAkF,KAAA,oBAEAsyE,QACAx3E,KAAA,QAEA49B,QACA59B,KAAA,WAEA2tE,OACA3tE,KAAA,OACAiC,QAAA,OACAxB,SACA,UACA,OACA,WAGAy+E,OACAl/E,KAAA,QAEA4U,SACA5U,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,yDACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,YACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,wCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,6CACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,YACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,4BACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,4BACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,oBAyBAW,EAAAwM,UAAA9gB,GACA78D,QACAuxE,SACAv3E,KAAA,QAEAk7E,YACAl7E,KAAA,UAEAi5E,mBACAj5E,KAAA,UACAkF,KAAA,sBAEA41E,gBACA96E,KAAA,UACAkF,KAAA,oBAEA61E,iBACA/6E,KAAA,OACAiC,QAAA,OACAxB,SACA,OACA,SACA,OACA,OAEAyE,KAAA,oBAEAg+E,gBACAljF,KAAA,SACAkF,KAAA,mBAEAi+E,eACAnjF,KAAA,SACAkF,KAAA,kBAEA0+E,kBACA5jF,KAAA,SACAkF,KAAA,qBAEA2+E,qBACA7jF,KAAA,SACAkF,KAAA,wBAEA4+E,iBACA9jF,KAAA,OACAS,SACA,OAEAyE,KAAA,oBAEAuX,SACAzc,KAAA,UAEAy7E,aACAz7E,KAAA,OACAS,SACA,WACA,WACA,eACA,SAEAyE,KAAA,iBAGAowE,OAEAkB,IAAA,2CACAvnC,KACA98C,OACA6N,KAAA,UAEAA,MACAA,KAAA,UAEAvG,IACAuG,KAAA,aAKAw2E,IAAA,mCACAvnC,KACA98C,OACA6N,KAAA,UAEAA,MACAA,KAAA,aAKApD,OAAA,SAQAu6E,EAAAlF,KAAApP,GACAx/B,KACAmzC,IAAA,KAEA1pC,eAAA,IACAlwC,OAAA,SAUAu6E,EAAAiK,UAAAve,GACAyS,OAEAkB,IAAA,8BACAvnC,KACA6zC,MACA9iF,KAAA,UAEAvG,IACAuG,KAAA,aAKAw2E,IAAA,sBACAvnC,KACA6zC,MACA9iF,KAAA,aAKA63E,UAAA,EACAj7E,OAAA,QASAu6E,EAAAqH,YAAA3b,GACAx/B,KACAmzC,IAAA,4BACAvnC,KACA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QAAA9pF,UAAAqwF,OAAAlc,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,kBAEAmyE,qBACAr3E,KAAA,SACAkF,KAAA,2BAGAm+B,KACAmzC,IAAA,kCACAvnC,KACA98C,OACA6N,KAAA,UAEAhG,QACAgG,KAAA,YAIApD,OAAA,SAaAu6E,EAAAqB,QAAA9pF,UAAAkD,MAAAixE,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,kBAEAmyE,qBACAr3E,KAAA,SACAkF,KAAA,2BAGAm+B,KACAmzC,IAAA,iCACAvnC,KACA98C,OACA6N,KAAA,UAEAhG,QACAgG,KAAA,YAIApD,OAAA,SAiBAu6E,EAAAqB,QAAA9pF,UAAAssF,MAAAnY,GACA78D,QACAg5E,kBACAh/E,KAAA,OACAkF,KAAA,qBAEA+5E,iBACAj/E,KAAA,OACAkF,KAAA,oBAEAsyE,QACAx3E,KAAA,QAEA49B,QACA59B,KAAA,QAEA2tE,OACA3tE,KAAA,OACAiC,QAAA,UACAxB,SACA,UACA,UACA,WAGAy+E,OACAl/E,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,iCACAvnC,KACA98C,OACA6N,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,sBACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,qBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,cAYAW,EAAAqB,QAAA9pF,UAAA0wF,cAAAvc,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,mBAGAm+B,KACAmzC,IAAA,aAEAqB,UAAA,EACAj7E,OAAA,SAcAu6E,EAAAqB,QAA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,KAAA,UACAkF,KAAA,uBAEAlF,MACAA,KAAA,OACAS,SACA,MACA,OACA,UAGAmU,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,iCACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,yBAcAW,EAAAjpE,MAAAxf,UAAAgU,KAAAmgE,GACA78D,QACAi0E,cACAj6E,KAAA,UACAkF,KAAA,iBAEA0P,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,kCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,WACA,KACA,UACA,MACA,cACA,YACA,OACA,UACA,cAMA+1E,IAAA,sBACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,sBACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,WACA,KACA,UACA,MACA,cACA,YACA,OACA,UACA,cAMA+1E,IAAA,cAqBAW,EAAAjpE,MAAAxf,UAAAssF,MAAAnY,GACA78D,QACAg5E,kBACAh/E,KAAA,OACAkF,KAAA,qBAEA+5E,iBACAj/E,KAAA,OACAkF,KAAA,oBAEAsyE,QACAx3E,KAAA,QAEA49B,QACA59B,KAAA,WAEA2tE,OACA3tE,KAAA,OACAiC,QAAA,OACAxB,SACA,UACA,OACA,WAGAy+E,OACAl/E,KAAA,QAEA4U,SACA5U,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,yDACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,wCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,6CACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,4BACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,4BACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,oBAcAW,EAAAjpE,MAAAxf,UAAAwyF,MAAAre,GACA78D,QACAm7E,OACAnhF,KAAA,UACAiC,SAAA,GAEA2S,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,wCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,oBAMA+1E,IAAA,4BACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,4BACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,oBAMA+1E,IAAA,oBAUAW,EAAAlF,KAAApP,GACAx/B,KACAmzC,IAAA,KAEA1pC,eAAA,IACAlwC,OAAA,SAYAu6E,EAAAiK,UAAAve,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,kBAEAvK,SACAqF,KAAA,WAGAs1E,OAEAkB,IAAA,iCACAvnC,KACAx1C,IACAuG,KAAA,UAEArF,SACAqF,KAAA,aAKAw2E,IAAA,oBACAvnC,KACAx1C,IACAuG,KAAA,aAKA63E,UAAA,EACAj7E,OAAA,QAUAu6E,EAAA+M,SAAArhB,GACAyS,OAEAkB,IAAA,mCACAvnC,KACA98C,OACA6N,KAAA,QAEAA,MACAA,KAAA,WAKAw2E,IAAA,yBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,gBAGAqB,UAAA,EACAj7E,OAAA,SAcAu6E,EAAAkK,QAAAxe,GACA78D,QACAsxE,SACAt3E,KAAA,WAEA4U,SACA5U,KAAA,OACAiC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ACAkF,KAAA,qBAEA+5E,iBACAj/E,KAAA,OACAkF,KAAA,oBAEAsyE,QACAx3E,KAAA,QAEA49B,QACA59B,KAAA,QAEA2tE,OACA3tE,KAAA,OACAiC,QAAA,UACAxB,SACA,UACA,UACA,WAGAy+E,OACAl/E,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,iCACAvnC,KACA98C,OACA6N,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,sBACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,qBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,cAYAW,EAAAqB,QAAA9pF,UAAA0wF,cAAAvc,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,mBAGAm+B,KACAmzC,IAAA,aAEAqB,UAAA,EACAj7E,OAAA,SAcAu6E,EAAAqB,QAAA9pF,UAAA2wF,QAAAxc,GACA78D,QACA80E,gBACA96E,KAAA,UACAkF,KAAA,oBAEA61E,iBACA/6E,KAAA,OACAiC,QAAA,OACAxB,SACA,OACA,SACA,OACA,OAEAyE,KAAA,oBAEA+zE,mBACAj5E,KAAA,UACAkF,KAAA,sBAEA+2E,mBACAj8E,KAAA,UACAkF,KAAA,uBAEAo6E,qBACAt/E,KAAA,UACAkF,KAAA,0BAGAowE,OAEAkB,IAAA,uBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,cAGA55E,OAAA,SAsBAu6E,EAAAqB,QAAA9pF,UAAA6wF,cAAA1c,GACA78D,QACA20E,SACA36E,KAAA,WAEAi5E,mBACAj5E,KAAA,UACAkF,KAAA,sBAEA41E,gBACA96E,KAAA,UACAkF,KAAA,oBAEA61E,iBACA/6E,KAAA,OACAiC,Q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A,OACA,UACA,cAMA+1E,IAAA,cAqBAW,EAAAjpE,MAAAxf,UAAAssF,MAAAnY,GACA78D,QACAg5E,kBACAh/E,KAAA,OACAkF,KAAA,qBAEA+5E,iBACAj/E,KAAA,OACAkF,KAAA,oBAEAsyE,QACAx3E,KAAA,QAEA49B,QACA59B,KAAA,WAEA2tE,OACA3tE,KAAA,OACAiC,QAAA,OACAxB,SACA,UACA,OACA,WAGAy+E,OACAl/E,KAAA,QAEA4U,SACA5U,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,yDACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,wCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,6CACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,4BACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,4BACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,oBAcAW,EAAAjpE,MAAAxf,UAAAwyF,MAAAre,GACA78D,QACAm7E,OACAnhF,KAAA,UACAiC,SAAA,GAEA2S,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,wCACAvnC,KACAkpC,QAC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kF,KAAA,oBAEA61E,iBACA/6E,KAAA,OACAiC,QAAA,OACAxB,SACA,OACA,SACA,OACA,OAEAyE,KAAA,qBAGAowE,OAEAkB,IAAA,4BACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,qBAeAW,EAAAqB,QAAA9pF,UAAAqwF,OAAAlc,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,kBAEAmyE,qBACAr3E,KAAA,SACAkF,KAAA,2BAGAm+B,KACAmzC,IAAA,kCACAvnC,KACA98C,OACA6N,KAAA,UAEAhG,QACAgG,KAAA,YAIApD,OAAA,SAaAu6E,EAAAqB,QAAA9pF,UAAAkD,MAAAixE,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,kBAEAmyE,qBACAr3E,KAAA,SACAkF,KAAA,2BAGAm+B,KACAmzC,IAAA,iCACAvnC,KACA98C,OACA6N,KAAA,UAEAhG,QACAgG,KAAA,YAIApD,OAAA,SAiBAu6E,EAAAqB,QAAA9pF,UAAAssF,MAAAnY,GACA78D,QACAg5E,kBACAh/E,KAAA,OACAkF,KAAA,qBAEA+5E,iBACAj/E,KAAA,OACAkF,KAAA,oBAEAsyE,QACAx3E,KAAA,QAEA49B,QACA59B,KAAA,QAEA2tE,OACA3tE,KAAA,OACAiC,QAAA,UACAxB,SACA,UACA,UACA,WAGAy+E,OACAl/E,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,iCACAvnC,KACA98C,OACA6N,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,sBACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,qBACAvnC,KACA98C,OACA6N,KAAA,WAKAw2E,IAAA,cA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GA55E,OAAA,SAGAu6E,EAAAjpE,MAAAwQ,IAcAy4D,EAAAjpE,MAAAxf,UAAAmyF,WAAAhe,GACA78D,QACA86E,UACA9gF,KAAA,QAEAg5E,WACAh5E,KAAA,UAEA+gF,SACA/gF,KAAA,UAEAghF,mBACAhhF,KAAA,UACAkF,KAAA,uBAEAlF,MACAA,KAAA,OACAS,SACA,MACA,OACA,UAGAmU,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,iCACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,yBAcAW,EAAAjpE,MAAAxf,UAAAgU,KAAAmgE,GACA78D,QACAi0E,cACAj6E,KAAA,UACAkF,KAAA,iBAEA0P,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,kCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,WACA,KACA,UACA,MACA,cACA,YACA,OACA,UACA,cAMA+1E,IAAA,sBACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,sBACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,WACA,KACA,UACA,MACA,cACA,YACA,OACA,UACA,cAMA+1E,IAAA,cAqBAW,EAAAjpE,MAAAxf,UAAAssF,MAAAnY,GACA78D,QACAg5E,kBACAh/E,KAAA,OACAkF,KAAA,qBAEA+5E,iBACAj/E,KAAA,OACAkF,KAAA,oBAEAsyE,QACAx3E,KAAA,QAEA49B,QACA59B,KAAA,WAEA2tE,OACA3tE,KAAA,OACAiC,QAAA,OACAxB,SACA,UACA,OACA,WAGAy+E,OACAl/E,KAAA,QAEA4U,SACA5U,KAAA,QAEAm/E,yBACAn/E,KAAA,UACAiC,SAAA,EACAiD,KAAA,+BAGAowE,OAEAkB,IAAA,yDACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,wCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,6CACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,cAGAwgF,aACAjhF,KAAA,OACAS,SACA,OACA,aACA,OACA,YACA,cACA,QACA,MACA,WACA,QACA,gBACA,UACA,SACA,WACA,QACA,SACA,eAMA+1E,IAAA,4BACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,4BACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,UACA,KACA,OACA,UACA,MACA,KACA,UACA,cACA,YACA,iBAMA+1E,IAAA,oBAcAW,EAAAjpE,MAAAxf,UAAAwyF,MAAAre,GACA78D,QACAm7E,OACAnhF,KAAA,UACAiC,SAAA,GAEA2S,SACA5U,KAAA,SAGAs1E,OAEAkB,IAAA,wCACAvnC,KACAkpC,QACAn4E,KAAA,QAEA66E,QACA76E,KAAA,OACAS,SACA,OACA,oBAMA+1E,IAAA,4BACAvnC,KACAkpC,QACAn4E,KAAA,WAKAw2E,IAAA,4BACAvnC,KACA4rC,QACA76E,KAAA,OACAS,SACA,OACA,oBAMA+1E,IAAA,oBAUAW,EAAAlF,KAAApP,GACAx/B,KACAmzC,IAAA,KAEA1pC,eAAA,IACAlwC,OAAA,SAYAu6E,EAAAiK,UAAAve,GACA78D,QACA4O,SACA5U,KAAA,QAEAg4E,eACAh4E,KAAA,OACAkF,KAAA,kBAEAvK,SACAqF,KAAA,WAGAs1E,OAEAkB,IAAA,iCACAvnC,KACAx1C,IACAuG,KAAA,UAEArF,SACAqF,KAAA,aAKAw2E,IAAA,oBACAvnC,KACAx1C,IACAuG,KAAA,aAKA63E,UAAA,EACAj7E,OAAA,QAUAu6E,EAAA+M,SAAArhB,GACAyS,OAEAkB,IAAA,mCACAvnC,KACA98C,OACA6N,KAAA,QAEAA,MACAA,KAA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","file":"static/js/vendor.b2259c844eab2f31604e.js","sourcesContent":["/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_objectToString.js\n// module id = +66z\n// module chunks = 0","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_descriptors.js\n// module id = +E39\n// module chunks = 0","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_ctx.js\n// module id = +ZMJ\n// module chunks = 0","/*!\n * Vue.js v2.5.13\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value e.g. [object Object]\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\n\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm || {};\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\n\nvar uid$1 = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid$1++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode, deep) {\n  var componentOptions = vnode.componentOptions;\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.isCloned = true;\n  if (deep) {\n    if (vnode.children) {\n      cloned.children = cloneVNodes(vnode.children, true);\n    }\n    if (componentOptions && componentOptions.children) {\n      componentOptions.children = cloneVNodes(componentOptions.children, true);\n    }\n  }\n  return cloned\n}\n\nfunction cloneVNodes (vnodes, deep) {\n  var len = vnodes.length;\n  var res = new Array(len);\n  for (var i = 0; i < len; i++) {\n    res[i] = cloneVNode(vnodes[i], deep);\n  }\n  return res\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n].forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src, keys) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'can only contain alphanumeric characters and the hyphen, ' +\n      'and must start with a letter.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    // skip validation for weex recycle-list child component props\n    !(false && isObject(value) && ('@binding' in value))\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n      \" Expected \" + (expectedTypes.map(capitalize).join(', ')) +\n      \", got \" + (toRawType(value)) + \".\",\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (vm) {\n    var cur = vm;\n    while ((cur = cur.$parent)) {\n      var hooks = cur.$options.errorCaptured;\n      if (hooks) {\n        for (var i = 0; i < hooks.length; i++) {\n          try {\n            var capture = hooks[i].call(cur, err, vm, info) === false;\n            if (capture) { return }\n          } catch (e) {\n            globalHandleError(e, cur, 'errorCaptured hook');\n          }\n        }\n      }\n    }\n  }\n  globalHandleError(err, vm, info);\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      logError(e, null, 'config.errorHandler');\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (process.env.NODE_ENV !== 'production') {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n/* globals MessageChannel */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using both micro and macro tasks.\n// In < 2.4 we used micro tasks everywhere, but there are some scenarios where\n// micro tasks have too high a priority and fires in between supposedly\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\n// event (#6566). However, using macro tasks everywhere also has subtle problems\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\n// Here we use micro task by default, but expose a way to force macro task when\n// needed (e.g. in event handlers attached by v-on).\nvar microTimerFunc;\nvar macroTimerFunc;\nvar useMacroTask = false;\n\n// Determine (macro) Task defer implementation.\n// Technically setImmediate should be the ideal choice, but it's only available\n// in IE. The only polyfill that consistently queues the callback after all DOM\n// events triggered in the same loop is by using MessageChannel.\n/* istanbul ignore if */\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else if (typeof MessageChannel !== 'undefined' && (\n  isNative(MessageChannel) ||\n  // PhantomJS\n  MessageChannel.toString() === '[object MessageChannelConstructor]'\n)) {\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = flushCallbacks;\n  macroTimerFunc = function () {\n    port.postMessage(1);\n  };\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\n// Determine MicroTask defer implementation.\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  microTimerFunc = function () {\n    p.then(flushCallbacks);\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else {\n  // fallback to macro\n  microTimerFunc = macroTimerFunc;\n}\n\n/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a Task instead of a MicroTask.\n */\nfunction withMacroTask (fn) {\n  return fn._withTask || (fn._withTask = function () {\n    useMacroTask = true;\n    var res = fn.apply(null, arguments);\n    useMacroTask = false;\n    return res\n  })\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    if (useMacroTask) {\n      macroTimerFunc();\n    } else {\n      microTimerFunc();\n    }\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, def, cur, old, event;\n  for (name in on) {\n    def = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    /* istanbul ignore if */\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (process.env.NODE_ENV !== 'production') {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                process.env.NODE_ENV !== 'production'\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$off(event[i], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    if (fn) {\n      // specific handler\n      var cb;\n      var i$1 = cbs.length;\n      while (i$1--) {\n        cb = cbs[i$1];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i$1, 1);\n          break\n        }\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (process.env.NODE_ENV !== 'production') {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args);\n        } catch (e) {\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n        }\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n      // no need for the ref nodes after initial patch\n      // this prevents keeping a detached DOM tree in memory (#5851)\n      vm.$options._parentElm = vm.$options._refElm = null;\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = (parentVnode.data && parentVnode.data.attrs) || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    observerState.shouldConvert = false;\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\n    }\n    observerState.shouldConvert = true;\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  if (listeners) {\n    var oldListeners = vm.$options._parentListeners;\n    vm.$options._parentListeners = listeners;\n    updateComponentListeners(vm, listeners, oldListeners);\n  }\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive(props, key, value, function () {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : userDef;\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods[key] == null) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  keyOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(keyOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    observerState.shouldConvert = false;\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive(vm, key, result[key]);\n      }\n    });\n    observerState.shouldConvert = true;\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject).filter(function (key) {\n        /* istanbul ignore next */\n        return Object.getOwnPropertyDescriptor(inject, key).enumerable\n      })\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (process.env.NODE_ENV !== 'production') {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (process.env.NODE_ENV !== 'production' && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes) {\n      if (process.env.NODE_ENV !== 'production' && slotNodes._rendered) {\n        warn(\n          \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n          \"- this will likely cause render errors.\",\n          this\n        );\n      }\n      slotNodes._rendered = true;\n    }\n    nodes = slotNodes || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInAlias,\n  eventKeyName\n) {\n  var keyCodes = config.keyCodes[key] || builtInAlias;\n  if (keyCodes) {\n    if (Array.isArray(keyCodes)) {\n      return keyCodes.indexOf(eventKeyCode) === -1\n    } else {\n      return keyCodes !== eventKeyCode\n    }\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree by doing a shallow clone.\n  if (tree && !isInFor) {\n    return Array.isArray(tree)\n      ? cloneVNodes(tree)\n      : cloneVNode(tree)\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var options = Ctor.options;\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () { return resolveSlots(children, parent); };\n\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm = Object.create(parent);\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = data.scopedSlots || emptyObject;\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    vnode.fnContext = contextVm;\n    vnode.fnOptions = options;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n\n  return vnode\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n\n\n\n// Register the component hook to weex native render engine.\n// The hook will be triggered by native, not javascript.\n\n\n// Updates the state of the component to weex native render engine.\n\n/*  */\n\n// https://github.com/Hanks10100/weex-native-directive/tree/master/component\n\n// listening on native callback\n\n/*  */\n\n/*  */\n\n// hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  // Weex specific: invoke recycle-list optimized @render function for\n  // extracting cell-slot template.\n  // https://github.com/Hanks10100/weex-native-directive/tree/master/component\n  /* istanbul ignore if */\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    _parentVnode: vnode,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = componentVNodeHooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (process.env.NODE_ENV !== 'production' &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // if the parent didn't update, the slot nodes will be the ones from\n      // last render. They need to be cloned to ensure \"freshness\" for this render.\n      for (var key in vm.$slots) {\n        var slot = vm.$slots[key];\n        // _rendered is a flag added by renderSlot, but may not be present\n        // if the slot is passed from manually written render functions\n        if (slot._rendered || (slot[0] && slot[0].elm)) {\n          vm.$slots[key] = cloneVNodes(slot, true /* deep */);\n        }\n      }\n    }\n\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        if (vm.$options.renderError) {\n          try {\n            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n          } catch (e) {\n            handleError(e, vm, \"renderError\");\n            vnode = vm._vnode;\n          }\n        } else {\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue$3 (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue$3)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production' && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache, key, this$1.keys);\n    }\n  },\n\n  watch: {\n    include: function include (val) {\n      pruneCache(this, function (name) { return matches(val, name); });\n    },\n    exclude: function exclude (val) {\n      pruneCache(this, function (name) { return !matches(val, name); });\n    }\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\nVue$3.version = '2.5.13';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\n\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove () {\n      if (--remove.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove.listeners = listeners;\n    return remove\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (ref$$1.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (process.env.NODE_ENV !== 'production') {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setAttribute(vnode.elm, i, '');\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (process.env.NODE_ENV !== 'production') {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // #7138: IE10 & 11 fires input event when setting placeholder on\n      // <textarea>... block the first input event and remove the blocker\n      // immediately.\n      /* istanbul ignore if */\n      if (\n        isIE && !isIE9 &&\n        el.tagName === 'TEXTAREA' &&\n        key === 'placeholder' && !el.__ieph\n      ) {\n        var blocker = function (e) {\n          e.stopImmediatePropagation();\n          el.removeEventListener('input', blocker);\n        };\n        el.addEventListener('input', blocker);\n        // $flow-disable-line\n        el.__ieph = true; /* IE placeholder patched */\n      }\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\n/*  */\n\n\n\n\n\n\n\n\n\n// add a raw attr (use this in preTransforms)\n\n\n\n\n\n\n\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\n\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\n\n/*  */\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler (handler, event, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  handler = withMacroTask(handler);\n  if (once$$1) { handler = createOnceHandler(handler, event, capture); }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    event,\n    handler._withTask || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.lazy) {\n      // inputs with lazy should only be updated when not in focus\n      return false\n    }\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def) {\n  if (!def) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def === 'object') {\n    var res = {};\n    if (def.css !== false) {\n      extend(res, autoCssTransition(def.name || 'v'));\n    }\n    extend(res, def);\n    return res\n  } else if (typeof def === 'string') {\n    return autoCssTransition(def)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        if (isValidDuration(explicitEnterDuration)) {\n          setTimeout(cb, explicitEnterDuration);\n        } else {\n          whenTransitionEnds(el, type, cb);\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          if (isValidDuration(explicitLeaveDuration)) {\n            setTimeout(cb, explicitLeaveDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.mustUseProp = mustUseProp;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.isReservedAttr = isReservedAttr;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nVue$3.nextTick(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (process.env.NODE_ENV !== 'production' && isChrome) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n    config.productionTip !== false &&\n    inBrowser && typeof console !== 'undefined'\n  ) {\n    console[console.info ? 'info' : 'log'](\n      \"You are running Vue in development mode.\\n\" +\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\n    );\n  }\n}, 0);\n\n/*  */\n\nexport default Vue$3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue/dist/vue.runtime.esm.js\n// module id = /5sW\n// module chunks = 0","module.exports = {};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iterators.js\n// module id = /bQp\n// module chunks = 0","/**\n  * vue-router v3.0.1\n  * (c) 2017 Evan You\n  * @license MIT\n  */\n/*  */\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error((\"[vue-router] \" + message))\n  }\n}\n\nfunction warn (condition, message) {\n  if (process.env.NODE_ENV !== 'production' && !condition) {\n    typeof console !== 'undefined' && console.warn((\"[vue-router] \" + message));\n  }\n}\n\nfunction isError (err) {\n  return Object.prototype.toString.call(err).indexOf('Error') > -1\n}\n\nvar View = {\n  name: 'router-view',\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    }\n  },\n  render: function render (_, ref) {\n    var props = ref.props;\n    var children = ref.children;\n    var parent = ref.parent;\n    var data = ref.data;\n\n    data.routerView = true;\n\n    // directly use parent context's createElement() function\n    // so that components rendered by router-view can resolve named slots\n    var h = parent.$createElement;\n    var name = props.name;\n    var route = parent.$route;\n    var cache = parent._routerViewCache || (parent._routerViewCache = {});\n\n    // determine current view depth, also check to see if the tree\n    // has been toggled inactive but kept-alive.\n    var depth = 0;\n    var inactive = false;\n    while (parent && parent._routerRoot !== parent) {\n      if (parent.$vnode && parent.$vnode.data.routerView) {\n        depth++;\n      }\n      if (parent._inactive) {\n        inactive = true;\n      }\n      parent = parent.$parent;\n    }\n    data.routerViewDepth = depth;\n\n    // render previous view if the tree is inactive and kept-alive\n    if (inactive) {\n      return h(cache[name], data, children)\n    }\n\n    var matched = route.matched[depth];\n    // render empty node if no matched route\n    if (!matched) {\n      cache[name] = null;\n      return h()\n    }\n\n    var component = cache[name] = matched.components[name];\n\n    // attach instance registration hook\n    // this will be called in the instance's injected lifecycle hooks\n    data.registerRouteInstance = function (vm, val) {\n      // val could be undefined for unregistration\n      var current = matched.instances[name];\n      if (\n        (val && current !== vm) ||\n        (!val && current === vm)\n      ) {\n        matched.instances[name] = val;\n      }\n    }\n\n    // also register instance in prepatch hook\n    // in case the same component instance is reused across different routes\n    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {\n      matched.instances[name] = vnode.componentInstance;\n    };\n\n    // resolve props\n    var propsToPass = data.props = resolveProps(route, matched.props && matched.props[name]);\n    if (propsToPass) {\n      // clone to prevent mutation\n      propsToPass = data.props = extend({}, propsToPass);\n      // pass non-declared props as attrs\n      var attrs = data.attrs = data.attrs || {};\n      for (var key in propsToPass) {\n        if (!component.props || !(key in component.props)) {\n          attrs[key] = propsToPass[key];\n          delete propsToPass[key];\n        }\n      }\n    }\n\n    return h(component, data, children)\n  }\n};\n\nfunction resolveProps (route, config) {\n  switch (typeof config) {\n    case 'undefined':\n      return\n    case 'object':\n      return config\n    case 'function':\n      return config(route)\n    case 'boolean':\n      return config ? route.params : undefined\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false,\n          \"props in \\\"\" + (route.path) + \"\\\" is a \" + (typeof config) + \", \" +\n          \"expecting an object, function or boolean.\"\n        );\n      }\n  }\n}\n\nfunction extend (to, from) {\n  for (var key in from) {\n    to[key] = from[key];\n  }\n  return to\n}\n\n/*  */\n\nvar encodeReserveRE = /[!'()*]/g;\nvar encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };\nvar commaRE = /%2C/g;\n\n// fixed encodeURIComponent which is more conformant to RFC3986:\n// - escapes [!'()*]\n// - preserve commas\nvar encode = function (str) { return encodeURIComponent(str)\n  .replace(encodeReserveRE, encodeReserveReplacer)\n  .replace(commaRE, ','); };\n\nvar decode = decodeURIComponent;\n\nfunction resolveQuery (\n  query,\n  extraQuery,\n  _parseQuery\n) {\n  if ( extraQuery === void 0 ) extraQuery = {};\n\n  var parse = _parseQuery || parseQuery;\n  var parsedQuery;\n  try {\n    parsedQuery = parse(query || '');\n  } catch (e) {\n    process.env.NODE_ENV !== 'production' && warn(false, e.message);\n    parsedQuery = {};\n  }\n  for (var key in extraQuery) {\n    parsedQuery[key] = extraQuery[key];\n  }\n  return parsedQuery\n}\n\nfunction parseQuery (query) {\n  var res = {};\n\n  query = query.trim().replace(/^(\\?|#|&)/, '');\n\n  if (!query) {\n    return res\n  }\n\n  query.split('&').forEach(function (param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = decode(parts.shift());\n    var val = parts.length > 0\n      ? decode(parts.join('='))\n      : null;\n\n    if (res[key] === undefined) {\n      res[key] = val;\n    } else if (Array.isArray(res[key])) {\n      res[key].push(val);\n    } else {\n      res[key] = [res[key], val];\n    }\n  });\n\n  return res\n}\n\nfunction stringifyQuery (obj) {\n  var res = obj ? Object.keys(obj).map(function (key) {\n    var val = obj[key];\n\n    if (val === undefined) {\n      return ''\n    }\n\n    if (val === null) {\n      return encode(key)\n    }\n\n    if (Array.isArray(val)) {\n      var result = [];\n      val.forEach(function (val2) {\n        if (val2 === undefined) {\n          return\n        }\n        if (val2 === null) {\n          result.push(encode(key));\n        } else {\n          result.push(encode(key) + '=' + encode(val2));\n        }\n      });\n      return result.join('&')\n    }\n\n    return encode(key) + '=' + encode(val)\n  }).filter(function (x) { return x.length > 0; }).join('&') : null;\n  return res ? (\"?\" + res) : ''\n}\n\n/*  */\n\n\nvar trailingSlashRE = /\\/?$/;\n\nfunction createRoute (\n  record,\n  location,\n  redirectedFrom,\n  router\n) {\n  var stringifyQuery$$1 = router && router.options.stringifyQuery;\n\n  var query = location.query || {};\n  try {\n    query = clone(query);\n  } catch (e) {}\n\n  var route = {\n    name: location.name || (record && record.name),\n    meta: (record && record.meta) || {},\n    path: location.path || '/',\n    hash: location.hash || '',\n    query: query,\n    params: location.params || {},\n    fullPath: getFullPath(location, stringifyQuery$$1),\n    matched: record ? formatMatch(record) : []\n  };\n  if (redirectedFrom) {\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);\n  }\n  return Object.freeze(route)\n}\n\nfunction clone (value) {\n  if (Array.isArray(value)) {\n    return value.map(clone)\n  } else if (value && typeof value === 'object') {\n    var res = {};\n    for (var key in value) {\n      res[key] = clone(value[key]);\n    }\n    return res\n  } else {\n    return value\n  }\n}\n\n// the starting route that represents the initial state\nvar START = createRoute(null, {\n  path: '/'\n});\n\nfunction formatMatch (record) {\n  var res = [];\n  while (record) {\n    res.unshift(record);\n    record = record.parent;\n  }\n  return res\n}\n\nfunction getFullPath (\n  ref,\n  _stringifyQuery\n) {\n  var path = ref.path;\n  var query = ref.query; if ( query === void 0 ) query = {};\n  var hash = ref.hash; if ( hash === void 0 ) hash = '';\n\n  var stringify = _stringifyQuery || stringifyQuery;\n  return (path || '/') + stringify(query) + hash\n}\n\nfunction isSameRoute (a, b) {\n  if (b === START) {\n    return a === b\n  } else if (!b) {\n    return false\n  } else if (a.path && b.path) {\n    return (\n      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query)\n    )\n  } else if (a.name && b.name) {\n    return (\n      a.name === b.name &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query) &&\n      isObjectEqual(a.params, b.params)\n    )\n  } else {\n    return false\n  }\n}\n\nfunction isObjectEqual (a, b) {\n  if ( a === void 0 ) a = {};\n  if ( b === void 0 ) b = {};\n\n  // handle null value #1566\n  if (!a || !b) { return a === b }\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n  if (aKeys.length !== bKeys.length) {\n    return false\n  }\n  return aKeys.every(function (key) {\n    var aVal = a[key];\n    var bVal = b[key];\n    // check nested equality\n    if (typeof aVal === 'object' && typeof bVal === 'object') {\n      return isObjectEqual(aVal, bVal)\n    }\n    return String(aVal) === String(bVal)\n  })\n}\n\nfunction isIncludedRoute (current, target) {\n  return (\n    current.path.replace(trailingSlashRE, '/').indexOf(\n      target.path.replace(trailingSlashRE, '/')\n    ) === 0 &&\n    (!target.hash || current.hash === target.hash) &&\n    queryIncludes(current.query, target.query)\n  )\n}\n\nfunction queryIncludes (current, target) {\n  for (var key in target) {\n    if (!(key in current)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*  */\n\n// work around weird flow bug\nvar toTypes = [String, Object];\nvar eventTypes = [String, Array];\n\nvar Link = {\n  name: 'router-link',\n  props: {\n    to: {\n      type: toTypes,\n      required: true\n    },\n    tag: {\n      type: String,\n      default: 'a'\n    },\n    exact: Boolean,\n    append: Boolean,\n    replace: Boolean,\n    activeClass: String,\n    exactActiveClass: String,\n    event: {\n      type: eventTypes,\n      default: 'click'\n    }\n  },\n  render: function render (h) {\n    var this$1 = this;\n\n    var router = this.$router;\n    var current = this.$route;\n    var ref = router.resolve(this.to, current, this.append);\n    var location = ref.location;\n    var route = ref.route;\n    var href = ref.href;\n\n    var classes = {};\n    var globalActiveClass = router.options.linkActiveClass;\n    var globalExactActiveClass = router.options.linkExactActiveClass;\n    // Support global empty active class\n    var activeClassFallback = globalActiveClass == null\n            ? 'router-link-active'\n            : globalActiveClass;\n    var exactActiveClassFallback = globalExactActiveClass == null\n            ? 'router-link-exact-active'\n            : globalExactActiveClass;\n    var activeClass = this.activeClass == null\n            ? activeClassFallback\n            : this.activeClass;\n    var exactActiveClass = this.exactActiveClass == null\n            ? exactActiveClassFallback\n            : this.exactActiveClass;\n    var compareTarget = location.path\n      ? createRoute(null, location, null, router)\n      : route;\n\n    classes[exactActiveClass] = isSameRoute(current, compareTarget);\n    classes[activeClass] = this.exact\n      ? classes[exactActiveClass]\n      : isIncludedRoute(current, compareTarget);\n\n    var handler = function (e) {\n      if (guardEvent(e)) {\n        if (this$1.replace) {\n          router.replace(location);\n        } else {\n          router.push(location);\n        }\n      }\n    };\n\n    var on = { click: guardEvent };\n    if (Array.isArray(this.event)) {\n      this.event.forEach(function (e) { on[e] = handler; });\n    } else {\n      on[this.event] = handler;\n    }\n\n    var data = {\n      class: classes\n    };\n\n    if (this.tag === 'a') {\n      data.on = on;\n      data.attrs = { href: href };\n    } else {\n      // find the first <a> child and apply listener and href\n      var a = findAnchor(this.$slots.default);\n      if (a) {\n        // in case the <a> is a static node\n        a.isStatic = false;\n        var extend = _Vue.util.extend;\n        var aData = a.data = extend({}, a.data);\n        aData.on = on;\n        var aAttrs = a.data.attrs = extend({}, a.data.attrs);\n        aAttrs.href = href;\n      } else {\n        // doesn't have <a> child, apply listener to self\n        data.on = on;\n      }\n    }\n\n    return h(this.tag, data, this.$slots.default)\n  }\n};\n\nfunction guardEvent (e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) { return }\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) { return }\n  // don't redirect if `target=\"_blank\"`\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    var target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) { return }\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) {\n    e.preventDefault();\n  }\n  return true\n}\n\nfunction findAnchor (children) {\n  if (children) {\n    var child;\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      if (child.tag === 'a') {\n        return child\n      }\n      if (child.children && (child = findAnchor(child.children))) {\n        return child\n      }\n    }\n  }\n}\n\nvar _Vue;\n\nfunction install (Vue) {\n  if (install.installed && _Vue === Vue) { return }\n  install.installed = true;\n\n  _Vue = Vue;\n\n  var isDef = function (v) { return v !== undefined; };\n\n  var registerInstance = function (vm, callVal) {\n    var i = vm.$options._parentVnode;\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal);\n    }\n  };\n\n  Vue.mixin({\n    beforeCreate: function beforeCreate () {\n      if (isDef(this.$options.router)) {\n        this._routerRoot = this;\n        this._router = this.$options.router;\n        this._router.init(this);\n        Vue.util.defineReactive(this, '_route', this._router.history.current);\n      } else {\n        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;\n      }\n      registerInstance(this, this);\n    },\n    destroyed: function destroyed () {\n      registerInstance(this);\n    }\n  });\n\n  Object.defineProperty(Vue.prototype, '$router', {\n    get: function get () { return this._routerRoot._router }\n  });\n\n  Object.defineProperty(Vue.prototype, '$route', {\n    get: function get () { return this._routerRoot._route }\n  });\n\n  Vue.component('router-view', View);\n  Vue.component('router-link', Link);\n\n  var strats = Vue.config.optionMergeStrategies;\n  // use the same hook merging strategy for route hooks\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;\n}\n\n/*  */\n\nvar inBrowser = typeof window !== 'undefined';\n\n/*  */\n\nfunction resolvePath (\n  relative,\n  base,\n  append\n) {\n  var firstChar = relative.charAt(0);\n  if (firstChar === '/') {\n    return relative\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative\n  }\n\n  var stack = base.split('/');\n\n  // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  }\n\n  // resolve relative path\n  var segments = relative.replace(/^\\//, '').split('/');\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (segment === '..') {\n      stack.pop();\n    } else if (segment !== '.') {\n      stack.push(segment);\n    }\n  }\n\n  // ensure leading slash\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n\n  return stack.join('/')\n}\n\nfunction parsePath (path) {\n  var hash = '';\n  var query = '';\n\n  var hashIndex = path.indexOf('#');\n  if (hashIndex >= 0) {\n    hash = path.slice(hashIndex);\n    path = path.slice(0, hashIndex);\n  }\n\n  var queryIndex = path.indexOf('?');\n  if (queryIndex >= 0) {\n    query = path.slice(queryIndex + 1);\n    path = path.slice(0, queryIndex);\n  }\n\n  return {\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction cleanPath (path) {\n  return path.replace(/\\/\\//g, '/')\n}\n\nvar isarray = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n/**\n * Expose `pathToRegexp`.\n */\nvar pathToRegexp_1 = pathToRegexp;\nvar parse_1 = parse;\nvar compile_1 = compile;\nvar tokensToFunction_1 = tokensToFunction;\nvar tokensToRegExp_1 = tokensToRegExp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || '/';\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      continue\n    }\n\n    var next = str[index];\n    var prefix = res[2];\n    var name = res[3];\n    var capture = res[4];\n    var group = res[5];\n    var modifier = res[6];\n    var asterisk = res[7];\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n    }\n\n    var partial = prefix != null && next != null && next !== prefix;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = res[2] || defaultDelimiter;\n    var pattern = capture || group;\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    });\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index);\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path);\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (obj, opts) {\n    var path = '';\n    var data = obj || {};\n    var options = opts || {};\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n\n        continue\n      }\n\n      var value = data[token.name];\n      var segment;\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix;\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment;\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys;\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      });\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var prefix = escapeString(token.prefix);\n      var capture = '(?:' + token.pattern + ')';\n\n      keys.push(token);\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*';\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?';\n        } else {\n          capture = prefix + '(' + capture + ')?';\n        }\n      } else {\n        capture = prefix + '(' + capture + ')';\n      }\n\n      route += capture;\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/');\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n\npathToRegexp_1.parse = parse_1;\npathToRegexp_1.compile = compile_1;\npathToRegexp_1.tokensToFunction = tokensToFunction_1;\npathToRegexp_1.tokensToRegExp = tokensToRegExp_1;\n\n/*  */\n\n// $flow-disable-line\nvar regexpCompileCache = Object.create(null);\n\nfunction fillParams (\n  path,\n  params,\n  routeMsg\n) {\n  try {\n    var filler =\n      regexpCompileCache[path] ||\n      (regexpCompileCache[path] = pathToRegexp_1.compile(path));\n    return filler(params || {}, { pretty: true })\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(false, (\"missing param for \" + routeMsg + \": \" + (e.message)));\n    }\n    return ''\n  }\n}\n\n/*  */\n\nfunction createRouteMap (\n  routes,\n  oldPathList,\n  oldPathMap,\n  oldNameMap\n) {\n  // the path list is used to control path matching priority\n  var pathList = oldPathList || [];\n  // $flow-disable-line\n  var pathMap = oldPathMap || Object.create(null);\n  // $flow-disable-line\n  var nameMap = oldNameMap || Object.create(null);\n\n  routes.forEach(function (route) {\n    addRouteRecord(pathList, pathMap, nameMap, route);\n  });\n\n  // ensure wildcard routes are always at the end\n  for (var i = 0, l = pathList.length; i < l; i++) {\n    if (pathList[i] === '*') {\n      pathList.push(pathList.splice(i, 1)[0]);\n      l--;\n      i--;\n    }\n  }\n\n  return {\n    pathList: pathList,\n    pathMap: pathMap,\n    nameMap: nameMap\n  }\n}\n\nfunction addRouteRecord (\n  pathList,\n  pathMap,\n  nameMap,\n  route,\n  parent,\n  matchAs\n) {\n  var path = route.path;\n  var name = route.name;\n  if (process.env.NODE_ENV !== 'production') {\n    assert(path != null, \"\\\"path\\\" is required in a route configuration.\");\n    assert(\n      typeof route.component !== 'string',\n      \"route config \\\"component\\\" for path: \" + (String(path || name)) + \" cannot be a \" +\n      \"string id. Use an actual component instead.\"\n    );\n  }\n\n  var pathToRegexpOptions = route.pathToRegexpOptions || {};\n  var normalizedPath = normalizePath(\n    path,\n    parent,\n    pathToRegexpOptions.strict\n  );\n\n  if (typeof route.caseSensitive === 'boolean') {\n    pathToRegexpOptions.sensitive = route.caseSensitive;\n  }\n\n  var record = {\n    path: normalizedPath,\n    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),\n    components: route.components || { default: route.component },\n    instances: {},\n    name: name,\n    parent: parent,\n    matchAs: matchAs,\n    redirect: route.redirect,\n    beforeEnter: route.beforeEnter,\n    meta: route.meta || {},\n    props: route.props == null\n      ? {}\n      : route.components\n        ? route.props\n        : { default: route.props }\n  };\n\n  if (route.children) {\n    // Warn if route is named, does not redirect and has a default child route.\n    // If users navigate to this route by name, the default child will\n    // not be rendered (GH Issue #629)\n    if (process.env.NODE_ENV !== 'production') {\n      if (route.name && !route.redirect && route.children.some(function (child) { return /^\\/?$/.test(child.path); })) {\n        warn(\n          false,\n          \"Named Route '\" + (route.name) + \"' has a default child route. \" +\n          \"When navigating to this named route (:to=\\\"{name: '\" + (route.name) + \"'\\\"), \" +\n          \"the default child route will not be rendered. Remove the name from \" +\n          \"this route and use the name of the default child route for named \" +\n          \"links instead.\"\n        );\n      }\n    }\n    route.children.forEach(function (child) {\n      var childMatchAs = matchAs\n        ? cleanPath((matchAs + \"/\" + (child.path)))\n        : undefined;\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);\n    });\n  }\n\n  if (route.alias !== undefined) {\n    var aliases = Array.isArray(route.alias)\n      ? route.alias\n      : [route.alias];\n\n    aliases.forEach(function (alias) {\n      var aliasRoute = {\n        path: alias,\n        children: route.children\n      };\n      addRouteRecord(\n        pathList,\n        pathMap,\n        nameMap,\n        aliasRoute,\n        parent,\n        record.path || '/' // matchAs\n      );\n    });\n  }\n\n  if (!pathMap[record.path]) {\n    pathList.push(record.path);\n    pathMap[record.path] = record;\n  }\n\n  if (name) {\n    if (!nameMap[name]) {\n      nameMap[name] = record;\n    } else if (process.env.NODE_ENV !== 'production' && !matchAs) {\n      warn(\n        false,\n        \"Duplicate named routes definition: \" +\n        \"{ name: \\\"\" + name + \"\\\", path: \\\"\" + (record.path) + \"\\\" }\"\n      );\n    }\n  }\n}\n\nfunction compileRouteRegex (path, pathToRegexpOptions) {\n  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);\n  if (process.env.NODE_ENV !== 'production') {\n    var keys = Object.create(null);\n    regex.keys.forEach(function (key) {\n      warn(!keys[key.name], (\"Duplicate param keys in route with path: \\\"\" + path + \"\\\"\"));\n      keys[key.name] = true;\n    });\n  }\n  return regex\n}\n\nfunction normalizePath (path, parent, strict) {\n  if (!strict) { path = path.replace(/\\/$/, ''); }\n  if (path[0] === '/') { return path }\n  if (parent == null) { return path }\n  return cleanPath(((parent.path) + \"/\" + path))\n}\n\n/*  */\n\n\nfunction normalizeLocation (\n  raw,\n  current,\n  append,\n  router\n) {\n  var next = typeof raw === 'string' ? { path: raw } : raw;\n  // named target\n  if (next.name || next._normalized) {\n    return next\n  }\n\n  // relative params\n  if (!next.path && next.params && current) {\n    next = assign({}, next);\n    next._normalized = true;\n    var params = assign(assign({}, current.params), next.params);\n    if (current.name) {\n      next.name = current.name;\n      next.params = params;\n    } else if (current.matched.length) {\n      var rawPath = current.matched[current.matched.length - 1].path;\n      next.path = fillParams(rawPath, params, (\"path \" + (current.path)));\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn(false, \"relative params navigation requires a current route.\");\n    }\n    return next\n  }\n\n  var parsedPath = parsePath(next.path || '');\n  var basePath = (current && current.path) || '/';\n  var path = parsedPath.path\n    ? resolvePath(parsedPath.path, basePath, append || next.append)\n    : basePath;\n\n  var query = resolveQuery(\n    parsedPath.query,\n    next.query,\n    router && router.options.parseQuery\n  );\n\n  var hash = next.hash || parsedPath.hash;\n  if (hash && hash.charAt(0) !== '#') {\n    hash = \"#\" + hash;\n  }\n\n  return {\n    _normalized: true,\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction assign (a, b) {\n  for (var key in b) {\n    a[key] = b[key];\n  }\n  return a\n}\n\n/*  */\n\n\nfunction createMatcher (\n  routes,\n  router\n) {\n  var ref = createRouteMap(routes);\n  var pathList = ref.pathList;\n  var pathMap = ref.pathMap;\n  var nameMap = ref.nameMap;\n\n  function addRoutes (routes) {\n    createRouteMap(routes, pathList, pathMap, nameMap);\n  }\n\n  function match (\n    raw,\n    currentRoute,\n    redirectedFrom\n  ) {\n    var location = normalizeLocation(raw, currentRoute, false, router);\n    var name = location.name;\n\n    if (name) {\n      var record = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        warn(record, (\"Route with name '\" + name + \"' does not exist\"));\n      }\n      if (!record) { return _createRoute(null, location) }\n      var paramNames = record.regex.keys\n        .filter(function (key) { return !key.optional; })\n        .map(function (key) { return key.name; });\n\n      if (typeof location.params !== 'object') {\n        location.params = {};\n      }\n\n      if (currentRoute && typeof currentRoute.params === 'object') {\n        for (var key in currentRoute.params) {\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\n            location.params[key] = currentRoute.params[key];\n          }\n        }\n      }\n\n      if (record) {\n        location.path = fillParams(record.path, location.params, (\"named route \\\"\" + name + \"\\\"\"));\n        return _createRoute(record, location, redirectedFrom)\n      }\n    } else if (location.path) {\n      location.params = {};\n      for (var i = 0; i < pathList.length; i++) {\n        var path = pathList[i];\n        var record$1 = pathMap[path];\n        if (matchRoute(record$1.regex, location.path, location.params)) {\n          return _createRoute(record$1, location, redirectedFrom)\n        }\n      }\n    }\n    // no match\n    return _createRoute(null, location)\n  }\n\n  function redirect (\n    record,\n    location\n  ) {\n    var originalRedirect = record.redirect;\n    var redirect = typeof originalRedirect === 'function'\n        ? originalRedirect(createRoute(record, location, null, router))\n        : originalRedirect;\n\n    if (typeof redirect === 'string') {\n      redirect = { path: redirect };\n    }\n\n    if (!redirect || typeof redirect !== 'object') {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false, (\"invalid redirect option: \" + (JSON.stringify(redirect)))\n        );\n      }\n      return _createRoute(null, location)\n    }\n\n    var re = redirect;\n    var name = re.name;\n    var path = re.path;\n    var query = location.query;\n    var hash = location.hash;\n    var params = location.params;\n    query = re.hasOwnProperty('query') ? re.query : query;\n    hash = re.hasOwnProperty('hash') ? re.hash : hash;\n    params = re.hasOwnProperty('params') ? re.params : params;\n\n    if (name) {\n      // resolved named direct\n      var targetRecord = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        assert(targetRecord, (\"redirect failed: named route \\\"\" + name + \"\\\" not found.\"));\n      }\n      return match({\n        _normalized: true,\n        name: name,\n        query: query,\n        hash: hash,\n        params: params\n      }, undefined, location)\n    } else if (path) {\n      // 1. resolve relative redirect\n      var rawPath = resolveRecordPath(path, record);\n      // 2. resolve params\n      var resolvedPath = fillParams(rawPath, params, (\"redirect route with path \\\"\" + rawPath + \"\\\"\"));\n      // 3. rematch with existing query and hash\n      return match({\n        _normalized: true,\n        path: resolvedPath,\n        query: query,\n        hash: hash\n      }, undefined, location)\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(false, (\"invalid redirect option: \" + (JSON.stringify(redirect))));\n      }\n      return _createRoute(null, location)\n    }\n  }\n\n  function alias (\n    record,\n    location,\n    matchAs\n  ) {\n    var aliasedPath = fillParams(matchAs, location.params, (\"aliased route with path \\\"\" + matchAs + \"\\\"\"));\n    var aliasedMatch = match({\n      _normalized: true,\n      path: aliasedPath\n    });\n    if (aliasedMatch) {\n      var matched = aliasedMatch.matched;\n      var aliasedRecord = matched[matched.length - 1];\n      location.params = aliasedMatch.params;\n      return _createRoute(aliasedRecord, location)\n    }\n    return _createRoute(null, location)\n  }\n\n  function _createRoute (\n    record,\n    location,\n    redirectedFrom\n  ) {\n    if (record && record.redirect) {\n      return redirect(record, redirectedFrom || location)\n    }\n    if (record && record.matchAs) {\n      return alias(record, location, record.matchAs)\n    }\n    return createRoute(record, location, redirectedFrom, router)\n  }\n\n  return {\n    match: match,\n    addRoutes: addRoutes\n  }\n}\n\nfunction matchRoute (\n  regex,\n  path,\n  params\n) {\n  var m = path.match(regex);\n\n  if (!m) {\n    return false\n  } else if (!params) {\n    return true\n  }\n\n  for (var i = 1, len = m.length; i < len; ++i) {\n    var key = regex.keys[i - 1];\n    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];\n    if (key) {\n      params[key.name] = val;\n    }\n  }\n\n  return true\n}\n\nfunction resolveRecordPath (path, record) {\n  return resolvePath(path, record.parent ? record.parent.path : '/', true)\n}\n\n/*  */\n\n\nvar positionStore = Object.create(null);\n\nfunction setupScroll () {\n  // Fix for #1585 for Firefox\n  window.history.replaceState({ key: getStateKey() }, '');\n  window.addEventListener('popstate', function (e) {\n    saveScrollPosition();\n    if (e.state && e.state.key) {\n      setStateKey(e.state.key);\n    }\n  });\n}\n\nfunction handleScroll (\n  router,\n  to,\n  from,\n  isPop\n) {\n  if (!router.app) {\n    return\n  }\n\n  var behavior = router.options.scrollBehavior;\n  if (!behavior) {\n    return\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(typeof behavior === 'function', \"scrollBehavior must be a function\");\n  }\n\n  // wait until re-render finishes before scrolling\n  router.app.$nextTick(function () {\n    var position = getScrollPosition();\n    var shouldScroll = behavior(to, from, isPop ? position : null);\n\n    if (!shouldScroll) {\n      return\n    }\n\n    if (typeof shouldScroll.then === 'function') {\n      shouldScroll.then(function (shouldScroll) {\n        scrollToPosition((shouldScroll), position);\n      }).catch(function (err) {\n        if (process.env.NODE_ENV !== 'production') {\n          assert(false, err.toString());\n        }\n      });\n    } else {\n      scrollToPosition(shouldScroll, position);\n    }\n  });\n}\n\nfunction saveScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    positionStore[key] = {\n      x: window.pageXOffset,\n      y: window.pageYOffset\n    };\n  }\n}\n\nfunction getScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    return positionStore[key]\n  }\n}\n\nfunction getElementPosition (el, offset) {\n  var docEl = document.documentElement;\n  var docRect = docEl.getBoundingClientRect();\n  var elRect = el.getBoundingClientRect();\n  return {\n    x: elRect.left - docRect.left - offset.x,\n    y: elRect.top - docRect.top - offset.y\n  }\n}\n\nfunction isValidPosition (obj) {\n  return isNumber(obj.x) || isNumber(obj.y)\n}\n\nfunction normalizePosition (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : window.pageXOffset,\n    y: isNumber(obj.y) ? obj.y : window.pageYOffset\n  }\n}\n\nfunction normalizeOffset (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : 0,\n    y: isNumber(obj.y) ? obj.y : 0\n  }\n}\n\nfunction isNumber (v) {\n  return typeof v === 'number'\n}\n\nfunction scrollToPosition (shouldScroll, position) {\n  var isObject = typeof shouldScroll === 'object';\n  if (isObject && typeof shouldScroll.selector === 'string') {\n    var el = document.querySelector(shouldScroll.selector);\n    if (el) {\n      var offset = shouldScroll.offset && typeof shouldScroll.offset === 'object' ? shouldScroll.offset : {};\n      offset = normalizeOffset(offset);\n      position = getElementPosition(el, offset);\n    } else if (isValidPosition(shouldScroll)) {\n      position = normalizePosition(shouldScroll);\n    }\n  } else if (isObject && isValidPosition(shouldScroll)) {\n    position = normalizePosition(shouldScroll);\n  }\n\n  if (position) {\n    window.scrollTo(position.x, position.y);\n  }\n}\n\n/*  */\n\nvar supportsPushState = inBrowser && (function () {\n  var ua = window.navigator.userAgent;\n\n  if (\n    (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&\n    ua.indexOf('Mobile Safari') !== -1 &&\n    ua.indexOf('Chrome') === -1 &&\n    ua.indexOf('Windows Phone') === -1\n  ) {\n    return false\n  }\n\n  return window.history && 'pushState' in window.history\n})();\n\n// use User Timing api (if present) for more accurate key precision\nvar Time = inBrowser && window.performance && window.performance.now\n  ? window.performance\n  : Date;\n\nvar _key = genKey();\n\nfunction genKey () {\n  return Time.now().toFixed(3)\n}\n\nfunction getStateKey () {\n  return _key\n}\n\nfunction setStateKey (key) {\n  _key = key;\n}\n\nfunction pushState (url, replace) {\n  saveScrollPosition();\n  // try...catch the pushState call to get around Safari\n  // DOM Exception 18 where it limits to 100 pushState calls\n  var history = window.history;\n  try {\n    if (replace) {\n      history.replaceState({ key: _key }, '', url);\n    } else {\n      _key = genKey();\n      history.pushState({ key: _key }, '', url);\n    }\n  } catch (e) {\n    window.location[replace ? 'replace' : 'assign'](url);\n  }\n}\n\nfunction replaceState (url) {\n  pushState(url, true);\n}\n\n/*  */\n\nfunction runQueue (queue, fn, cb) {\n  var step = function (index) {\n    if (index >= queue.length) {\n      cb();\n    } else {\n      if (queue[index]) {\n        fn(queue[index], function () {\n          step(index + 1);\n        });\n      } else {\n        step(index + 1);\n      }\n    }\n  };\n  step(0);\n}\n\n/*  */\n\nfunction resolveAsyncComponents (matched) {\n  return function (to, from, next) {\n    var hasAsync = false;\n    var pending = 0;\n    var error = null;\n\n    flatMapComponents(matched, function (def, _, match, key) {\n      // if it's a function and doesn't have cid attached,\n      // assume it's an async component resolve function.\n      // we are not using Vue's default async resolving mechanism because\n      // we want to halt the navigation until the incoming component has been\n      // resolved.\n      if (typeof def === 'function' && def.cid === undefined) {\n        hasAsync = true;\n        pending++;\n\n        var resolve = once(function (resolvedDef) {\n          if (isESModule(resolvedDef)) {\n            resolvedDef = resolvedDef.default;\n          }\n          // save resolved on async factory in case it's used elsewhere\n          def.resolved = typeof resolvedDef === 'function'\n            ? resolvedDef\n            : _Vue.extend(resolvedDef);\n          match.components[key] = resolvedDef;\n          pending--;\n          if (pending <= 0) {\n            next();\n          }\n        });\n\n        var reject = once(function (reason) {\n          var msg = \"Failed to resolve async component \" + key + \": \" + reason;\n          process.env.NODE_ENV !== 'production' && warn(false, msg);\n          if (!error) {\n            error = isError(reason)\n              ? reason\n              : new Error(msg);\n            next(error);\n          }\n        });\n\n        var res;\n        try {\n          res = def(resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n        if (res) {\n          if (typeof res.then === 'function') {\n            res.then(resolve, reject);\n          } else {\n            // new syntax in Vue 2.3\n            var comp = res.component;\n            if (comp && typeof comp.then === 'function') {\n              comp.then(resolve, reject);\n            }\n          }\n        }\n      }\n    });\n\n    if (!hasAsync) { next(); }\n  }\n}\n\nfunction flatMapComponents (\n  matched,\n  fn\n) {\n  return flatten(matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) { return fn(\n      m.components[key],\n      m.instances[key],\n      m, key\n    ); })\n  }))\n}\n\nfunction flatten (arr) {\n  return Array.prototype.concat.apply([], arr)\n}\n\nvar hasSymbol =\n  typeof Symbol === 'function' &&\n  typeof Symbol.toStringTag === 'symbol';\n\nfunction isESModule (obj) {\n  return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module')\n}\n\n// in Webpack 2, require.ensure now also returns a Promise\n// so the resolve/reject functions may get called an extra time\n// if the user uses an arrow function shorthand that happens to\n// return that Promise.\nfunction once (fn) {\n  var called = false;\n  return function () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    if (called) { return }\n    called = true;\n    return fn.apply(this, args)\n  }\n}\n\n/*  */\n\nvar History = function History (router, base) {\n  this.router = router;\n  this.base = normalizeBase(base);\n  // start with a route object that stands for \"nowhere\"\n  this.current = START;\n  this.pending = null;\n  this.ready = false;\n  this.readyCbs = [];\n  this.readyErrorCbs = [];\n  this.errorCbs = [];\n};\n\nHistory.prototype.listen = function listen (cb) {\n  this.cb = cb;\n};\n\nHistory.prototype.onReady = function onReady (cb, errorCb) {\n  if (this.ready) {\n    cb();\n  } else {\n    this.readyCbs.push(cb);\n    if (errorCb) {\n      this.readyErrorCbs.push(errorCb);\n    }\n  }\n};\n\nHistory.prototype.onError = function onError (errorCb) {\n  this.errorCbs.push(errorCb);\n};\n\nHistory.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {\n    var this$1 = this;\n\n  var route = this.router.match(location, this.current);\n  this.confirmTransition(route, function () {\n    this$1.updateRoute(route);\n    onComplete && onComplete(route);\n    this$1.ensureURL();\n\n    // fire ready cbs once\n    if (!this$1.ready) {\n      this$1.ready = true;\n      this$1.readyCbs.forEach(function (cb) { cb(route); });\n    }\n  }, function (err) {\n    if (onAbort) {\n      onAbort(err);\n    }\n    if (err && !this$1.ready) {\n      this$1.ready = true;\n      this$1.readyErrorCbs.forEach(function (cb) { cb(err); });\n    }\n  });\n};\n\nHistory.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {\n    var this$1 = this;\n\n  var current = this.current;\n  var abort = function (err) {\n    if (isError(err)) {\n      if (this$1.errorCbs.length) {\n        this$1.errorCbs.forEach(function (cb) { cb(err); });\n      } else {\n        warn(false, 'uncaught error during route navigation:');\n        console.error(err);\n      }\n    }\n    onAbort && onAbort(err);\n  };\n  if (\n    isSameRoute(route, current) &&\n    // in the case the route map has been dynamically appended to\n    route.matched.length === current.matched.length\n  ) {\n    this.ensureURL();\n    return abort()\n  }\n\n  var ref = resolveQueue(this.current.matched, route.matched);\n    var updated = ref.updated;\n    var deactivated = ref.deactivated;\n    var activated = ref.activated;\n\n  var queue = [].concat(\n    // in-component leave guards\n    extractLeaveGuards(deactivated),\n    // global before hooks\n    this.router.beforeHooks,\n    // in-component update hooks\n    extractUpdateHooks(updated),\n    // in-config enter guards\n    activated.map(function (m) { return m.beforeEnter; }),\n    // async components\n    resolveAsyncComponents(activated)\n  );\n\n  this.pending = route;\n  var iterator = function (hook, next) {\n    if (this$1.pending !== route) {\n      return abort()\n    }\n    try {\n      hook(route, current, function (to) {\n        if (to === false || isError(to)) {\n          // next(false) -> abort navigation, ensure current URL\n          this$1.ensureURL(true);\n          abort(to);\n        } else if (\n          typeof to === 'string' ||\n          (typeof to === 'object' && (\n            typeof to.path === 'string' ||\n            typeof to.name === 'string'\n          ))\n        ) {\n          // next('/') or next({ path: '/' }) -> redirect\n          abort();\n          if (typeof to === 'object' && to.replace) {\n            this$1.replace(to);\n          } else {\n            this$1.push(to);\n          }\n        } else {\n          // confirm transition and pass on the value\n          next(to);\n        }\n      });\n    } catch (e) {\n      abort(e);\n    }\n  };\n\n  runQueue(queue, iterator, function () {\n    var postEnterCbs = [];\n    var isValid = function () { return this$1.current === route; };\n    // wait until async components are resolved before\n    // extracting in-component enter guards\n    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);\n    var queue = enterGuards.concat(this$1.router.resolveHooks);\n    runQueue(queue, iterator, function () {\n      if (this$1.pending !== route) {\n        return abort()\n      }\n      this$1.pending = null;\n      onComplete(route);\n      if (this$1.router.app) {\n        this$1.router.app.$nextTick(function () {\n          postEnterCbs.forEach(function (cb) { cb(); });\n        });\n      }\n    });\n  });\n};\n\nHistory.prototype.updateRoute = function updateRoute (route) {\n  var prev = this.current;\n  this.current = route;\n  this.cb && this.cb(route);\n  this.router.afterHooks.forEach(function (hook) {\n    hook && hook(route, prev);\n  });\n};\n\nfunction normalizeBase (base) {\n  if (!base) {\n    if (inBrowser) {\n      // respect <base> tag\n      var baseEl = document.querySelector('base');\n      base = (baseEl && baseEl.getAttribute('href')) || '/';\n      // strip full URL origin\n      base = base.replace(/^https?:\\/\\/[^\\/]+/, '');\n    } else {\n      base = '/';\n    }\n  }\n  // make sure there's the starting slash\n  if (base.charAt(0) !== '/') {\n    base = '/' + base;\n  }\n  // remove trailing slash\n  return base.replace(/\\/$/, '')\n}\n\nfunction resolveQueue (\n  current,\n  next\n) {\n  var i;\n  var max = Math.max(current.length, next.length);\n  for (i = 0; i < max; i++) {\n    if (current[i] !== next[i]) {\n      break\n    }\n  }\n  return {\n    updated: next.slice(0, i),\n    activated: next.slice(i),\n    deactivated: current.slice(i)\n  }\n}\n\nfunction extractGuards (\n  records,\n  name,\n  bind,\n  reverse\n) {\n  var guards = flatMapComponents(records, function (def, instance, match, key) {\n    var guard = extractGuard(def, name);\n    if (guard) {\n      return Array.isArray(guard)\n        ? guard.map(function (guard) { return bind(guard, instance, match, key); })\n        : bind(guard, instance, match, key)\n    }\n  });\n  return flatten(reverse ? guards.reverse() : guards)\n}\n\nfunction extractGuard (\n  def,\n  key\n) {\n  if (typeof def !== 'function') {\n    // extend now so that global mixins are applied.\n    def = _Vue.extend(def);\n  }\n  return def.options[key]\n}\n\nfunction extractLeaveGuards (deactivated) {\n  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)\n}\n\nfunction extractUpdateHooks (updated) {\n  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)\n}\n\nfunction bindGuard (guard, instance) {\n  if (instance) {\n    return function boundRouteGuard () {\n      return guard.apply(instance, arguments)\n    }\n  }\n}\n\nfunction extractEnterGuards (\n  activated,\n  cbs,\n  isValid\n) {\n  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {\n    return bindEnterGuard(guard, match, key, cbs, isValid)\n  })\n}\n\nfunction bindEnterGuard (\n  guard,\n  match,\n  key,\n  cbs,\n  isValid\n) {\n  return function routeEnterGuard (to, from, next) {\n    return guard(to, from, function (cb) {\n      next(cb);\n      if (typeof cb === 'function') {\n        cbs.push(function () {\n          // #750\n          // if a router-view is wrapped with an out-in transition,\n          // the instance may not have been registered at this time.\n          // we will need to poll for registration until current route\n          // is no longer valid.\n          poll(cb, match.instances, key, isValid);\n        });\n      }\n    })\n  }\n}\n\nfunction poll (\n  cb, // somehow flow cannot infer this is a function\n  instances,\n  key,\n  isValid\n) {\n  if (instances[key]) {\n    cb(instances[key]);\n  } else if (isValid()) {\n    setTimeout(function () {\n      poll(cb, instances, key, isValid);\n    }, 16);\n  }\n}\n\n/*  */\n\n\nvar HTML5History = (function (History$$1) {\n  function HTML5History (router, base) {\n    var this$1 = this;\n\n    History$$1.call(this, router, base);\n\n    var expectScroll = router.options.scrollBehavior;\n\n    if (expectScroll) {\n      setupScroll();\n    }\n\n    var initLocation = getLocation(this.base);\n    window.addEventListener('popstate', function (e) {\n      var current = this$1.current;\n\n      // Avoiding first `popstate` event dispatched in some browsers but first\n      // history route not updated since async guard at the same time.\n      var location = getLocation(this$1.base);\n      if (this$1.current === START && location === initLocation) {\n        return\n      }\n\n      this$1.transitionTo(location, function (route) {\n        if (expectScroll) {\n          handleScroll(router, route, current, true);\n        }\n      });\n    });\n  }\n\n  if ( History$$1 ) HTML5History.__proto__ = History$$1;\n  HTML5History.prototype = Object.create( History$$1 && History$$1.prototype );\n  HTML5History.prototype.constructor = HTML5History;\n\n  HTML5History.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HTML5History.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      pushState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      replaceState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.ensureURL = function ensureURL (push) {\n    if (getLocation(this.base) !== this.current.fullPath) {\n      var current = cleanPath(this.base + this.current.fullPath);\n      push ? pushState(current) : replaceState(current);\n    }\n  };\n\n  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getLocation(this.base)\n  };\n\n  return HTML5History;\n}(History));\n\nfunction getLocation (base) {\n  var path = window.location.pathname;\n  if (base && path.indexOf(base) === 0) {\n    path = path.slice(base.length);\n  }\n  return (path || '/') + window.location.search + window.location.hash\n}\n\n/*  */\n\n\nvar HashHistory = (function (History$$1) {\n  function HashHistory (router, base, fallback) {\n    History$$1.call(this, router, base);\n    // check history fallback deeplinking\n    if (fallback && checkFallback(this.base)) {\n      return\n    }\n    ensureSlash();\n  }\n\n  if ( History$$1 ) HashHistory.__proto__ = History$$1;\n  HashHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  HashHistory.prototype.constructor = HashHistory;\n\n  // this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  HashHistory.prototype.setupListeners = function setupListeners () {\n    var this$1 = this;\n\n    var router = this.router;\n    var expectScroll = router.options.scrollBehavior;\n    var supportsScroll = supportsPushState && expectScroll;\n\n    if (supportsScroll) {\n      setupScroll();\n    }\n\n    window.addEventListener(supportsPushState ? 'popstate' : 'hashchange', function () {\n      var current = this$1.current;\n      if (!ensureSlash()) {\n        return\n      }\n      this$1.transitionTo(getHash(), function (route) {\n        if (supportsScroll) {\n          handleScroll(this$1.router, route, current, true);\n        }\n        if (!supportsPushState) {\n          replaceHash(route.fullPath);\n        }\n      });\n    });\n  };\n\n  HashHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      pushHash(route.fullPath);\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      replaceHash(route.fullPath);\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HashHistory.prototype.ensureURL = function ensureURL (push) {\n    var current = this.current.fullPath;\n    if (getHash() !== current) {\n      push ? pushHash(current) : replaceHash(current);\n    }\n  };\n\n  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getHash()\n  };\n\n  return HashHistory;\n}(History));\n\nfunction checkFallback (base) {\n  var location = getLocation(base);\n  if (!/^\\/#/.test(location)) {\n    window.location.replace(\n      cleanPath(base + '/#' + location)\n    );\n    return true\n  }\n}\n\nfunction ensureSlash () {\n  var path = getHash();\n  if (path.charAt(0) === '/') {\n    return true\n  }\n  replaceHash('/' + path);\n  return false\n}\n\nfunction getHash () {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var index = href.indexOf('#');\n  return index === -1 ? '' : href.slice(index + 1)\n}\n\nfunction getUrl (path) {\n  var href = window.location.href;\n  var i = href.indexOf('#');\n  var base = i >= 0 ? href.slice(0, i) : href;\n  return (base + \"#\" + path)\n}\n\nfunction pushHash (path) {\n  if (supportsPushState) {\n    pushState(getUrl(path));\n  } else {\n    window.location.hash = path;\n  }\n}\n\nfunction replaceHash (path) {\n  if (supportsPushState) {\n    replaceState(getUrl(path));\n  } else {\n    window.location.replace(getUrl(path));\n  }\n}\n\n/*  */\n\n\nvar AbstractHistory = (function (History$$1) {\n  function AbstractHistory (router, base) {\n    History$$1.call(this, router, base);\n    this.stack = [];\n    this.index = -1;\n  }\n\n  if ( History$$1 ) AbstractHistory.__proto__ = History$$1;\n  AbstractHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  AbstractHistory.prototype.constructor = AbstractHistory;\n\n  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);\n      this$1.index++;\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.go = function go (n) {\n    var this$1 = this;\n\n    var targetIndex = this.index + n;\n    if (targetIndex < 0 || targetIndex >= this.stack.length) {\n      return\n    }\n    var route = this.stack[targetIndex];\n    this.confirmTransition(route, function () {\n      this$1.index = targetIndex;\n      this$1.updateRoute(route);\n    });\n  };\n\n  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    var current = this.stack[this.stack.length - 1];\n    return current ? current.fullPath : '/'\n  };\n\n  AbstractHistory.prototype.ensureURL = function ensureURL () {\n    // noop\n  };\n\n  return AbstractHistory;\n}(History));\n\n/*  */\n\nvar VueRouter = function VueRouter (options) {\n  if ( options === void 0 ) options = {};\n\n  this.app = null;\n  this.apps = [];\n  this.options = options;\n  this.beforeHooks = [];\n  this.resolveHooks = [];\n  this.afterHooks = [];\n  this.matcher = createMatcher(options.routes || [], this);\n\n  var mode = options.mode || 'hash';\n  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;\n  if (this.fallback) {\n    mode = 'hash';\n  }\n  if (!inBrowser) {\n    mode = 'abstract';\n  }\n  this.mode = mode;\n\n  switch (mode) {\n    case 'history':\n      this.history = new HTML5History(this, options.base);\n      break\n    case 'hash':\n      this.history = new HashHistory(this, options.base, this.fallback);\n      break\n    case 'abstract':\n      this.history = new AbstractHistory(this, options.base);\n      break\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        assert(false, (\"invalid mode: \" + mode));\n      }\n  }\n};\n\nvar prototypeAccessors = { currentRoute: { configurable: true } };\n\nVueRouter.prototype.match = function match (\n  raw,\n  current,\n  redirectedFrom\n) {\n  return this.matcher.match(raw, current, redirectedFrom)\n};\n\nprototypeAccessors.currentRoute.get = function () {\n  return this.history && this.history.current\n};\n\nVueRouter.prototype.init = function init (app /* Vue component instance */) {\n    var this$1 = this;\n\n  process.env.NODE_ENV !== 'production' && assert(\n    install.installed,\n    \"not installed. Make sure to call `Vue.use(VueRouter)` \" +\n    \"before creating root instance.\"\n  );\n\n  this.apps.push(app);\n\n  // main app already initialized.\n  if (this.app) {\n    return\n  }\n\n  this.app = app;\n\n  var history = this.history;\n\n  if (history instanceof HTML5History) {\n    history.transitionTo(history.getCurrentLocation());\n  } else if (history instanceof HashHistory) {\n    var setupHashListener = function () {\n      history.setupListeners();\n    };\n    history.transitionTo(\n      history.getCurrentLocation(),\n      setupHashListener,\n      setupHashListener\n    );\n  }\n\n  history.listen(function (route) {\n    this$1.apps.forEach(function (app) {\n      app._route = route;\n    });\n  });\n};\n\nVueRouter.prototype.beforeEach = function beforeEach (fn) {\n  return registerHook(this.beforeHooks, fn)\n};\n\nVueRouter.prototype.beforeResolve = function beforeResolve (fn) {\n  return registerHook(this.resolveHooks, fn)\n};\n\nVueRouter.prototype.afterEach = function afterEach (fn) {\n  return registerHook(this.afterHooks, fn)\n};\n\nVueRouter.prototype.onReady = function onReady (cb, errorCb) {\n  this.history.onReady(cb, errorCb);\n};\n\nVueRouter.prototype.onError = function onError (errorCb) {\n  this.history.onError(errorCb);\n};\n\nVueRouter.prototype.push = function push (location, onComplete, onAbort) {\n  this.history.push(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.replace = function replace (location, onComplete, onAbort) {\n  this.history.replace(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.go = function go (n) {\n  this.history.go(n);\n};\n\nVueRouter.prototype.back = function back () {\n  this.go(-1);\n};\n\nVueRouter.prototype.forward = function forward () {\n  this.go(1);\n};\n\nVueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {\n  var route = to\n    ? to.matched\n      ? to\n      : this.resolve(to).route\n    : this.currentRoute;\n  if (!route) {\n    return []\n  }\n  return [].concat.apply([], route.matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) {\n      return m.components[key]\n    })\n  }))\n};\n\nVueRouter.prototype.resolve = function resolve (\n  to,\n  current,\n  append\n) {\n  var location = normalizeLocation(\n    to,\n    current || this.history.current,\n    append,\n    this\n  );\n  var route = this.match(location, current);\n  var fullPath = route.redirectedFrom || route.fullPath;\n  var base = this.history.base;\n  var href = createHref(base, fullPath, this.mode);\n  return {\n    location: location,\n    route: route,\n    href: href,\n    // for backwards compat\n    normalizedTo: location,\n    resolved: route\n  }\n};\n\nVueRouter.prototype.addRoutes = function addRoutes (routes) {\n  this.matcher.addRoutes(routes);\n  if (this.history.current !== START) {\n    this.history.transitionTo(this.history.getCurrentLocation());\n  }\n};\n\nObject.defineProperties( VueRouter.prototype, prototypeAccessors );\n\nfunction registerHook (list, fn) {\n  list.push(fn);\n  return function () {\n    var i = list.indexOf(fn);\n    if (i > -1) { list.splice(i, 1); }\n  }\n}\n\nfunction createHref (base, fullPath, mode) {\n  var path = mode === 'hash' ? '#' + fullPath : fullPath;\n  return base ? cleanPath(base + '/' + path) : path\n}\n\nVueRouter.install = install;\nVueRouter.version = '3.0.1';\n\nif (inBrowser && window.Vue) {\n  window.Vue.use(VueRouter);\n}\n\nexport default VueRouter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-router/dist/vue-router.esm.js\n// module id = /ocq\n// module chunks = 0","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_uid.js\n// module id = 3Eo+\n// module chunks = 0","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/core.get-iterator-method.js\n// module id = 3fs2\n// module chunks = 0","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_defined.js\n// module id = 52gC\n// module chunks = 0","require('../../modules/es6.string.iterator');\nrequire('../../modules/es6.array.from');\nmodule.exports = require('../../modules/_core').Array.from;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/fn/array/from.js\n// module id = 5zde\n// module chunks = 0","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/isSymbol.js\n// module id = 6MiT\n// module chunks = 0","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_an-object.js\n// module id = 77Pl\n// module chunks = 0","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_global.js\n// module id = 7KvD\n// module chunks = 0","module.exports = require('./_hide');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_redefine.js\n// module id = 880/\n// module chunks = 0","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iter-create.js\n// module id = 94VQ\n// module chunks = 0","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es6.object.keys.js\n// module id = Cdx3\n// module chunks = 0","/*! elasticsearch - v14.1.0 - 2018-01-31\n * http://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html\n * Copyright (c) 2018 Elasticsearch BV; Licensed Apache-2.0 */\n\n;(function () {\n/* prevent lodash from detecting external amd loaders */var define; \n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"elasticsearch\"] = factory();\n\telse\n\t\troot[\"elasticsearch\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// In order to help people who were accidentally upgraded to this ES client,\n\t// throw an error when they try to instanciate the exported function.\n\t// previous \"elasticsearch\" module -> https://github.com/ncb000gt/node-es\n\tfunction es() {\n\t  throw new Error('Looks like you are expecting the previous \"elasticsearch\" module. ' +\n\t    'It is now the \"es\" module. To create a client with this module use ' +\n\t    '`new es.Client(params)`.');\n\t}\n\n\tes.Client = __webpack_require__(1);\n\tes.ConnectionPool = __webpack_require__(33);\n\tes.Transport = __webpack_require__(2);\n\tes.errors = __webpack_require__(17);\n\n\tmodule.exports = es;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/**\n\t * A client that makes requests to Elasticsearch via a {{#crossLink \"Transport\"}}Transport{{/crossLink}}\n\t *\n\t * Initializing a client might look something like:\n\t *\n\t * ```\n\t * var client = new es.Client({\n\t *   hosts: [\n\t *     'es1.net:9200',\n\t *     {\n\t *       host: 'es2.net',\n\t *       port: 9200\n\t *     }\n\t *   ],\n\t *   sniffOnStart: true,\n\t *   log: {\n\t *     type: 'file',\n\t *     level: 'warning'\n\t *   }\n\t * });\n\t * ```\n\t *\n\t * @class Client\n\t * @constructor\n\t */\n\n\tmodule.exports = Client;\n\n\tvar Transport = __webpack_require__(2);\n\tvar clientAction = __webpack_require__(46);\n\tvar _ = __webpack_require__(4);\n\n\tfunction Client(config) {\n\t  config = config || {};\n\n\t  if (config.__reused) {\n\t    throw new Error('Do not reuse objects to configure the elasticsearch Client class: ' +\n\t      'https://github.com/elasticsearch/elasticsearch-js/issues/33');\n\t  } else {\n\t    config.__reused = true;\n\t  }\n\n\t  function EsApiClient() {\n\t    // our client will log minimally by default\n\t    if (!config.hasOwnProperty('log')) {\n\t      config.log = 'warning';\n\t    }\n\n\t    if (!config.hosts && !config.host) {\n\t      config.host = 'http://localhost:9200';\n\t    }\n\n\t    this.close = function () {\n\t      this.transport.close();\n\t    };\n\n\t    this.transport = new Transport(config);\n\n\t    _.each(EsApiClient.prototype, _.bind(function (Fn, prop) {\n\t      if (Fn.prototype instanceof clientAction.ApiNamespace) {\n\t        this[prop] = new Fn(this.transport, this);\n\t      }\n\t    }, this));\n\n\t    delete this._namespaces;\n\t  }\n\n\n\t  EsApiClient.prototype = _.funcEnum(config, 'apiVersion', Client.apis, '_default');\n\t  if (!config.sniffEndpoint && EsApiClient.prototype === Client.apis['0.90']) {\n\t    config.sniffEndpoint = '/_cluster/nodes';\n\t  }\n\n\t  var Constructor = EsApiClient;\n\n\t  if (config.plugins) {\n\t    Constructor.prototype = _.cloneDeep(Constructor.prototype);\n\n\t    _.each(config.plugins, function (setup) {\n\t      Constructor = setup(Constructor, config, {\n\t        apis: __webpack_require__(47),\n\t        connectors: __webpack_require__(37),\n\t        loggers: __webpack_require__(30),\n\t        selectors: __webpack_require__(34),\n\t        serializers: __webpack_require__(42),\n\t        Client: __webpack_require__(1),\n\t        clientAction: clientAction,\n\t        Connection: __webpack_require__(39),\n\t        ConnectionPool: __webpack_require__(33),\n\t        Errors: __webpack_require__(17),\n\t        Host: __webpack_require__(18),\n\t        Log: __webpack_require__(28),\n\t        Logger: __webpack_require__(32),\n\t        NodesToHost: __webpack_require__(45),\n\t        Transport: __webpack_require__(2),\n\t        utils: __webpack_require__(4)\n\t      }) || Constructor;\n\t    });\n\t  }\n\n\t  return new Constructor();\n\t}\n\n\tClient.apis = __webpack_require__(47);\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {/**\n\t * Class that manages making request, called by all of the API methods.\n\t * @type {[type]}\n\t */\n\tmodule.exports = Transport;\n\n\tvar _ = __webpack_require__(4);\n\tvar errors = __webpack_require__(17);\n\tvar Host = __webpack_require__(18);\n\tvar patchSniffOnConnectionFault = __webpack_require__(25);\n\tvar findCommonProtocol = __webpack_require__(26);\n\n\tfunction Transport(config) {\n\t  var self = this;\n\t  config = self._config = config || {};\n\n\t  var LogClass = (typeof config.log === 'function') ? config.log : __webpack_require__(28);\n\t  config.log = self.log = new LogClass(config);\n\n\t  // setup the connection pool\n\t  var ConnectionPool = _.funcEnum(config, 'connectionPool', Transport.connectionPools, 'main');\n\t  self.connectionPool = new ConnectionPool(config);\n\n\t  // setup the serializer\n\t  var Serializer = _.funcEnum(config, 'serializer', Transport.serializers, 'json');\n\t  self.serializer = new Serializer(config);\n\n\t  // setup the nodesToHostCallback\n\t  self.nodesToHostCallback = _.funcEnum(config, 'nodesToHostCallback', Transport.nodesToHostCallbacks, 'main');\n\n\t  // setup max retries\n\t  self.maxRetries = config.hasOwnProperty('maxRetries') ? config.maxRetries : 3;\n\n\t  // setup endpoint to use for sniffing\n\t  self.sniffEndpoint = config.hasOwnProperty('sniffEndpoint') ? config.sniffEndpoint : '/_nodes/_all/http';\n\n\t  // setup requestTimeout default\n\t  self.requestTimeout = config.hasOwnProperty('requestTimeout') ? config.requestTimeout : 30000;\n\n\t  if (config.hasOwnProperty('defer')) {\n\t    self.defer = config.defer;\n\t  }\n\n\t  // randomizeHosts option\n\t  var randomizeHosts = config.hasOwnProperty('randomizeHosts') ? !!config.randomizeHosts : true;\n\n\t  if (config.host) {\n\t    config.hosts = config.host;\n\t  }\n\n\t  if (config.hosts) {\n\t    var hostsConfig = _.createArray(config.hosts, function (val) {\n\t      if (_.isPlainObject(val) || _.isString(val) || val instanceof Host) {\n\t        return val;\n\t      }\n\t    });\n\n\t    if (!hostsConfig) {\n\t      throw new TypeError('Invalid hosts config. Expected a URL, an array of urls, a host config object, ' +\n\t        'or an array of host config objects.');\n\t    }\n\n\t    if (randomizeHosts) {\n\t      hostsConfig = _.shuffle(hostsConfig);\n\t    }\n\n\t    self.setHosts(hostsConfig);\n\t  }\n\n\t  if (config.hasOwnProperty('sniffedNodesProtocol')) {\n\t    self.sniffedNodesProtocol = config.sniffedNodesProtocol || null;\n\t  } else {\n\t    self.sniffedNodesProtocol = findCommonProtocol(self.connectionPool.getAllHosts()) || null;\n\t  }\n\n\t  if (config.hasOwnProperty('sniffedNodesFilterPath')) {\n\t    self.sniffedNodesFilterPath = config.sniffedNodesFilterPath;\n\t  } else {\n\t    self.sniffedNodesFilterPath = [\n\t      'nodes.*.http.publish_address',\n\t      'nodes.*.name',\n\t      'nodes.*.hostname',\n\t      'nodes.*.host',\n\t      'nodes.*.version',\n\t    ].join(',');\n\t  }\n\n\t  if (config.sniffOnStart) {\n\t    self.sniff();\n\t  }\n\n\t  if (config.sniffInterval) {\n\t    self._timeout(function doSniff() {\n\t      self.sniff();\n\t      self._timeout(doSniff, config.sniffInterval);\n\t    }, config.sniffInterval);\n\t  }\n\n\t  if (config.sniffOnConnectionFault) {\n\t    patchSniffOnConnectionFault(self);\n\t  }\n\t}\n\n\tTransport.connectionPools = {\n\t  main: __webpack_require__(33)\n\t};\n\n\tTransport.serializers = __webpack_require__(42);\n\n\tTransport.nodesToHostCallbacks = {\n\t  main: __webpack_require__(45)\n\t};\n\n\tTransport.prototype.defer = function () {\n\t  if (typeof Promise === 'undefined') {\n\t    throw new Error(\n\t      'No Promise implementation found. In order for elasticsearch-js to create promises ' +\n\t      'either specify the `defer` configuration or include a global Promise shim'\n\t    )\n\t  }\n\n\t  var defer = {};\n\t  defer.promise = new Promise(function (resolve, reject) {\n\t    defer.resolve = resolve;\n\t    defer.reject = reject;\n\t  });\n\t  return defer;\n\t};\n\n\t/**\n\t * Perform a request with the client's transport\n\t *\n\t * @method request\n\t * @todo async body writing\n\t * @todo abort\n\t * @todo access to custom headers, modifying of request in general\n\t * @param {object} params\n\t * @param {Number} params.requestTimeout - timeout for the entire request (inculding all retries)\n\t * @param {Number} params.maxRetries - number of times to re-run request if the\n\t *   original node chosen can not be connected to.\n\t * @param {string} [params.path=\"/\"] - URL pathname. Do not include query string.\n\t * @param {string|object} [params.query] - Query string.\n\t * @param {String} params.method - The HTTP method for the request\n\t * @param {String} params.body - The body of the HTTP request\n\t * @param {Function} cb - A function to call back with (error, responseBody, responseStatus)\n\t */\n\tTransport.prototype.request = function (params, cb) {\n\t  var self = this;\n\t  var remainingRetries = this.maxRetries;\n\t  var requestTimeout = this.requestTimeout;\n\n\t  var connection; // set in sendReqWithConnection\n\t  var aborted = false; // several connector will respond with an error when the request is aborted\n\t  var requestAborter; // an abort function, returned by connection#request()\n\t  var requestTimeoutId; // the id of the ^timeout\n\t  var ret; // the object returned to the user, might be a promise\n\t  var defer; // the defer object, will be set when we are using promises.\n\n\t  var body = params.body;\n\t  var headers = !params.headers ? {} : _.transform(params.headers, function (headers, val, name) {\n\t    headers[String(name).toLowerCase()] = val;\n\t  });\n\n\t  self.log.debug('starting request', params);\n\n\t  // determine the response based on the presense of a callback\n\t  if (typeof cb === 'function') {\n\t    // handle callbacks within a domain\n\t    if (process.domain) {\n\t      cb = process.domain.bind(cb);\n\t    }\n\t    ret = {\n\t      abort: abortRequest\n\t    };\n\t  } else {\n\t    defer = this.defer();\n\t    ret = defer.promise;\n\t    ret.abort = abortRequest;\n\t  }\n\n\t  if (body && params.method === 'GET') {\n\t    _.nextTick(respond, new TypeError('Body can not be sent with method \"GET\"'));\n\t    return ret;\n\t  }\n\n\t  // serialize the body\n\t  if (body) {\n\t    var serializer = self.serializer;\n\t    var serializeFn = serializer[params.bulkBody ? 'bulkBody' : 'serialize'];\n\n\t    body = serializeFn.call(serializer, body);\n\t    if (!headers['content-type']) {\n\t      headers['content-type'] = serializeFn.contentType;\n\t    }\n\t  }\n\n\t  if (params.hasOwnProperty('maxRetries')) {\n\t    remainingRetries = params.maxRetries;\n\t  }\n\n\t  if (params.hasOwnProperty('requestTimeout')) {\n\t    requestTimeout = params.requestTimeout;\n\t  }\n\n\t  params.req = {\n\t    method: params.method,\n\t    path: params.path || '/',\n\t    query: params.query,\n\t    body: body,\n\t    headers: headers\n\t  };\n\n\t  function sendReqWithConnection(err, _connection) {\n\t    if (aborted) {\n\t      return;\n\t    }\n\n\t    if (err) {\n\t      respond(err);\n\t    } else if (_connection) {\n\t      connection = _connection;\n\t      requestAborter = connection.request(params.req, checkRespForFailure);\n\t    } else {\n\t      self.log.warning('No living connections');\n\t      respond(new errors.NoConnections());\n\t    }\n\t  }\n\n\t  function checkRespForFailure(err, body, status, headers) {\n\t    if (aborted) {\n\t      return;\n\t    }\n\n\t    requestAborter = void 0;\n\n\t    if (err instanceof errors.RequestTypeError) {\n\t      self.log.error('Connection refused to execute the request', err);\n\t      respond(err, body, status, headers);\n\t      return;\n\t    }\n\n\t    if (err) {\n\t      connection.setStatus('dead');\n\n\t      var errMsg = err.message || '';\n\n\t      errMsg =\n\t        '\\n' +\n\t        params.req.method +\n\t        ' ' +\n\t        connection.host.makeUrl(params.req) +\n\t        (errMsg.length ? ' => ' : '') +\n\t        errMsg\n\t      ;\n\n\t      if (remainingRetries) {\n\t        remainingRetries--;\n\t        self.log.error('Request error, retrying' + errMsg);\n\t        self.connectionPool.select(sendReqWithConnection);\n\t      } else {\n\t        self.log.error('Request complete with error' + errMsg);\n\t        respond(new errors.ConnectionFault(err));\n\t      }\n\t    } else {\n\t      self.log.debug('Request complete');\n\t      respond(void 0, body, status, headers);\n\t    }\n\t  }\n\n\t  function respond(err, body, status, headers) {\n\t    if (aborted) {\n\t      return;\n\t    }\n\n\t    self._timeout(requestTimeoutId);\n\t    var parsedBody;\n\t    var isJson = !headers || (headers['content-type'] && ~headers['content-type'].indexOf('application/json'));\n\n\t    if (!err && body) {\n\t      if (isJson) {\n\t        parsedBody = self.serializer.deserialize(body);\n\t        if (parsedBody == null) {\n\t          err = new errors.Serialization();\n\t          parsedBody = body;\n\t        }\n\t      } else {\n\t        parsedBody = body;\n\t      }\n\t    }\n\n\t    // does the response represent an error?\n\t    if (\n\t      (!err || err instanceof errors.Serialization)\n\t      && (status < 200 || status >= 300)\n\t      && (!params.ignore || !_.include(params.ignore, status))\n\t    ) {\n\n\t      var errorMetadata = _.pick(params.req, ['path', 'query', 'body']);\n\t      errorMetadata.statusCode = status;\n\t      errorMetadata.response = body;\n\n\t      if (status === 401 && headers && headers['www-authenticate']) {\n\t        errorMetadata.wwwAuthenticateDirective = headers['www-authenticate'];\n\t      }\n\n\t      if (errors[status]) {\n\t        err = new errors[status](parsedBody && parsedBody.error, errorMetadata);\n\t      } else {\n\t        err = new errors.Generic('unknown error', errorMetadata);\n\t      }\n\t    }\n\n\t    // can we cast notfound to false?\n\t    if (params.castExists) {\n\t      if (err && err instanceof errors.NotFound) {\n\t        parsedBody = false;\n\t        err = void 0;\n\t      } else {\n\t        parsedBody = !err;\n\t      }\n\t    }\n\n\t    // how do we send the response?\n\t    if (typeof cb === 'function') {\n\t      if (err) {\n\t        cb(err, parsedBody, status);\n\t      } else {\n\t        cb(void 0, parsedBody, status);\n\t      }\n\t    } else if (err) {\n\t      err.body = parsedBody;\n\t      err.status = status;\n\t      defer.reject(err);\n\t    } else {\n\t      defer.resolve(parsedBody);\n\t    }\n\t  }\n\n\t  function abortRequest() {\n\t    if (aborted) {\n\t      return;\n\t    }\n\n\t    aborted = true;\n\t    remainingRetries = 0;\n\t    self._timeout(requestTimeoutId);\n\t    if (typeof requestAborter === 'function') {\n\t      requestAborter();\n\t    }\n\t  }\n\n\t  if (requestTimeout && requestTimeout !== Infinity) {\n\t    requestTimeoutId = this._timeout(function () {\n\t      respond(new errors.RequestTimeout('Request Timeout after ' + requestTimeout + 'ms'));\n\t      abortRequest();\n\t    }, requestTimeout);\n\t  }\n\n\t  if (connection) {\n\t    sendReqWithConnection(void 0, connection);\n\t  } else {\n\t    self.connectionPool.select(sendReqWithConnection);\n\t  }\n\n\t  return ret;\n\t};\n\n\tTransport.prototype._timeout = function (cb, delay) {\n\t  if (this.closed) return;\n\n\t  var id;\n\t  var timers = this._timers || (this._timers = []);\n\n\t  if ('function' !== typeof cb) {\n\t    id = cb;\n\t    cb = void 0;\n\t  }\n\n\t  if (cb) {\n\t    // set the timer\n\t    id = setTimeout(function () {\n\t      _.pull(timers, id);\n\t      cb();\n\t    }, delay);\n\n\t    timers.push(id);\n\t    return id;\n\t  }\n\n\t  if (id) {\n\t    clearTimeout(id);\n\n\t    var i = this._timers.indexOf(id);\n\t    if (i !== -1) {\n\t      this._timers.splice(i, 1);\n\t    }\n\t  }\n\t};\n\n\t/**\n\t * Ask an ES node for a list of all the nodes, add/remove nodes from the connection\n\t * pool as appropriate\n\t *\n\t * @param  {Function} cb - Function to call back once complete\n\t */\n\tTransport.prototype.sniff = function (cb) {\n\t  var self = this;\n\t  var nodesToHostCallback = this.nodesToHostCallback;\n\t  var log = this.log;\n\t  var sniffedNodesProtocol = this.sniffedNodesProtocol;\n\t  var sniffedNodesFilterPath = this.sniffedNodesFilterPath;\n\n\t  // make cb a function if it isn't\n\t  cb = typeof cb === 'function' ? cb : _.noop;\n\n\t  this.request({\n\t    path: this.sniffEndpoint,\n\t    query: { filter_path: sniffedNodesFilterPath },\n\t    method: 'GET'\n\t  }, function (err, resp, status) {\n\t    if (!err && resp && resp.nodes) {\n\t      var hostsConfigs;\n\n\t      try {\n\t        hostsConfigs = nodesToHostCallback(resp.nodes);\n\t      } catch (e) {\n\t        log.error(new Error('Unable to convert node list from ' + self.sniffEndpoint +\n\t          ' to hosts durring sniff. Encountered error:\\n' + (e.stack || e.message)));\n\t        return;\n\t      }\n\n\t      _.forEach(hostsConfigs, function (hostConfig) {\n\t        if (sniffedNodesProtocol) hostConfig.protocol = sniffedNodesProtocol;\n\t      });\n\n\t      self.setHosts(hostsConfigs);\n\t    }\n\t    cb(err, resp, status);\n\t  });\n\t};\n\n\t/**\n\t * Set the host list that the transport should use.\n\t *\n\t * @param {Array<HostConfig>} hostsConfigs - an array of Hosts, or configuration objects\n\t *                                         that will be used to create Host objects.\n\t */\n\tTransport.prototype.setHosts = function (hostsConfigs) {\n\t  var globalConfig = this._config;\n\t  this.connectionPool.setHosts(_.map(hostsConfigs, function (conf) {\n\t    return (conf instanceof Host) ? conf : new Host(conf, globalConfig);\n\t  }));\n\t};\n\n\t/**\n\t * Close the Transport, which closes the logs and connection pool\n\t * @return {[type]} [description]\n\t */\n\tTransport.prototype.close = function () {\n\t  this.log.close();\n\t  this.closed = true;\n\t  _.each(this._timers, clearTimeout);\n\t  this._timers = null;\n\t  this.connectionPool.close();\n\t};\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\n\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\n\n\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\n\tfunction noop() {}\n\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\tprocess.prependListener = noop;\n\tprocess.prependOnceListener = noop;\n\n\tprocess.listeners = function (name) { return [] }\n\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process, Buffer) {var path = __webpack_require__(9);\n\tvar nodeUtils = __webpack_require__(10);\n\tvar lodash = __webpack_require__(13);\n\n\t/**\n\t * Custom utils library, basically a modified version of [lodash](http://lodash.com/docs) +\n\t * [node.utils](http://nodejs.org/api/util.html#util_util) that doesn't use mixins to prevent\n\t * confusion when requiring lodash itself.\n\t *\n\t * @class utils\n\t * @static\n\t */\n\tvar _ = lodash.assign({}, lodash, nodeUtils);\n\n\t/**\n\t * Link to [path.join](http://nodejs.org/api/path.html#path_path_join_path1_path2)\n\t *\n\t * @method _.joinPath\n\t * @type {function}\n\t */\n\t_.joinPath = path.join;\n\n\t_.get = __webpack_require__(15);\n\t_.trimEnd = __webpack_require__(16);\n\n\t/**\n\t * Recursively merge two objects, walking into each object and concating arrays. If both to and from have a value at a\n\t * key, but the values' types don't match to's value is left unmodified. Only Array and Object values are merged - that\n\t * it to say values with a typeof \"object\"\n\t *\n\t * @param  {Object} to - Object to merge into (no cloning, the original object\n\t *   is modified)\n\t * @param  {Object} from - Object to pull changed from\n\t * @return {Object} - returns the modified to value\n\t */\n\t_.deepMerge = function (to, from) {\n\t  _.each(from, function (fromVal, key) {\n\t    switch (typeof to[key]) {\n\t      case 'undefined':\n\t        to[key] = from[key];\n\t        break;\n\t      case 'object':\n\t        if (_.isArray(to[key]) && _.isArray(from[key])) {\n\t          to[key] = to[key].concat(from[key]);\n\t        }\n\t        else if (_.isPlainObject(to[key]) && _.isPlainObject(from[key])) {\n\t          _.deepMerge(to[key], from[key]);\n\t        }\n\t    }\n\t  });\n\t  return to;\n\t};\n\n\t/**\n\t * Test if a value is an array and it's contents are of a specific type\n\t *\n\t * @method isArrayOf<Strings|Object|Array|Finite|Function|RegExp>s\n\t * @param  {Array} arr - An array to check\n\t * @return {Boolean}\n\t */\n\t_.each([\n\t  'String',\n\t  'Object',\n\t  'PlainObject',\n\t  'Array',\n\t  'Finite',\n\t  'Function',\n\t  'RegExp'\n\t], function (type) {\n\t  var check = _['is' + type];\n\n\t  _['isArrayOf' + type + 's'] = function (arr) {\n\t    // quick shallow check of arrays\n\t    return _.isArray(arr) && _.every(arr.slice(0, 10), check);\n\t  };\n\t});\n\n\n\t/**\n\t * Capitalize the first letter of a word\n\t *\n\t * @method  ucfirst\n\t * @param  {string} word - The word to transform\n\t * @return {string}\n\t */\n\t_.ucfirst = function (word) {\n\t  return word[0].toUpperCase() + word.substring(1).toLowerCase();\n\t};\n\n\t/**\n\t * Base algo for studlyCase and camelCase\n\t * @param  {boolean} firstWordCap - Should the first character of the first word be capitalized\n\t * @return {Function}\n\t */\n\tfunction adjustWordCase(firstWordCap, otherWordsCap, sep) {\n\t  return function (string) {\n\t    var i = 0;\n\t    var words = [];\n\t    var word = '';\n\t    var code, c, upper, lower;\n\n\t    for (; i < string.length; i++) {\n\t      code = string.charCodeAt(i);\n\t      c = string.charAt(i);\n\t      lower = (code >= 97 && code <= 122) || (code >= 48 && code <= 57);\n\t      upper = code >= 65 && code <= 90;\n\n\t      if (upper || !lower) {\n\t        // new word\n\t        if (word.length) {\n\t          words.push(word);\n\t        }\n\t        word = '';\n\t      }\n\n\t      if (upper || lower) {\n\t        if (lower && word.length) {\n\t          word += c;\n\t        } else {\n\t          if ((!words.length && firstWordCap) || (words.length && otherWordsCap)) {\n\t            word = c.toUpperCase();\n\t          }\n\t          else {\n\t            word = c.toLowerCase();\n\t          }\n\t        }\n\t      }\n\t    }\n\t    if (word.length) {\n\t      words.push(word);\n\t    }\n\t    // add the leading underscore back to strings the had it originally\n\t    if (words.length && string.charAt(0) === '_') {\n\t      words[0] = '_' + words[0];\n\t    }\n\t    return words.join(sep);\n\t  };\n\t}\n\n\t/**\n\t * Transform a string into StudlyCase\n\t *\n\t * @method studlyCase\n\t * @param  {String} string\n\t * @return {String}\n\t */\n\t_.studlyCase = adjustWordCase(true, true, '');\n\n\t/**\n\t * Transform a string into camelCase\n\t *\n\t * @method camelCase\n\t * @param  {String} string\n\t * @return {String}\n\t */\n\t_.camelCase = adjustWordCase(false, true, '');\n\n\t/**\n\t * Transform a string into snakeCase\n\t *\n\t * @method snakeCase\n\t * @param  {String} string\n\t * @return {String}\n\t */\n\t_.snakeCase = adjustWordCase(false, false, '_');\n\n\t/**\n\t * Lower-case a string, and return an empty string if any is not a string\n\t *\n\t * @param any {*} - Something or nothing\n\t * @returns {string}\n\t */\n\t_.toLowerString = function (any) {\n\t  if (any) {\n\t    if (typeof any !== 'string') {\n\t      any = any.toString();\n\t    }\n\t  } else {\n\t    any = '';\n\t  }\n\t  return any.toLowerCase();\n\t};\n\n\t/**\n\t * Upper-case the string, return an empty string if any is not a string\n\t *\n\t * @param any {*} - Something or nothing\n\t * @returns {string}\n\t */\n\t_.toUpperString = function (any) {\n\t  if (any) {\n\t    if (typeof any !== 'string') {\n\t      any = any.toString();\n\t    }\n\t  } else {\n\t    any = '';\n\t  }\n\t  return any.toUpperCase();\n\t};\n\n\t/**\n\t * Test if a value is \"numeric\" meaning that it can be transformed into something besides NaN\n\t *\n\t * @method isNumeric\n\t * @param  {*} val\n\t * @return {Boolean}\n\t */\n\t_.isNumeric = function (val) {\n\t  return typeof val !== 'object' && val - parseFloat(val) >= 0;\n\t};\n\n\t// regexp to test for intervals\n\tvar intervalRE = /^(\\d+(?:\\.\\d+)?)(M|w|d|h|m|s|y|ms)$/;\n\n\t/**\n\t * Test if a string represents an interval (eg. 1m, 2Y)\n\t *\n\t * @method isInterval\n\t * @param {String} val\n\t * @return {Boolean}\n\t */\n\t_.isInterval = function (val) {\n\t  return !!(val.match && val.match(intervalRE));\n\t};\n\n\t/**\n\t * Repeat a string n times\n\t *\n\t * @todo TestPerformance\n\t * @method repeat\n\t * @param {String} what - The string to repeat\n\t * @param {Number} times - Times the string should be repeated\n\t * @return {String}\n\t */\n\t_.repeat = function (what, times) {\n\t  return (new Array(times + 1)).join(what);\n\t};\n\n\t/**\n\t * Call a function, applying the arguments object to it in an optimized way, rather than always turning it into an array\n\t *\n\t * @param func {Function} - The function to execute\n\t * @param context {*} - The context the function will be executed with\n\t * @param args {Arguments} - The arguments to send to func\n\t * @param [sliceIndex=0] {Integer} - The index that args should be sliced at, before feeding args to func\n\t * @returns {*} - the return value of func\n\t */\n\t_.applyArgs = function (func, context, args, sliceIndex) {\n\t  sliceIndex = sliceIndex || 0;\n\t  switch (args.length - sliceIndex) {\n\t    case 0:\n\t      return func.call(context);\n\t    case 1:\n\t      return func.call(context, args[0 + sliceIndex]);\n\t    case 2:\n\t      return func.call(context, args[0 + sliceIndex], args[1 + sliceIndex]);\n\t    case 3:\n\t      return func.call(context, args[0 + sliceIndex], args[1 + sliceIndex], args[2 + sliceIndex]);\n\t    case 4:\n\t      return func.call(context, args[0 + sliceIndex], args[1 + sliceIndex], args[2 + sliceIndex], args[3 + sliceIndex]);\n\t    case 5:\n\t      return func.call(context, args[0 + sliceIndex], args[1 + sliceIndex],\n\t      args[2 + sliceIndex], args[3 + sliceIndex], args[4 + sliceIndex]);\n\t    default:\n\t      return func.apply(context, Array.prototype.slice.call(args, sliceIndex));\n\t  }\n\t};\n\n\t/**\n\t * Schedule a function to be called on the next tick, and supply it with these arguments\n\t * when it is called.\n\t * @return {[type]} [description]\n\t */\n\t_.nextTick = function (cb) {\n\t  // bind the function and schedule it\n\t  process.nextTick(_.bindKey(_, 'applyArgs', cb, null, arguments, 1));\n\t};\n\n\t/**\n\t * Marks a method as a handler. Currently this just makes a property on the method\n\t * flagging it to be bound to the object at object creation when \"makeBoundMethods\" is called\n\t *\n\t * ```\n\t * ClassName.prototype.methodName = _.handler(function () {\n\t *   // this will always be bound when called via classInstance.bound.methodName\n\t *   this === classInstance\n\t * });\n\t * ```\n\t *\n\t * @alias _.scheduled\n\t * @param  {Function} func - The method that is being defined\n\t * @return {Function}\n\t */\n\t_.handler = function (func) {\n\t  func._provideBound = true;\n\t  return func;\n\t};\n\t_.scheduled = _.handler;\n\n\t/**\n\t * Creates an \"bound\" property on an object, which all or a subset of methods from\n\t * the object which are bound to the original object.\n\t *\n\t * ```\n\t * var obj = {\n\t *   onEvent: function () {}\n\t * };\n\t *\n\t * _.makeBoundMethods(obj);\n\t *\n\t * obj.bound.onEvent() // is bound to obj, and can safely be used as an event handler.\n\t * ```\n\t *\n\t * @param {Object} obj - The object to bind the methods to\n\t */\n\t_.makeBoundMethods = function (obj) {\n\t  obj.bound = {};\n\t  for (var prop in obj) {\n\t    // dearest maintainer, we want to look through the prototype\n\t    if (typeof obj[prop] === 'function' && obj[prop]._provideBound === true) {\n\t      obj.bound[prop] = _.bind(obj[prop], obj);\n\t    }\n\t  }\n\t};\n\n\t_.noop = function () {};\n\n\t/**\n\t * Implements the standard \"string or constructor\" check that I was copy/pasting everywhere\n\t * @param  {String|Function} val - the value that the user passed in\n\t * @param  {Object} opts - a map of the options\n\t * @return {Function|undefined} - If a valid option was specified, then the constructor is returned\n\t */\n\t_.funcEnum = function (config, name, opts, def) {\n\t  var val = config[name];\n\t  switch (typeof val) {\n\t    case 'undefined':\n\t      return opts[def];\n\t    case 'function':\n\t      return val;\n\t    case 'string':\n\t      if (opts.hasOwnProperty(val)) {\n\t        return opts[val];\n\t      }\n\t    /* falls through */\n\t    default:\n\t      var err = 'Invalid ' + name + ' \"' + val + '\", expected a function';\n\t      switch (_.size(opts)) {\n\t        case 0:\n\t          break;\n\t        case 1:\n\t          err += ' or ' + _.keys(opts)[0];\n\t          break;\n\t        default:\n\t          err += ' or one of ' + _.keys(opts).join(', ');\n\t          break;\n\t      }\n\t      throw new TypeError(err);\n\t  }\n\t};\n\n\t/**\n\t * Accepts any object and attempts to convert it into an array. If the object passed in is not\n\t * an array it will be wrapped in one. Then the transform/map function will be called for each element\n\t * and create a new array that is returned. If the map function fails to return something, the loop is\n\t * halted and false is returned instead of an array.\n\t *\n\t * @param  {*} input - The value to convert\n\t * @param  {Function} transform - A function called for each element of the resulting array\n\t * @return {Array|false} - an array on success, or false on failure.\n\t */\n\t_.createArray = function (input, transform) {\n\t  transform = typeof transform === 'function' ? transform : _.identity;\n\t  var output = [];\n\t  var item;\n\t  var i;\n\n\t  if (!_.isArray(input)) {\n\t    input = [input];\n\t  }\n\n\t  for (i = 0; i < input.length; i++) {\n\t    item = transform(input[i]);\n\t    if (item === void 0) {\n\t      return false;\n\t    } else {\n\t      output.push(item);\n\t    }\n\t  }\n\t  return output;\n\t};\n\n\t/**\n\t * Takes a WritableStream, and returns the chunks that have not successfully written, returning them as a string.\n\t *\n\t * ONLY WORKS FOR TEXT STREAMS\n\t *\n\t * @param  {WritableStream} stream - an instance of stream.Writable\n\t * @return {string} - the remaining test to be written to the stream\n\t */\n\t_.getUnwrittenFromStream = function (stream) {\n\t  var writeBuffer = _.getStreamWriteBuffer(stream);\n\t  if (!writeBuffer) return;\n\n\t  // flush the write buffer\n\t  var out = '';\n\t  if (!writeBuffer.length) return out;\n\n\t  _.each(writeBuffer, function (writeReq) {\n\t    if (writeReq.chunk) {\n\t      // 0.9.12+ uses WriteReq objects with a chunk prop\n\t      out += '' + writeReq.chunk;\n\t    } else if (_.isArray(writeReq) && (typeof writeReq[0] === 'string' || Buffer.isBuffer(writeReq[0]))) {\n\t      // 0.9.4 - 0.9.9 buffers are arrays of arrays like [[chunk, cb], [chunk, undef], ...].\n\t      out += '' + writeReq[0];\n\t    } else {\n\t      return false;\n\t    }\n\t  });\n\t  return out;\n\t};\n\n\t_.getStreamWriteBuffer = function (stream) {\n\t  if (!stream || !stream._writableState) return;\n\n\t  var writeState = stream._writableState;\n\n\t  if (writeState.getBuffer) {\n\t    return writeState.getBuffer();\n\t  } else if (writeState.buffer) {\n\t    return writeState.buffer;\n\t  }\n\t};\n\n\t_.clearWriteStreamBuffer = function (stream) {\n\t  var buffer = _.getStreamWriteBuffer(stream);\n\t  return buffer && buffer.splice(0);\n\t};\n\n\t/**\n\t * return the current time in milliseconds since epoch\n\t */\n\t_.now = function () {\n\t  return (typeof Date.now === 'function') ? Date.now() : (new Date()).getTime();\n\t};\n\n\tmodule.exports = _;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(5).Buffer))\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/*!\n\t * The buffer module from node.js, for the browser.\n\t *\n\t * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n\t * @license  MIT\n\t */\n\t/* eslint-disable no-proto */\n\n\t'use strict'\n\n\tvar base64 = __webpack_require__(6)\n\tvar ieee754 = __webpack_require__(7)\n\tvar isArray = __webpack_require__(8)\n\n\texports.Buffer = Buffer\n\texports.SlowBuffer = SlowBuffer\n\texports.INSPECT_MAX_BYTES = 50\n\n\t/**\n\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t *   === true    Use Uint8Array implementation (fastest)\n\t *   === false   Use Object implementation (most compatible, even IE6)\n\t *\n\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t * Opera 11.6+, iOS 4.2+.\n\t *\n\t * Due to various browser bugs, sometimes the Object implementation will be used even\n\t * when the browser supports typed arrays.\n\t *\n\t * Note:\n\t *\n\t *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n\t *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\t *\n\t *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\t *\n\t *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n\t *     incorrect length in some situations.\n\n\t * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n\t * get the Object implementation, which is slower but behaves correctly.\n\t */\n\tBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n\t  ? global.TYPED_ARRAY_SUPPORT\n\t  : typedArraySupport()\n\n\t/*\n\t * Export kMaxLength after typed array support is determined.\n\t */\n\texports.kMaxLength = kMaxLength()\n\n\tfunction typedArraySupport () {\n\t  try {\n\t    var arr = new Uint8Array(1)\n\t    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n\t    return arr.foo() === 42 && // typed array instances can be augmented\n\t        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n\t        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n\t  } catch (e) {\n\t    return false\n\t  }\n\t}\n\n\tfunction kMaxLength () {\n\t  return Buffer.TYPED_ARRAY_SUPPORT\n\t    ? 0x7fffffff\n\t    : 0x3fffffff\n\t}\n\n\tfunction createBuffer (that, length) {\n\t  if (kMaxLength() < length) {\n\t    throw new RangeError('Invalid typed array length')\n\t  }\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = new Uint8Array(length)\n\t    that.__proto__ = Buffer.prototype\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    if (that === null) {\n\t      that = new Buffer(length)\n\t    }\n\t    that.length = length\n\t  }\n\n\t  return that\n\t}\n\n\t/**\n\t * The Buffer constructor returns instances of `Uint8Array` that have their\n\t * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n\t * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n\t * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n\t * returns a single octet.\n\t *\n\t * The `Uint8Array` prototype remains unmodified.\n\t */\n\n\tfunction Buffer (arg, encodingOrOffset, length) {\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n\t    return new Buffer(arg, encodingOrOffset, length)\n\t  }\n\n\t  // Common case.\n\t  if (typeof arg === 'number') {\n\t    if (typeof encodingOrOffset === 'string') {\n\t      throw new Error(\n\t        'If encoding is specified then the first argument must be a string'\n\t      )\n\t    }\n\t    return allocUnsafe(this, arg)\n\t  }\n\t  return from(this, arg, encodingOrOffset, length)\n\t}\n\n\tBuffer.poolSize = 8192 // not used by this implementation\n\n\t// TODO: Legacy, not needed anymore. Remove in next major version.\n\tBuffer._augment = function (arr) {\n\t  arr.__proto__ = Buffer.prototype\n\t  return arr\n\t}\n\n\tfunction from (that, value, encodingOrOffset, length) {\n\t  if (typeof value === 'number') {\n\t    throw new TypeError('\"value\" argument must not be a number')\n\t  }\n\n\t  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n\t    return fromArrayBuffer(that, value, encodingOrOffset, length)\n\t  }\n\n\t  if (typeof value === 'string') {\n\t    return fromString(that, value, encodingOrOffset)\n\t  }\n\n\t  return fromObject(that, value)\n\t}\n\n\t/**\n\t * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n\t * if value is a number.\n\t * Buffer.from(str[, encoding])\n\t * Buffer.from(array)\n\t * Buffer.from(buffer)\n\t * Buffer.from(arrayBuffer[, byteOffset[, length]])\n\t **/\n\tBuffer.from = function (value, encodingOrOffset, length) {\n\t  return from(null, value, encodingOrOffset, length)\n\t}\n\n\tif (Buffer.TYPED_ARRAY_SUPPORT) {\n\t  Buffer.prototype.__proto__ = Uint8Array.prototype\n\t  Buffer.__proto__ = Uint8Array\n\t  if (typeof Symbol !== 'undefined' && Symbol.species &&\n\t      Buffer[Symbol.species] === Buffer) {\n\t    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n\t    Object.defineProperty(Buffer, Symbol.species, {\n\t      value: null,\n\t      configurable: true\n\t    })\n\t  }\n\t}\n\n\tfunction assertSize (size) {\n\t  if (typeof size !== 'number') {\n\t    throw new TypeError('\"size\" argument must be a number')\n\t  } else if (size < 0) {\n\t    throw new RangeError('\"size\" argument must not be negative')\n\t  }\n\t}\n\n\tfunction alloc (that, size, fill, encoding) {\n\t  assertSize(size)\n\t  if (size <= 0) {\n\t    return createBuffer(that, size)\n\t  }\n\t  if (fill !== undefined) {\n\t    // Only pay attention to encoding if it's a string. This\n\t    // prevents accidentally sending in a number that would\n\t    // be interpretted as a start offset.\n\t    return typeof encoding === 'string'\n\t      ? createBuffer(that, size).fill(fill, encoding)\n\t      : createBuffer(that, size).fill(fill)\n\t  }\n\t  return createBuffer(that, size)\n\t}\n\n\t/**\n\t * Creates a new filled Buffer instance.\n\t * alloc(size[, fill[, encoding]])\n\t **/\n\tBuffer.alloc = function (size, fill, encoding) {\n\t  return alloc(null, size, fill, encoding)\n\t}\n\n\tfunction allocUnsafe (that, size) {\n\t  assertSize(size)\n\t  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n\t    for (var i = 0; i < size; ++i) {\n\t      that[i] = 0\n\t    }\n\t  }\n\t  return that\n\t}\n\n\t/**\n\t * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n\t * */\n\tBuffer.allocUnsafe = function (size) {\n\t  return allocUnsafe(null, size)\n\t}\n\t/**\n\t * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n\t */\n\tBuffer.allocUnsafeSlow = function (size) {\n\t  return allocUnsafe(null, size)\n\t}\n\n\tfunction fromString (that, string, encoding) {\n\t  if (typeof encoding !== 'string' || encoding === '') {\n\t    encoding = 'utf8'\n\t  }\n\n\t  if (!Buffer.isEncoding(encoding)) {\n\t    throw new TypeError('\"encoding\" must be a valid string encoding')\n\t  }\n\n\t  var length = byteLength(string, encoding) | 0\n\t  that = createBuffer(that, length)\n\n\t  var actual = that.write(string, encoding)\n\n\t  if (actual !== length) {\n\t    // Writing a hex string, for example, that contains invalid characters will\n\t    // cause everything after the first invalid character to be ignored. (e.g.\n\t    // 'abxxcd' will be treated as 'ab')\n\t    that = that.slice(0, actual)\n\t  }\n\n\t  return that\n\t}\n\n\tfunction fromArrayLike (that, array) {\n\t  var length = array.length < 0 ? 0 : checked(array.length) | 0\n\t  that = createBuffer(that, length)\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\n\tfunction fromArrayBuffer (that, array, byteOffset, length) {\n\t  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n\t  if (byteOffset < 0 || array.byteLength < byteOffset) {\n\t    throw new RangeError('\\'offset\\' is out of bounds')\n\t  }\n\n\t  if (array.byteLength < byteOffset + (length || 0)) {\n\t    throw new RangeError('\\'length\\' is out of bounds')\n\t  }\n\n\t  if (byteOffset === undefined && length === undefined) {\n\t    array = new Uint8Array(array)\n\t  } else if (length === undefined) {\n\t    array = new Uint8Array(array, byteOffset)\n\t  } else {\n\t    array = new Uint8Array(array, byteOffset, length)\n\t  }\n\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = array\n\t    that.__proto__ = Buffer.prototype\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that = fromArrayLike(that, array)\n\t  }\n\t  return that\n\t}\n\n\tfunction fromObject (that, obj) {\n\t  if (Buffer.isBuffer(obj)) {\n\t    var len = checked(obj.length) | 0\n\t    that = createBuffer(that, len)\n\n\t    if (that.length === 0) {\n\t      return that\n\t    }\n\n\t    obj.copy(that, 0, 0, len)\n\t    return that\n\t  }\n\n\t  if (obj) {\n\t    if ((typeof ArrayBuffer !== 'undefined' &&\n\t        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n\t      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n\t        return createBuffer(that, 0)\n\t      }\n\t      return fromArrayLike(that, obj)\n\t    }\n\n\t    if (obj.type === 'Buffer' && isArray(obj.data)) {\n\t      return fromArrayLike(that, obj.data)\n\t    }\n\t  }\n\n\t  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n\t}\n\n\tfunction checked (length) {\n\t  // Note: cannot use `length < kMaxLength()` here because that fails when\n\t  // length is NaN (which is otherwise coerced to zero.)\n\t  if (length >= kMaxLength()) {\n\t    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n\t                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n\t  }\n\t  return length | 0\n\t}\n\n\tfunction SlowBuffer (length) {\n\t  if (+length != length) { // eslint-disable-line eqeqeq\n\t    length = 0\n\t  }\n\t  return Buffer.alloc(+length)\n\t}\n\n\tBuffer.isBuffer = function isBuffer (b) {\n\t  return !!(b != null && b._isBuffer)\n\t}\n\n\tBuffer.compare = function compare (a, b) {\n\t  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n\t    throw new TypeError('Arguments must be Buffers')\n\t  }\n\n\t  if (a === b) return 0\n\n\t  var x = a.length\n\t  var y = b.length\n\n\t  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n\t    if (a[i] !== b[i]) {\n\t      x = a[i]\n\t      y = b[i]\n\t      break\n\t    }\n\t  }\n\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t}\n\n\tBuffer.isEncoding = function isEncoding (encoding) {\n\t  switch (String(encoding).toLowerCase()) {\n\t    case 'hex':\n\t    case 'utf8':\n\t    case 'utf-8':\n\t    case 'ascii':\n\t    case 'latin1':\n\t    case 'binary':\n\t    case 'base64':\n\t    case 'ucs2':\n\t    case 'ucs-2':\n\t    case 'utf16le':\n\t    case 'utf-16le':\n\t      return true\n\t    default:\n\t      return false\n\t  }\n\t}\n\n\tBuffer.concat = function concat (list, length) {\n\t  if (!isArray(list)) {\n\t    throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t  }\n\n\t  if (list.length === 0) {\n\t    return Buffer.alloc(0)\n\t  }\n\n\t  var i\n\t  if (length === undefined) {\n\t    length = 0\n\t    for (i = 0; i < list.length; ++i) {\n\t      length += list[i].length\n\t    }\n\t  }\n\n\t  var buffer = Buffer.allocUnsafe(length)\n\t  var pos = 0\n\t  for (i = 0; i < list.length; ++i) {\n\t    var buf = list[i]\n\t    if (!Buffer.isBuffer(buf)) {\n\t      throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t    }\n\t    buf.copy(buffer, pos)\n\t    pos += buf.length\n\t  }\n\t  return buffer\n\t}\n\n\tfunction byteLength (string, encoding) {\n\t  if (Buffer.isBuffer(string)) {\n\t    return string.length\n\t  }\n\t  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n\t      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n\t    return string.byteLength\n\t  }\n\t  if (typeof string !== 'string') {\n\t    string = '' + string\n\t  }\n\n\t  var len = string.length\n\t  if (len === 0) return 0\n\n\t  // Use a for loop to avoid recursion\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'ascii':\n\t      case 'latin1':\n\t      case 'binary':\n\t        return len\n\t      case 'utf8':\n\t      case 'utf-8':\n\t      case undefined:\n\t        return utf8ToBytes(string).length\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return len * 2\n\t      case 'hex':\n\t        return len >>> 1\n\t      case 'base64':\n\t        return base64ToBytes(string).length\n\t      default:\n\t        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\tBuffer.byteLength = byteLength\n\n\tfunction slowToString (encoding, start, end) {\n\t  var loweredCase = false\n\n\t  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n\t  // property of a typed array.\n\n\t  // This behaves neither like String nor Uint8Array in that we set start/end\n\t  // to their upper/lower bounds if the value passed is out of range.\n\t  // undefined is handled specially as per ECMA-262 6th Edition,\n\t  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\t  if (start === undefined || start < 0) {\n\t    start = 0\n\t  }\n\t  // Return early if start > this.length. Done here to prevent potential uint32\n\t  // coercion fail below.\n\t  if (start > this.length) {\n\t    return ''\n\t  }\n\n\t  if (end === undefined || end > this.length) {\n\t    end = this.length\n\t  }\n\n\t  if (end <= 0) {\n\t    return ''\n\t  }\n\n\t  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\t  end >>>= 0\n\t  start >>>= 0\n\n\t  if (end <= start) {\n\t    return ''\n\t  }\n\n\t  if (!encoding) encoding = 'utf8'\n\n\t  while (true) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexSlice(this, start, end)\n\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Slice(this, start, end)\n\n\t      case 'ascii':\n\t        return asciiSlice(this, start, end)\n\n\t      case 'latin1':\n\t      case 'binary':\n\t        return latin1Slice(this, start, end)\n\n\t      case 'base64':\n\t        return base64Slice(this, start, end)\n\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return utf16leSlice(this, start, end)\n\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = (encoding + '').toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\n\t// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n\t// Buffer instances.\n\tBuffer.prototype._isBuffer = true\n\n\tfunction swap (b, n, m) {\n\t  var i = b[n]\n\t  b[n] = b[m]\n\t  b[m] = i\n\t}\n\n\tBuffer.prototype.swap16 = function swap16 () {\n\t  var len = this.length\n\t  if (len % 2 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 16-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 2) {\n\t    swap(this, i, i + 1)\n\t  }\n\t  return this\n\t}\n\n\tBuffer.prototype.swap32 = function swap32 () {\n\t  var len = this.length\n\t  if (len % 4 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 32-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 4) {\n\t    swap(this, i, i + 3)\n\t    swap(this, i + 1, i + 2)\n\t  }\n\t  return this\n\t}\n\n\tBuffer.prototype.swap64 = function swap64 () {\n\t  var len = this.length\n\t  if (len % 8 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 64-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 8) {\n\t    swap(this, i, i + 7)\n\t    swap(this, i + 1, i + 6)\n\t    swap(this, i + 2, i + 5)\n\t    swap(this, i + 3, i + 4)\n\t  }\n\t  return this\n\t}\n\n\tBuffer.prototype.toString = function toString () {\n\t  var length = this.length | 0\n\t  if (length === 0) return ''\n\t  if (arguments.length === 0) return utf8Slice(this, 0, length)\n\t  return slowToString.apply(this, arguments)\n\t}\n\n\tBuffer.prototype.equals = function equals (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return true\n\t  return Buffer.compare(this, b) === 0\n\t}\n\n\tBuffer.prototype.inspect = function inspect () {\n\t  var str = ''\n\t  var max = exports.INSPECT_MAX_BYTES\n\t  if (this.length > 0) {\n\t    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n\t    if (this.length > max) str += ' ... '\n\t  }\n\t  return '<Buffer ' + str + '>'\n\t}\n\n\tBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n\t  if (!Buffer.isBuffer(target)) {\n\t    throw new TypeError('Argument must be a Buffer')\n\t  }\n\n\t  if (start === undefined) {\n\t    start = 0\n\t  }\n\t  if (end === undefined) {\n\t    end = target ? target.length : 0\n\t  }\n\t  if (thisStart === undefined) {\n\t    thisStart = 0\n\t  }\n\t  if (thisEnd === undefined) {\n\t    thisEnd = this.length\n\t  }\n\n\t  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n\t    throw new RangeError('out of range index')\n\t  }\n\n\t  if (thisStart >= thisEnd && start >= end) {\n\t    return 0\n\t  }\n\t  if (thisStart >= thisEnd) {\n\t    return -1\n\t  }\n\t  if (start >= end) {\n\t    return 1\n\t  }\n\n\t  start >>>= 0\n\t  end >>>= 0\n\t  thisStart >>>= 0\n\t  thisEnd >>>= 0\n\n\t  if (this === target) return 0\n\n\t  var x = thisEnd - thisStart\n\t  var y = end - start\n\t  var len = Math.min(x, y)\n\n\t  var thisCopy = this.slice(thisStart, thisEnd)\n\t  var targetCopy = target.slice(start, end)\n\n\t  for (var i = 0; i < len; ++i) {\n\t    if (thisCopy[i] !== targetCopy[i]) {\n\t      x = thisCopy[i]\n\t      y = targetCopy[i]\n\t      break\n\t    }\n\t  }\n\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t}\n\n\t// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n\t// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n\t//\n\t// Arguments:\n\t// - buffer - a Buffer to search\n\t// - val - a string, Buffer, or number\n\t// - byteOffset - an index into `buffer`; will be clamped to an int32\n\t// - encoding - an optional encoding, relevant is val is a string\n\t// - dir - true for indexOf, false for lastIndexOf\n\tfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n\t  // Empty buffer means no match\n\t  if (buffer.length === 0) return -1\n\n\t  // Normalize byteOffset\n\t  if (typeof byteOffset === 'string') {\n\t    encoding = byteOffset\n\t    byteOffset = 0\n\t  } else if (byteOffset > 0x7fffffff) {\n\t    byteOffset = 0x7fffffff\n\t  } else if (byteOffset < -0x80000000) {\n\t    byteOffset = -0x80000000\n\t  }\n\t  byteOffset = +byteOffset  // Coerce to Number.\n\t  if (isNaN(byteOffset)) {\n\t    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n\t    byteOffset = dir ? 0 : (buffer.length - 1)\n\t  }\n\n\t  // Normalize byteOffset: negative offsets start from the end of the buffer\n\t  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n\t  if (byteOffset >= buffer.length) {\n\t    if (dir) return -1\n\t    else byteOffset = buffer.length - 1\n\t  } else if (byteOffset < 0) {\n\t    if (dir) byteOffset = 0\n\t    else return -1\n\t  }\n\n\t  // Normalize val\n\t  if (typeof val === 'string') {\n\t    val = Buffer.from(val, encoding)\n\t  }\n\n\t  // Finally, search either indexOf (if dir is true) or lastIndexOf\n\t  if (Buffer.isBuffer(val)) {\n\t    // Special case: looking for empty string/buffer always fails\n\t    if (val.length === 0) {\n\t      return -1\n\t    }\n\t    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n\t  } else if (typeof val === 'number') {\n\t    val = val & 0xFF // Search for a byte value [0-255]\n\t    if (Buffer.TYPED_ARRAY_SUPPORT &&\n\t        typeof Uint8Array.prototype.indexOf === 'function') {\n\t      if (dir) {\n\t        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n\t      } else {\n\t        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n\t      }\n\t    }\n\t    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n\t  }\n\n\t  throw new TypeError('val must be string, number or Buffer')\n\t}\n\n\tfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n\t  var indexSize = 1\n\t  var arrLength = arr.length\n\t  var valLength = val.length\n\n\t  if (encoding !== undefined) {\n\t    encoding = String(encoding).toLowerCase()\n\t    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n\t        encoding === 'utf16le' || encoding === 'utf-16le') {\n\t      if (arr.length < 2 || val.length < 2) {\n\t        return -1\n\t      }\n\t      indexSize = 2\n\t      arrLength /= 2\n\t      valLength /= 2\n\t      byteOffset /= 2\n\t    }\n\t  }\n\n\t  function read (buf, i) {\n\t    if (indexSize === 1) {\n\t      return buf[i]\n\t    } else {\n\t      return buf.readUInt16BE(i * indexSize)\n\t    }\n\t  }\n\n\t  var i\n\t  if (dir) {\n\t    var foundIndex = -1\n\t    for (i = byteOffset; i < arrLength; i++) {\n\t      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n\t        if (foundIndex === -1) foundIndex = i\n\t        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n\t      } else {\n\t        if (foundIndex !== -1) i -= i - foundIndex\n\t        foundIndex = -1\n\t      }\n\t    }\n\t  } else {\n\t    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n\t    for (i = byteOffset; i >= 0; i--) {\n\t      var found = true\n\t      for (var j = 0; j < valLength; j++) {\n\t        if (read(arr, i + j) !== read(val, j)) {\n\t          found = false\n\t          break\n\t        }\n\t      }\n\t      if (found) return i\n\t    }\n\t  }\n\n\t  return -1\n\t}\n\n\tBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n\t  return this.indexOf(val, byteOffset, encoding) !== -1\n\t}\n\n\tBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n\t}\n\n\tBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n\t}\n\n\tfunction hexWrite (buf, string, offset, length) {\n\t  offset = Number(offset) || 0\n\t  var remaining = buf.length - offset\n\t  if (!length) {\n\t    length = remaining\n\t  } else {\n\t    length = Number(length)\n\t    if (length > remaining) {\n\t      length = remaining\n\t    }\n\t  }\n\n\t  // must be an even number of digits\n\t  var strLen = string.length\n\t  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n\t  if (length > strLen / 2) {\n\t    length = strLen / 2\n\t  }\n\t  for (var i = 0; i < length; ++i) {\n\t    var parsed = parseInt(string.substr(i * 2, 2), 16)\n\t    if (isNaN(parsed)) return i\n\t    buf[offset + i] = parsed\n\t  }\n\t  return i\n\t}\n\n\tfunction utf8Write (buf, string, offset, length) {\n\t  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\n\tfunction asciiWrite (buf, string, offset, length) {\n\t  return blitBuffer(asciiToBytes(string), buf, offset, length)\n\t}\n\n\tfunction latin1Write (buf, string, offset, length) {\n\t  return asciiWrite(buf, string, offset, length)\n\t}\n\n\tfunction base64Write (buf, string, offset, length) {\n\t  return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t}\n\n\tfunction ucs2Write (buf, string, offset, length) {\n\t  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\n\tBuffer.prototype.write = function write (string, offset, length, encoding) {\n\t  // Buffer#write(string)\n\t  if (offset === undefined) {\n\t    encoding = 'utf8'\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, encoding)\n\t  } else if (length === undefined && typeof offset === 'string') {\n\t    encoding = offset\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, offset[, length][, encoding])\n\t  } else if (isFinite(offset)) {\n\t    offset = offset | 0\n\t    if (isFinite(length)) {\n\t      length = length | 0\n\t      if (encoding === undefined) encoding = 'utf8'\n\t    } else {\n\t      encoding = length\n\t      length = undefined\n\t    }\n\t  // legacy write(string, encoding, offset, length) - remove in v0.13\n\t  } else {\n\t    throw new Error(\n\t      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n\t    )\n\t  }\n\n\t  var remaining = this.length - offset\n\t  if (length === undefined || length > remaining) length = remaining\n\n\t  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n\t    throw new RangeError('Attempt to write outside buffer bounds')\n\t  }\n\n\t  if (!encoding) encoding = 'utf8'\n\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexWrite(this, string, offset, length)\n\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Write(this, string, offset, length)\n\n\t      case 'ascii':\n\t        return asciiWrite(this, string, offset, length)\n\n\t      case 'latin1':\n\t      case 'binary':\n\t        return latin1Write(this, string, offset, length)\n\n\t      case 'base64':\n\t        // Warning: maxLength not taken into account in base64Write\n\t        return base64Write(this, string, offset, length)\n\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return ucs2Write(this, string, offset, length)\n\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\n\tBuffer.prototype.toJSON = function toJSON () {\n\t  return {\n\t    type: 'Buffer',\n\t    data: Array.prototype.slice.call(this._arr || this, 0)\n\t  }\n\t}\n\n\tfunction base64Slice (buf, start, end) {\n\t  if (start === 0 && end === buf.length) {\n\t    return base64.fromByteArray(buf)\n\t  } else {\n\t    return base64.fromByteArray(buf.slice(start, end))\n\t  }\n\t}\n\n\tfunction utf8Slice (buf, start, end) {\n\t  end = Math.min(buf.length, end)\n\t  var res = []\n\n\t  var i = start\n\t  while (i < end) {\n\t    var firstByte = buf[i]\n\t    var codePoint = null\n\t    var bytesPerSequence = (firstByte > 0xEF) ? 4\n\t      : (firstByte > 0xDF) ? 3\n\t      : (firstByte > 0xBF) ? 2\n\t      : 1\n\n\t    if (i + bytesPerSequence <= end) {\n\t      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n\t      switch (bytesPerSequence) {\n\t        case 1:\n\t          if (firstByte < 0x80) {\n\t            codePoint = firstByte\n\t          }\n\t          break\n\t        case 2:\n\t          secondByte = buf[i + 1]\n\t          if ((secondByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n\t            if (tempCodePoint > 0x7F) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 3:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n\t            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 4:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          fourthByte = buf[i + 3]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n\t            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t      }\n\t    }\n\n\t    if (codePoint === null) {\n\t      // we did not generate a valid codePoint so insert a\n\t      // replacement char (U+FFFD) and advance only 1 byte\n\t      codePoint = 0xFFFD\n\t      bytesPerSequence = 1\n\t    } else if (codePoint > 0xFFFF) {\n\t      // encode to utf16 (surrogate pair dance)\n\t      codePoint -= 0x10000\n\t      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n\t      codePoint = 0xDC00 | codePoint & 0x3FF\n\t    }\n\n\t    res.push(codePoint)\n\t    i += bytesPerSequence\n\t  }\n\n\t  return decodeCodePointsArray(res)\n\t}\n\n\t// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n\t// the lowest limit is Chrome, with 0x10000 args.\n\t// We go 1 magnitude less, for safety\n\tvar MAX_ARGUMENTS_LENGTH = 0x1000\n\n\tfunction decodeCodePointsArray (codePoints) {\n\t  var len = codePoints.length\n\t  if (len <= MAX_ARGUMENTS_LENGTH) {\n\t    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n\t  }\n\n\t  // Decode in chunks to avoid \"call stack size exceeded\".\n\t  var res = ''\n\t  var i = 0\n\t  while (i < len) {\n\t    res += String.fromCharCode.apply(\n\t      String,\n\t      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n\t    )\n\t  }\n\t  return res\n\t}\n\n\tfunction asciiSlice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\n\t  for (var i = start; i < end; ++i) {\n\t    ret += String.fromCharCode(buf[i] & 0x7F)\n\t  }\n\t  return ret\n\t}\n\n\tfunction latin1Slice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\n\t  for (var i = start; i < end; ++i) {\n\t    ret += String.fromCharCode(buf[i])\n\t  }\n\t  return ret\n\t}\n\n\tfunction hexSlice (buf, start, end) {\n\t  var len = buf.length\n\n\t  if (!start || start < 0) start = 0\n\t  if (!end || end < 0 || end > len) end = len\n\n\t  var out = ''\n\t  for (var i = start; i < end; ++i) {\n\t    out += toHex(buf[i])\n\t  }\n\t  return out\n\t}\n\n\tfunction utf16leSlice (buf, start, end) {\n\t  var bytes = buf.slice(start, end)\n\t  var res = ''\n\t  for (var i = 0; i < bytes.length; i += 2) {\n\t    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n\t  }\n\t  return res\n\t}\n\n\tBuffer.prototype.slice = function slice (start, end) {\n\t  var len = this.length\n\t  start = ~~start\n\t  end = end === undefined ? len : ~~end\n\n\t  if (start < 0) {\n\t    start += len\n\t    if (start < 0) start = 0\n\t  } else if (start > len) {\n\t    start = len\n\t  }\n\n\t  if (end < 0) {\n\t    end += len\n\t    if (end < 0) end = 0\n\t  } else if (end > len) {\n\t    end = len\n\t  }\n\n\t  if (end < start) end = start\n\n\t  var newBuf\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    newBuf = this.subarray(start, end)\n\t    newBuf.__proto__ = Buffer.prototype\n\t  } else {\n\t    var sliceLen = end - start\n\t    newBuf = new Buffer(sliceLen, undefined)\n\t    for (var i = 0; i < sliceLen; ++i) {\n\t      newBuf[i] = this[i + start]\n\t    }\n\t  }\n\n\t  return newBuf\n\t}\n\n\t/*\n\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t */\n\tfunction checkOffset (offset, ext, length) {\n\t  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n\t  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n\t}\n\n\tBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\n\t  return val\n\t}\n\n\tBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    checkOffset(offset, byteLength, this.length)\n\t  }\n\n\t  var val = this[offset + --byteLength]\n\t  var mul = 1\n\t  while (byteLength > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --byteLength] * mul\n\t  }\n\n\t  return val\n\t}\n\n\tBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  return this[offset]\n\t}\n\n\tBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return this[offset] | (this[offset + 1] << 8)\n\t}\n\n\tBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return (this[offset] << 8) | this[offset + 1]\n\t}\n\n\tBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t  return ((this[offset]) |\n\t      (this[offset + 1] << 8) |\n\t      (this[offset + 2] << 16)) +\n\t      (this[offset + 3] * 0x1000000)\n\t}\n\n\tBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t  return (this[offset] * 0x1000000) +\n\t    ((this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    this[offset + 3])\n\t}\n\n\tBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t  mul *= 0x80\n\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n\t  return val\n\t}\n\n\tBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n\t  var i = byteLength\n\t  var mul = 1\n\t  var val = this[offset + --i]\n\t  while (i > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --i] * mul\n\t  }\n\t  mul *= 0x80\n\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n\t  return val\n\t}\n\n\tBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  if (!(this[offset] & 0x80)) return (this[offset])\n\t  return ((0xff - this[offset] + 1) * -1)\n\t}\n\n\tBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset] | (this[offset + 1] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\n\tBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset + 1] | (this[offset] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\n\tBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t  return (this[offset]) |\n\t    (this[offset + 1] << 8) |\n\t    (this[offset + 2] << 16) |\n\t    (this[offset + 3] << 24)\n\t}\n\n\tBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t  return (this[offset] << 24) |\n\t    (this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    (this[offset + 3])\n\t}\n\n\tBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, true, 23, 4)\n\t}\n\n\tBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, false, 23, 4)\n\t}\n\n\tBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, true, 52, 8)\n\t}\n\n\tBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, false, 52, 8)\n\t}\n\n\tfunction checkInt (buf, value, offset, ext, max, min) {\n\t  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n\t  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t}\n\n\tBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n\t    checkInt(this, value, offset, byteLength, maxBytes, 0)\n\t  }\n\n\t  var mul = 1\n\t  var i = 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\n\t  return offset + byteLength\n\t}\n\n\tBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n\t    checkInt(this, value, offset, byteLength, maxBytes, 0)\n\t  }\n\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\n\t  return offset + byteLength\n\t}\n\n\tBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\n\tfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n\t    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n\t      (littleEndian ? i : 1 - i) * 8\n\t  }\n\t}\n\n\tBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\n\tBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\n\tfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n\t    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n\t  }\n\t}\n\n\tBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset + 3] = (value >>> 24)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\n\tBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\n\tBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\n\t  var i = 0\n\t  var mul = 1\n\t  var sub = 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n\t      sub = 1\n\t    }\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\n\t  return offset + byteLength\n\t}\n\n\tBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  var sub = 0\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n\t      sub = 1\n\t    }\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\n\t  return offset + byteLength\n\t}\n\n\tBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  if (value < 0) value = 0xff + value + 1\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\n\tBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\n\tBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\n\tBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 3] = (value >>> 24)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\n\tBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\n\tfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t  if (offset < 0) throw new RangeError('Index out of range')\n\t}\n\n\tfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n\t  return offset + 4\n\t}\n\n\tBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, true, noAssert)\n\t}\n\n\tBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, false, noAssert)\n\t}\n\n\tfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n\t  return offset + 8\n\t}\n\n\tBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, true, noAssert)\n\t}\n\n\tBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, false, noAssert)\n\t}\n\n\t// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\tBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n\t  if (!start) start = 0\n\t  if (!end && end !== 0) end = this.length\n\t  if (targetStart >= target.length) targetStart = target.length\n\t  if (!targetStart) targetStart = 0\n\t  if (end > 0 && end < start) end = start\n\n\t  // Copy 0 bytes; we're done\n\t  if (end === start) return 0\n\t  if (target.length === 0 || this.length === 0) return 0\n\n\t  // Fatal error conditions\n\t  if (targetStart < 0) {\n\t    throw new RangeError('targetStart out of bounds')\n\t  }\n\t  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n\t  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n\t  // Are we oob?\n\t  if (end > this.length) end = this.length\n\t  if (target.length - targetStart < end - start) {\n\t    end = target.length - targetStart + start\n\t  }\n\n\t  var len = end - start\n\t  var i\n\n\t  if (this === target && start < targetStart && targetStart < end) {\n\t    // descending copy from end\n\t    for (i = len - 1; i >= 0; --i) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // ascending copy from start\n\t    for (i = 0; i < len; ++i) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else {\n\t    Uint8Array.prototype.set.call(\n\t      target,\n\t      this.subarray(start, start + len),\n\t      targetStart\n\t    )\n\t  }\n\n\t  return len\n\t}\n\n\t// Usage:\n\t//    buffer.fill(number[, offset[, end]])\n\t//    buffer.fill(buffer[, offset[, end]])\n\t//    buffer.fill(string[, offset[, end]][, encoding])\n\tBuffer.prototype.fill = function fill (val, start, end, encoding) {\n\t  // Handle string cases:\n\t  if (typeof val === 'string') {\n\t    if (typeof start === 'string') {\n\t      encoding = start\n\t      start = 0\n\t      end = this.length\n\t    } else if (typeof end === 'string') {\n\t      encoding = end\n\t      end = this.length\n\t    }\n\t    if (val.length === 1) {\n\t      var code = val.charCodeAt(0)\n\t      if (code < 256) {\n\t        val = code\n\t      }\n\t    }\n\t    if (encoding !== undefined && typeof encoding !== 'string') {\n\t      throw new TypeError('encoding must be a string')\n\t    }\n\t    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n\t      throw new TypeError('Unknown encoding: ' + encoding)\n\t    }\n\t  } else if (typeof val === 'number') {\n\t    val = val & 255\n\t  }\n\n\t  // Invalid ranges are not set to a default, so can range check early.\n\t  if (start < 0 || this.length < start || this.length < end) {\n\t    throw new RangeError('Out of range index')\n\t  }\n\n\t  if (end <= start) {\n\t    return this\n\t  }\n\n\t  start = start >>> 0\n\t  end = end === undefined ? this.length : end >>> 0\n\n\t  if (!val) val = 0\n\n\t  var i\n\t  if (typeof val === 'number') {\n\t    for (i = start; i < end; ++i) {\n\t      this[i] = val\n\t    }\n\t  } else {\n\t    var bytes = Buffer.isBuffer(val)\n\t      ? val\n\t      : utf8ToBytes(new Buffer(val, encoding).toString())\n\t    var len = bytes.length\n\t    for (i = 0; i < end - start; ++i) {\n\t      this[i + start] = bytes[i % len]\n\t    }\n\t  }\n\n\t  return this\n\t}\n\n\t// HELPER FUNCTIONS\n\t// ================\n\n\tvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\n\tfunction base64clean (str) {\n\t  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\t  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n\t  // Node converts strings with length < 2 to ''\n\t  if (str.length < 2) return ''\n\t  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\t  while (str.length % 4 !== 0) {\n\t    str = str + '='\n\t  }\n\t  return str\n\t}\n\n\tfunction stringtrim (str) {\n\t  if (str.trim) return str.trim()\n\t  return str.replace(/^\\s+|\\s+$/g, '')\n\t}\n\n\tfunction toHex (n) {\n\t  if (n < 16) return '0' + n.toString(16)\n\t  return n.toString(16)\n\t}\n\n\tfunction utf8ToBytes (string, units) {\n\t  units = units || Infinity\n\t  var codePoint\n\t  var length = string.length\n\t  var leadSurrogate = null\n\t  var bytes = []\n\n\t  for (var i = 0; i < length; ++i) {\n\t    codePoint = string.charCodeAt(i)\n\n\t    // is surrogate component\n\t    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t      // last char was a lead\n\t      if (!leadSurrogate) {\n\t        // no lead yet\n\t        if (codePoint > 0xDBFF) {\n\t          // unexpected trail\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        } else if (i + 1 === length) {\n\t          // unpaired lead\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        }\n\n\t        // valid lead\n\t        leadSurrogate = codePoint\n\n\t        continue\n\t      }\n\n\t      // 2 leads in a row\n\t      if (codePoint < 0xDC00) {\n\t        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t        leadSurrogate = codePoint\n\t        continue\n\t      }\n\n\t      // valid surrogate pair\n\t      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n\t    } else if (leadSurrogate) {\n\t      // valid bmp char, but last char was a lead\n\t      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t    }\n\n\t    leadSurrogate = null\n\n\t    // encode utf8\n\t    if (codePoint < 0x80) {\n\t      if ((units -= 1) < 0) break\n\t      bytes.push(codePoint)\n\t    } else if (codePoint < 0x800) {\n\t      if ((units -= 2) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x6 | 0xC0,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x10000) {\n\t      if ((units -= 3) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0xC | 0xE0,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x110000) {\n\t      if ((units -= 4) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x12 | 0xF0,\n\t        codePoint >> 0xC & 0x3F | 0x80,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else {\n\t      throw new Error('Invalid code point')\n\t    }\n\t  }\n\n\t  return bytes\n\t}\n\n\tfunction asciiToBytes (str) {\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; ++i) {\n\t    // Node's code seems to be doing this and not & 0x7F..\n\t    byteArray.push(str.charCodeAt(i) & 0xFF)\n\t  }\n\t  return byteArray\n\t}\n\n\tfunction utf16leToBytes (str, units) {\n\t  var c, hi, lo\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; ++i) {\n\t    if ((units -= 2) < 0) break\n\n\t    c = str.charCodeAt(i)\n\t    hi = c >> 8\n\t    lo = c % 256\n\t    byteArray.push(lo)\n\t    byteArray.push(hi)\n\t  }\n\n\t  return byteArray\n\t}\n\n\tfunction base64ToBytes (str) {\n\t  return base64.toByteArray(base64clean(str))\n\t}\n\n\tfunction blitBuffer (src, dst, offset, length) {\n\t  for (var i = 0; i < length; ++i) {\n\t    if ((i + offset >= dst.length) || (i >= src.length)) break\n\t    dst[i + offset] = src[i]\n\t  }\n\t  return i\n\t}\n\n\tfunction isnan (val) {\n\t  return val !== val // eslint-disable-line no-self-compare\n\t}\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\t'use strict'\n\n\texports.byteLength = byteLength\n\texports.toByteArray = toByteArray\n\texports.fromByteArray = fromByteArray\n\n\tvar lookup = []\n\tvar revLookup = []\n\tvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\n\tvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\tfor (var i = 0, len = code.length; i < len; ++i) {\n\t  lookup[i] = code[i]\n\t  revLookup[code.charCodeAt(i)] = i\n\t}\n\n\trevLookup['-'.charCodeAt(0)] = 62\n\trevLookup['_'.charCodeAt(0)] = 63\n\n\tfunction placeHoldersCount (b64) {\n\t  var len = b64.length\n\t  if (len % 4 > 0) {\n\t    throw new Error('Invalid string. Length must be a multiple of 4')\n\t  }\n\n\t  // the number of equal signs (place holders)\n\t  // if there are two placeholders, than the two characters before it\n\t  // represent one byte\n\t  // if there is only one, then the three characters before it represent 2 bytes\n\t  // this is just a cheap hack to not do indexOf twice\n\t  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\t}\n\n\tfunction byteLength (b64) {\n\t  // base64 is 4/3 + up to two characters of the original data\n\t  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n\t}\n\n\tfunction toByteArray (b64) {\n\t  var i, l, tmp, placeHolders, arr\n\t  var len = b64.length\n\t  placeHolders = placeHoldersCount(b64)\n\n\t  arr = new Arr((len * 3 / 4) - placeHolders)\n\n\t  // if there are placeholders, only get up to the last complete 4 chars\n\t  l = placeHolders > 0 ? len - 4 : len\n\n\t  var L = 0\n\n\t  for (i = 0; i < l; i += 4) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n\t    arr[L++] = (tmp >> 16) & 0xFF\n\t    arr[L++] = (tmp >> 8) & 0xFF\n\t    arr[L++] = tmp & 0xFF\n\t  }\n\n\t  if (placeHolders === 2) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n\t    arr[L++] = tmp & 0xFF\n\t  } else if (placeHolders === 1) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n\t    arr[L++] = (tmp >> 8) & 0xFF\n\t    arr[L++] = tmp & 0xFF\n\t  }\n\n\t  return arr\n\t}\n\n\tfunction tripletToBase64 (num) {\n\t  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n\t}\n\n\tfunction encodeChunk (uint8, start, end) {\n\t  var tmp\n\t  var output = []\n\t  for (var i = start; i < end; i += 3) {\n\t    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t    output.push(tripletToBase64(tmp))\n\t  }\n\t  return output.join('')\n\t}\n\n\tfunction fromByteArray (uint8) {\n\t  var tmp\n\t  var len = uint8.length\n\t  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n\t  var output = ''\n\t  var parts = []\n\t  var maxChunkLength = 16383 // must be multiple of 3\n\n\t  // go through the array every three bytes, we'll deal with trailing stuff later\n\t  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n\t    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n\t  }\n\n\t  // pad the end with zeros, but make sure to not forget the extra bytes\n\t  if (extraBytes === 1) {\n\t    tmp = uint8[len - 1]\n\t    output += lookup[tmp >> 2]\n\t    output += lookup[(tmp << 4) & 0x3F]\n\t    output += '=='\n\t  } else if (extraBytes === 2) {\n\t    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n\t    output += lookup[tmp >> 10]\n\t    output += lookup[(tmp >> 4) & 0x3F]\n\t    output += lookup[(tmp << 2) & 0x3F]\n\t    output += '='\n\t  }\n\n\t  parts.push(output)\n\n\t  return parts.join('')\n\t}\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\texports.read = function (buffer, offset, isLE, mLen, nBytes) {\n\t  var e, m\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var nBits = -7\n\t  var i = isLE ? (nBytes - 1) : 0\n\t  var d = isLE ? -1 : 1\n\t  var s = buffer[offset + i]\n\n\t  i += d\n\n\t  e = s & ((1 << (-nBits)) - 1)\n\t  s >>= (-nBits)\n\t  nBits += eLen\n\t  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n\t  m = e & ((1 << (-nBits)) - 1)\n\t  e >>= (-nBits)\n\t  nBits += mLen\n\t  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n\t  if (e === 0) {\n\t    e = 1 - eBias\n\t  } else if (e === eMax) {\n\t    return m ? NaN : ((s ? -1 : 1) * Infinity)\n\t  } else {\n\t    m = m + Math.pow(2, mLen)\n\t    e = e - eBias\n\t  }\n\t  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n\t}\n\n\texports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n\t  var e, m, c\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n\t  var i = isLE ? 0 : (nBytes - 1)\n\t  var d = isLE ? 1 : -1\n\t  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n\t  value = Math.abs(value)\n\n\t  if (isNaN(value) || value === Infinity) {\n\t    m = isNaN(value) ? 1 : 0\n\t    e = eMax\n\t  } else {\n\t    e = Math.floor(Math.log(value) / Math.LN2)\n\t    if (value * (c = Math.pow(2, -e)) < 1) {\n\t      e--\n\t      c *= 2\n\t    }\n\t    if (e + eBias >= 1) {\n\t      value += rt / c\n\t    } else {\n\t      value += rt * Math.pow(2, 1 - eBias)\n\t    }\n\t    if (value * c >= 2) {\n\t      e++\n\t      c /= 2\n\t    }\n\n\t    if (e + eBias >= eMax) {\n\t      m = 0\n\t      e = eMax\n\t    } else if (e + eBias >= 1) {\n\t      m = (value * c - 1) * Math.pow(2, mLen)\n\t      e = e + eBias\n\t    } else {\n\t      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n\t      e = 0\n\t    }\n\t  }\n\n\t  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n\t  e = (e << mLen) | m\n\t  eLen += mLen\n\t  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n\t  buffer[offset + i - d] |= s * 128\n\t}\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\tvar toString = {}.toString;\n\n\tmodule.exports = Array.isArray || function (arr) {\n\t  return toString.call(arr) == '[object Array]';\n\t};\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\t// resolves . and .. elements in a path array with directory names there\n\t// must be no slashes, empty elements, or device names (c:\\) in the array\n\t// (so also no leading and trailing slashes - it does not distinguish\n\t// relative and absolute paths)\n\tfunction normalizeArray(parts, allowAboveRoot) {\n\t  // if the path tries to go above the root, `up` ends up > 0\n\t  var up = 0;\n\t  for (var i = parts.length - 1; i >= 0; i--) {\n\t    var last = parts[i];\n\t    if (last === '.') {\n\t      parts.splice(i, 1);\n\t    } else if (last === '..') {\n\t      parts.splice(i, 1);\n\t      up++;\n\t    } else if (up) {\n\t      parts.splice(i, 1);\n\t      up--;\n\t    }\n\t  }\n\n\t  // if the path is allowed to go above the root, restore leading ..s\n\t  if (allowAboveRoot) {\n\t    for (; up--; up) {\n\t      parts.unshift('..');\n\t    }\n\t  }\n\n\t  return parts;\n\t}\n\n\t// Split a filename into [root, dir, basename, ext], unix version\n\t// 'root' is just a slash, or nothing.\n\tvar splitPathRe =\n\t    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n\tvar splitPath = function(filename) {\n\t  return splitPathRe.exec(filename).slice(1);\n\t};\n\n\t// path.resolve([from ...], to)\n\t// posix version\n\texports.resolve = function() {\n\t  var resolvedPath = '',\n\t      resolvedAbsolute = false;\n\n\t  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n\t    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n\t    // Skip empty and invalid entries\n\t    if (typeof path !== 'string') {\n\t      throw new TypeError('Arguments to path.resolve must be strings');\n\t    } else if (!path) {\n\t      continue;\n\t    }\n\n\t    resolvedPath = path + '/' + resolvedPath;\n\t    resolvedAbsolute = path.charAt(0) === '/';\n\t  }\n\n\t  // At this point the path should be resolved to a full absolute path, but\n\t  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n\t  // Normalize the path\n\t  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n\t    return !!p;\n\t  }), !resolvedAbsolute).join('/');\n\n\t  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n\t};\n\n\t// path.normalize(path)\n\t// posix version\n\texports.normalize = function(path) {\n\t  var isAbsolute = exports.isAbsolute(path),\n\t      trailingSlash = substr(path, -1) === '/';\n\n\t  // Normalize the path\n\t  path = normalizeArray(filter(path.split('/'), function(p) {\n\t    return !!p;\n\t  }), !isAbsolute).join('/');\n\n\t  if (!path && !isAbsolute) {\n\t    path = '.';\n\t  }\n\t  if (path && trailingSlash) {\n\t    path += '/';\n\t  }\n\n\t  return (isAbsolute ? '/' : '') + path;\n\t};\n\n\t// posix version\n\texports.isAbsolute = function(path) {\n\t  return path.charAt(0) === '/';\n\t};\n\n\t// posix version\n\texports.join = function() {\n\t  var paths = Array.prototype.slice.call(arguments, 0);\n\t  return exports.normalize(filter(paths, function(p, index) {\n\t    if (typeof p !== 'string') {\n\t      throw new TypeError('Arguments to path.join must be strings');\n\t    }\n\t    return p;\n\t  }).join('/'));\n\t};\n\n\n\t// path.relative(from, to)\n\t// posix version\n\texports.relative = function(from, to) {\n\t  from = exports.resolve(from).substr(1);\n\t  to = exports.resolve(to).substr(1);\n\n\t  function trim(arr) {\n\t    var start = 0;\n\t    for (; start < arr.length; start++) {\n\t      if (arr[start] !== '') break;\n\t    }\n\n\t    var end = arr.length - 1;\n\t    for (; end >= 0; end--) {\n\t      if (arr[end] !== '') break;\n\t    }\n\n\t    if (start > end) return [];\n\t    return arr.slice(start, end - start + 1);\n\t  }\n\n\t  var fromParts = trim(from.split('/'));\n\t  var toParts = trim(to.split('/'));\n\n\t  var length = Math.min(fromParts.length, toParts.length);\n\t  var samePartsLength = length;\n\t  for (var i = 0; i < length; i++) {\n\t    if (fromParts[i] !== toParts[i]) {\n\t      samePartsLength = i;\n\t      break;\n\t    }\n\t  }\n\n\t  var outputParts = [];\n\t  for (var i = samePartsLength; i < fromParts.length; i++) {\n\t    outputParts.push('..');\n\t  }\n\n\t  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n\t  return outputParts.join('/');\n\t};\n\n\texports.sep = '/';\n\texports.delimiter = ':';\n\n\texports.dirname = function(path) {\n\t  var result = splitPath(path),\n\t      root = result[0],\n\t      dir = result[1];\n\n\t  if (!root && !dir) {\n\t    // No dirname whatsoever\n\t    return '.';\n\t  }\n\n\t  if (dir) {\n\t    // It has a dirname, strip trailing slash\n\t    dir = dir.substr(0, dir.length - 1);\n\t  }\n\n\t  return root + dir;\n\t};\n\n\n\texports.basename = function(path, ext) {\n\t  var f = splitPath(path)[2];\n\t  // TODO: make this comparison case-insensitive on windows?\n\t  if (ext && f.substr(-1 * ext.length) === ext) {\n\t    f = f.substr(0, f.length - ext.length);\n\t  }\n\t  return f;\n\t};\n\n\n\texports.extname = function(path) {\n\t  return splitPath(path)[3];\n\t};\n\n\tfunction filter (xs, f) {\n\t    if (xs.filter) return xs.filter(f);\n\t    var res = [];\n\t    for (var i = 0; i < xs.length; i++) {\n\t        if (f(xs[i], i, xs)) res.push(xs[i]);\n\t    }\n\t    return res;\n\t}\n\n\t// String.prototype.substr - negative index don't work in IE8\n\tvar substr = 'ab'.substr(-1) === 'b'\n\t    ? function (str, start, len) { return str.substr(start, len) }\n\t    : function (str, start, len) {\n\t        if (start < 0) start = str.length + start;\n\t        return str.substr(start, len);\n\t    }\n\t;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\tvar formatRegExp = /%[sdj%]/g;\n\texports.format = function(f) {\n\t  if (!isString(f)) {\n\t    var objects = [];\n\t    for (var i = 0; i < arguments.length; i++) {\n\t      objects.push(inspect(arguments[i]));\n\t    }\n\t    return objects.join(' ');\n\t  }\n\n\t  var i = 1;\n\t  var args = arguments;\n\t  var len = args.length;\n\t  var str = String(f).replace(formatRegExp, function(x) {\n\t    if (x === '%%') return '%';\n\t    if (i >= len) return x;\n\t    switch (x) {\n\t      case '%s': return String(args[i++]);\n\t      case '%d': return Number(args[i++]);\n\t      case '%j':\n\t        try {\n\t          return JSON.stringify(args[i++]);\n\t        } catch (_) {\n\t          return '[Circular]';\n\t        }\n\t      default:\n\t        return x;\n\t    }\n\t  });\n\t  for (var x = args[i]; i < len; x = args[++i]) {\n\t    if (isNull(x) || !isObject(x)) {\n\t      str += ' ' + x;\n\t    } else {\n\t      str += ' ' + inspect(x);\n\t    }\n\t  }\n\t  return str;\n\t};\n\n\n\t// Mark that a method should not be used.\n\t// Returns a modified function which warns once by default.\n\t// If --no-deprecation is set, then it is a no-op.\n\texports.deprecate = function(fn, msg) {\n\t  // Allow for deprecating things in the process of starting up.\n\t  if (isUndefined(global.process)) {\n\t    return function() {\n\t      return exports.deprecate(fn, msg).apply(this, arguments);\n\t    };\n\t  }\n\n\t  if (process.noDeprecation === true) {\n\t    return fn;\n\t  }\n\n\t  var warned = false;\n\t  function deprecated() {\n\t    if (!warned) {\n\t      if (process.throwDeprecation) {\n\t        throw new Error(msg);\n\t      } else if (process.traceDeprecation) {\n\t        console.trace(msg);\n\t      } else {\n\t        console.error(msg);\n\t      }\n\t      warned = true;\n\t    }\n\t    return fn.apply(this, arguments);\n\t  }\n\n\t  return deprecated;\n\t};\n\n\n\tvar debugs = {};\n\tvar debugEnviron;\n\texports.debuglog = function(set) {\n\t  if (isUndefined(debugEnviron))\n\t    debugEnviron = process.env.NODE_DEBUG || '';\n\t  set = set.toUpperCase();\n\t  if (!debugs[set]) {\n\t    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n\t      var pid = process.pid;\n\t      debugs[set] = function() {\n\t        var msg = exports.format.apply(exports, arguments);\n\t        console.error('%s %d: %s', set, pid, msg);\n\t      };\n\t    } else {\n\t      debugs[set] = function() {};\n\t    }\n\t  }\n\t  return debugs[set];\n\t};\n\n\n\t/**\n\t * Echos the value of a value. Trys to print the value out\n\t * in the best way possible given the different types.\n\t *\n\t * @param {Object} obj The object to print out.\n\t * @param {Object} opts Optional options object that alters the output.\n\t */\n\t/* legacy: obj, showHidden, depth, colors*/\n\tfunction inspect(obj, opts) {\n\t  // default options\n\t  var ctx = {\n\t    seen: [],\n\t    stylize: stylizeNoColor\n\t  };\n\t  // legacy...\n\t  if (arguments.length >= 3) ctx.depth = arguments[2];\n\t  if (arguments.length >= 4) ctx.colors = arguments[3];\n\t  if (isBoolean(opts)) {\n\t    // legacy...\n\t    ctx.showHidden = opts;\n\t  } else if (opts) {\n\t    // got an \"options\" object\n\t    exports._extend(ctx, opts);\n\t  }\n\t  // set default options\n\t  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n\t  if (isUndefined(ctx.depth)) ctx.depth = 2;\n\t  if (isUndefined(ctx.colors)) ctx.colors = false;\n\t  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n\t  if (ctx.colors) ctx.stylize = stylizeWithColor;\n\t  return formatValue(ctx, obj, ctx.depth);\n\t}\n\texports.inspect = inspect;\n\n\n\t// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n\tinspect.colors = {\n\t  'bold' : [1, 22],\n\t  'italic' : [3, 23],\n\t  'underline' : [4, 24],\n\t  'inverse' : [7, 27],\n\t  'white' : [37, 39],\n\t  'grey' : [90, 39],\n\t  'black' : [30, 39],\n\t  'blue' : [34, 39],\n\t  'cyan' : [36, 39],\n\t  'green' : [32, 39],\n\t  'magenta' : [35, 39],\n\t  'red' : [31, 39],\n\t  'yellow' : [33, 39]\n\t};\n\n\t// Don't use 'blue' not visible on cmd.exe\n\tinspect.styles = {\n\t  'special': 'cyan',\n\t  'number': 'yellow',\n\t  'boolean': 'yellow',\n\t  'undefined': 'grey',\n\t  'null': 'bold',\n\t  'string': 'green',\n\t  'date': 'magenta',\n\t  // \"name\": intentionally not styling\n\t  'regexp': 'red'\n\t};\n\n\n\tfunction stylizeWithColor(str, styleType) {\n\t  var style = inspect.styles[styleType];\n\n\t  if (style) {\n\t    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n\t           '\\u001b[' + inspect.colors[style][1] + 'm';\n\t  } else {\n\t    return str;\n\t  }\n\t}\n\n\n\tfunction stylizeNoColor(str, styleType) {\n\t  return str;\n\t}\n\n\n\tfunction arrayToHash(array) {\n\t  var hash = {};\n\n\t  array.forEach(function(val, idx) {\n\t    hash[val] = true;\n\t  });\n\n\t  return hash;\n\t}\n\n\n\tfunction formatValue(ctx, value, recurseTimes) {\n\t  // Provide a hook for user-specified inspect functions.\n\t  // Check that value is an object with an inspect function on it\n\t  if (ctx.customInspect &&\n\t      value &&\n\t      isFunction(value.inspect) &&\n\t      // Filter out the util module, it's inspect function is special\n\t      value.inspect !== exports.inspect &&\n\t      // Also filter out any prototype objects using the circular check.\n\t      !(value.constructor && value.constructor.prototype === value)) {\n\t    var ret = value.inspect(recurseTimes, ctx);\n\t    if (!isString(ret)) {\n\t      ret = formatValue(ctx, ret, recurseTimes);\n\t    }\n\t    return ret;\n\t  }\n\n\t  // Primitive types cannot have properties\n\t  var primitive = formatPrimitive(ctx, value);\n\t  if (primitive) {\n\t    return primitive;\n\t  }\n\n\t  // Look up the keys of the object.\n\t  var keys = Object.keys(value);\n\t  var visibleKeys = arrayToHash(keys);\n\n\t  if (ctx.showHidden) {\n\t    keys = Object.getOwnPropertyNames(value);\n\t  }\n\n\t  // IE doesn't make error fields non-enumerable\n\t  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n\t  if (isError(value)\n\t      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n\t    return formatError(value);\n\t  }\n\n\t  // Some type of object without properties can be shortcutted.\n\t  if (keys.length === 0) {\n\t    if (isFunction(value)) {\n\t      var name = value.name ? ': ' + value.name : '';\n\t      return ctx.stylize('[Function' + name + ']', 'special');\n\t    }\n\t    if (isRegExp(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    }\n\t    if (isDate(value)) {\n\t      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n\t    }\n\t    if (isError(value)) {\n\t      return formatError(value);\n\t    }\n\t  }\n\n\t  var base = '', array = false, braces = ['{', '}'];\n\n\t  // Make Array say that they are Array\n\t  if (isArray(value)) {\n\t    array = true;\n\t    braces = ['[', ']'];\n\t  }\n\n\t  // Make functions say that they are functions\n\t  if (isFunction(value)) {\n\t    var n = value.name ? ': ' + value.name : '';\n\t    base = ' [Function' + n + ']';\n\t  }\n\n\t  // Make RegExps say that they are RegExps\n\t  if (isRegExp(value)) {\n\t    base = ' ' + RegExp.prototype.toString.call(value);\n\t  }\n\n\t  // Make dates with properties first say the date\n\t  if (isDate(value)) {\n\t    base = ' ' + Date.prototype.toUTCString.call(value);\n\t  }\n\n\t  // Make error with message first say the error\n\t  if (isError(value)) {\n\t    base = ' ' + formatError(value);\n\t  }\n\n\t  if (keys.length === 0 && (!array || value.length == 0)) {\n\t    return braces[0] + base + braces[1];\n\t  }\n\n\t  if (recurseTimes < 0) {\n\t    if (isRegExp(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    } else {\n\t      return ctx.stylize('[Object]', 'special');\n\t    }\n\t  }\n\n\t  ctx.seen.push(value);\n\n\t  var output;\n\t  if (array) {\n\t    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n\t  } else {\n\t    output = keys.map(function(key) {\n\t      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n\t    });\n\t  }\n\n\t  ctx.seen.pop();\n\n\t  return reduceToSingleString(output, base, braces);\n\t}\n\n\n\tfunction formatPrimitive(ctx, value) {\n\t  if (isUndefined(value))\n\t    return ctx.stylize('undefined', 'undefined');\n\t  if (isString(value)) {\n\t    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n\t                                             .replace(/'/g, \"\\\\'\")\n\t                                             .replace(/\\\\\"/g, '\"') + '\\'';\n\t    return ctx.stylize(simple, 'string');\n\t  }\n\t  if (isNumber(value))\n\t    return ctx.stylize('' + value, 'number');\n\t  if (isBoolean(value))\n\t    return ctx.stylize('' + value, 'boolean');\n\t  // For some reason typeof null is \"object\", so special case here.\n\t  if (isNull(value))\n\t    return ctx.stylize('null', 'null');\n\t}\n\n\n\tfunction formatError(value) {\n\t  return '[' + Error.prototype.toString.call(value) + ']';\n\t}\n\n\n\tfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n\t  var output = [];\n\t  for (var i = 0, l = value.length; i < l; ++i) {\n\t    if (hasOwnProperty(value, String(i))) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          String(i), true));\n\t    } else {\n\t      output.push('');\n\t    }\n\t  }\n\t  keys.forEach(function(key) {\n\t    if (!key.match(/^\\d+$/)) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          key, true));\n\t    }\n\t  });\n\t  return output;\n\t}\n\n\n\tfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n\t  var name, str, desc;\n\t  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n\t  if (desc.get) {\n\t    if (desc.set) {\n\t      str = ctx.stylize('[Getter/Setter]', 'special');\n\t    } else {\n\t      str = ctx.stylize('[Getter]', 'special');\n\t    }\n\t  } else {\n\t    if (desc.set) {\n\t      str = ctx.stylize('[Setter]', 'special');\n\t    }\n\t  }\n\t  if (!hasOwnProperty(visibleKeys, key)) {\n\t    name = '[' + key + ']';\n\t  }\n\t  if (!str) {\n\t    if (ctx.seen.indexOf(desc.value) < 0) {\n\t      if (isNull(recurseTimes)) {\n\t        str = formatValue(ctx, desc.value, null);\n\t      } else {\n\t        str = formatValue(ctx, desc.value, recurseTimes - 1);\n\t      }\n\t      if (str.indexOf('\\n') > -1) {\n\t        if (array) {\n\t          str = str.split('\\n').map(function(line) {\n\t            return '  ' + line;\n\t          }).join('\\n').substr(2);\n\t        } else {\n\t          str = '\\n' + str.split('\\n').map(function(line) {\n\t            return '   ' + line;\n\t          }).join('\\n');\n\t        }\n\t      }\n\t    } else {\n\t      str = ctx.stylize('[Circular]', 'special');\n\t    }\n\t  }\n\t  if (isUndefined(name)) {\n\t    if (array && key.match(/^\\d+$/)) {\n\t      return str;\n\t    }\n\t    name = JSON.stringify('' + key);\n\t    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n\t      name = name.substr(1, name.length - 2);\n\t      name = ctx.stylize(name, 'name');\n\t    } else {\n\t      name = name.replace(/'/g, \"\\\\'\")\n\t                 .replace(/\\\\\"/g, '\"')\n\t                 .replace(/(^\"|\"$)/g, \"'\");\n\t      name = ctx.stylize(name, 'string');\n\t    }\n\t  }\n\n\t  return name + ': ' + str;\n\t}\n\n\n\tfunction reduceToSingleString(output, base, braces) {\n\t  var numLinesEst = 0;\n\t  var length = output.reduce(function(prev, cur) {\n\t    numLinesEst++;\n\t    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n\t    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n\t  }, 0);\n\n\t  if (length > 60) {\n\t    return braces[0] +\n\t           (base === '' ? '' : base + '\\n ') +\n\t           ' ' +\n\t           output.join(',\\n  ') +\n\t           ' ' +\n\t           braces[1];\n\t  }\n\n\t  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n\t}\n\n\n\t// NOTE: These type checking functions intentionally don't use `instanceof`\n\t// because it is fragile and can be easily faked with `Object.create()`.\n\tfunction isArray(ar) {\n\t  return Array.isArray(ar);\n\t}\n\texports.isArray = isArray;\n\n\tfunction isBoolean(arg) {\n\t  return typeof arg === 'boolean';\n\t}\n\texports.isBoolean = isBoolean;\n\n\tfunction isNull(arg) {\n\t  return arg === null;\n\t}\n\texports.isNull = isNull;\n\n\tfunction isNullOrUndefined(arg) {\n\t  return arg == null;\n\t}\n\texports.isNullOrUndefined = isNullOrUndefined;\n\n\tfunction isNumber(arg) {\n\t  return typeof arg === 'number';\n\t}\n\texports.isNumber = isNumber;\n\n\tfunction isString(arg) {\n\t  return typeof arg === 'string';\n\t}\n\texports.isString = isString;\n\n\tfunction isSymbol(arg) {\n\t  return typeof arg === 'symbol';\n\t}\n\texports.isSymbol = isSymbol;\n\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\texports.isUndefined = isUndefined;\n\n\tfunction isRegExp(re) {\n\t  return isObject(re) && objectToString(re) === '[object RegExp]';\n\t}\n\texports.isRegExp = isRegExp;\n\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\texports.isObject = isObject;\n\n\tfunction isDate(d) {\n\t  return isObject(d) && objectToString(d) === '[object Date]';\n\t}\n\texports.isDate = isDate;\n\n\tfunction isError(e) {\n\t  return isObject(e) &&\n\t      (objectToString(e) === '[object Error]' || e instanceof Error);\n\t}\n\texports.isError = isError;\n\n\tfunction isFunction(arg) {\n\t  return typeof arg === 'function';\n\t}\n\texports.isFunction = isFunction;\n\n\tfunction isPrimitive(arg) {\n\t  return arg === null ||\n\t         typeof arg === 'boolean' ||\n\t         typeof arg === 'number' ||\n\t         typeof arg === 'string' ||\n\t         typeof arg === 'symbol' ||  // ES6 symbol\n\t         typeof arg === 'undefined';\n\t}\n\texports.isPrimitive = isPrimitive;\n\n\texports.isBuffer = __webpack_require__(11);\n\n\tfunction objectToString(o) {\n\t  return Object.prototype.toString.call(o);\n\t}\n\n\n\tfunction pad(n) {\n\t  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n\t}\n\n\n\tvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n\t              'Oct', 'Nov', 'Dec'];\n\n\t// 26 Feb 16:19:34\n\tfunction timestamp() {\n\t  var d = new Date();\n\t  var time = [pad(d.getHours()),\n\t              pad(d.getMinutes()),\n\t              pad(d.getSeconds())].join(':');\n\t  return [d.getDate(), months[d.getMonth()], time].join(' ');\n\t}\n\n\n\t// log is just a thin wrapper to console.log that prepends a timestamp\n\texports.log = function() {\n\t  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n\t};\n\n\n\t/**\n\t * Inherit the prototype methods from one constructor into another.\n\t *\n\t * The Function.prototype.inherits from lang.js rewritten as a standalone\n\t * function (not on Function.prototype). NOTE: If this file is to be loaded\n\t * during bootstrapping this function needs to be rewritten using some native\n\t * functions as prototype setup using normal JavaScript does not work as\n\t * expected during bootstrapping (see mirror.js in r114903).\n\t *\n\t * @param {function} ctor Constructor function which needs to inherit the\n\t *     prototype.\n\t * @param {function} superCtor Constructor function to inherit prototype from.\n\t */\n\texports.inherits = __webpack_require__(12);\n\n\texports._extend = function(origin, add) {\n\t  // Don't do anything if add isn't an object\n\t  if (!add || !isObject(add)) return origin;\n\n\t  var keys = Object.keys(add);\n\t  var i = keys.length;\n\t  while (i--) {\n\t    origin[keys[i]] = add[keys[i]];\n\t  }\n\t  return origin;\n\t};\n\n\tfunction hasOwnProperty(obj, prop) {\n\t  return Object.prototype.hasOwnProperty.call(obj, prop);\n\t}\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(3)))\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = function isBuffer(arg) {\n\t  return arg && typeof arg === 'object'\n\t    && typeof arg.copy === 'function'\n\t    && typeof arg.fill === 'function'\n\t    && typeof arg.readUInt8 === 'function';\n\t}\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\n\tif (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    var TempCtor = function () {}\n\t    TempCtor.prototype = superCtor.prototype\n\t    ctor.prototype = new TempCtor()\n\t    ctor.prototype.constructor = ctor\n\t  }\n\t}\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**\n\t * @license\n\t * Lo-Dash 2.4.2 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash -o ./dist/lodash.compat.js`\n\t * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t;(function() {\n\n\t  /** Used as a safe reference for `undefined` in pre ES5 environments */\n\t  var undefined;\n\n\t  /** Used to pool arrays and objects used internally */\n\t  var arrayPool = [],\n\t      objectPool = [];\n\n\t  /** Used to generate unique IDs */\n\t  var idCounter = 0;\n\n\t  /** Used internally to indicate various things */\n\t  var indicatorObject = {};\n\n\t  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */\n\t  var keyPrefix = +new Date + '';\n\n\t  /** Used as the size when optimizations are enabled for large arrays */\n\t  var largeArraySize = 75;\n\n\t  /** Used as the max size of the `arrayPool` and `objectPool` */\n\t  var maxPoolSize = 40;\n\n\t  /** Used to detect and test whitespace */\n\t  var whitespace = (\n\t    // whitespace\n\t    ' \\t\\x0B\\f\\xA0\\ufeff' +\n\n\t    // line terminators\n\t    '\\n\\r\\u2028\\u2029' +\n\n\t    // unicode category \"Zs\" space separators\n\t    '\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000'\n\t  );\n\n\t  /** Used to match empty string literals in compiled template source */\n\t  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n\t      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n\t      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n\t  /**\n\t   * Used to match ES6 template delimiters\n\t   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals\n\t   */\n\t  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n\t  /** Used to match regexp flags from their coerced string values */\n\t  var reFlags = /\\w*$/;\n\n\t  /** Used to detected named functions */\n\t  var reFuncName = /^\\s*function[ \\n\\r\\t]+\\w/;\n\n\t  /** Used to match \"interpolate\" template delimiters */\n\t  var reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n\t  /** Used to match leading whitespace and zeros to be removed */\n\t  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');\n\n\t  /** Used to ensure capturing order of template delimiters */\n\t  var reNoMatch = /($^)/;\n\n\t  /** Used to detect functions containing a `this` reference */\n\t  var reThis = /\\bthis\\b/;\n\n\t  /** Used to match unescaped characters in compiled string literals */\n\t  var reUnescapedString = /['\\n\\r\\t\\u2028\\u2029\\\\]/g;\n\n\t  /** Used to assign default `context` object properties */\n\t  var contextProps = [\n\t    'Array', 'Boolean', 'Date', 'Error', 'Function', 'Math', 'Number', 'Object',\n\t    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',\n\t    'parseInt', 'setTimeout'\n\t  ];\n\n\t  /** Used to fix the JScript [[DontEnum]] bug */\n\t  var shadowedProps = [\n\t    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',\n\t    'toLocaleString', 'toString', 'valueOf'\n\t  ];\n\n\t  /** Used to make template sourceURLs easier to identify */\n\t  var templateCounter = 0;\n\n\t  /** `Object#toString` result shortcuts */\n\t  var argsClass = '[object Arguments]',\n\t      arrayClass = '[object Array]',\n\t      boolClass = '[object Boolean]',\n\t      dateClass = '[object Date]',\n\t      errorClass = '[object Error]',\n\t      funcClass = '[object Function]',\n\t      numberClass = '[object Number]',\n\t      objectClass = '[object Object]',\n\t      regexpClass = '[object RegExp]',\n\t      stringClass = '[object String]';\n\n\t  /** Used to identify object classifications that `_.clone` supports */\n\t  var cloneableClasses = {};\n\t  cloneableClasses[funcClass] = false;\n\t  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =\n\t  cloneableClasses[boolClass] = cloneableClasses[dateClass] =\n\t  cloneableClasses[numberClass] = cloneableClasses[objectClass] =\n\t  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;\n\n\t  /** Used as an internal `_.debounce` options object */\n\t  var debounceOptions = {\n\t    'leading': false,\n\t    'maxWait': 0,\n\t    'trailing': false\n\t  };\n\n\t  /** Used as the property descriptor for `__bindData__` */\n\t  var descriptor = {\n\t    'configurable': false,\n\t    'enumerable': false,\n\t    'value': null,\n\t    'writable': false\n\t  };\n\n\t  /** Used as the data object for `iteratorTemplate` */\n\t  var iteratorData = {\n\t    'args': '',\n\t    'array': null,\n\t    'bottom': '',\n\t    'firstArg': '',\n\t    'init': '',\n\t    'keys': null,\n\t    'loop': '',\n\t    'shadowedProps': null,\n\t    'support': null,\n\t    'top': '',\n\t    'useHas': false\n\t  };\n\n\t  /** Used to determine if values are of the language type Object */\n\t  var objectTypes = {\n\t    'boolean': false,\n\t    'function': true,\n\t    'object': true,\n\t    'number': false,\n\t    'string': false,\n\t    'undefined': false\n\t  };\n\n\t  /** Used to escape characters for inclusion in compiled string literals */\n\t  var stringEscapes = {\n\t    '\\\\': '\\\\',\n\t    \"'\": \"'\",\n\t    '\\n': 'n',\n\t    '\\r': 'r',\n\t    '\\t': 't',\n\t    '\\u2028': 'u2028',\n\t    '\\u2029': 'u2029'\n\t  };\n\n\t  /** Used as a reference to the global object */\n\t  var root = (objectTypes[typeof window] && window) || this;\n\n\t  /** Detect free variable `exports` */\n\t  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n\t  /** Detect free variable `module` */\n\t  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n\t  /** Detect the popular CommonJS extension `module.exports` */\n\t  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;\n\n\t  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */\n\t  var freeGlobal = objectTypes[typeof global] && global;\n\t  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n\t    root = freeGlobal;\n\t  }\n\n\t  /*--------------------------------------------------------------------------*/\n\n\t  /**\n\t   * The base implementation of `_.indexOf` without support for binary searches\n\t   * or `fromIndex` constraints.\n\t   *\n\t   * @private\n\t   * @param {Array} array The array to search.\n\t   * @param {*} value The value to search for.\n\t   * @param {number} [fromIndex=0] The index to search from.\n\t   * @returns {number} Returns the index of the matched value or `-1`.\n\t   */\n\t  function baseIndexOf(array, value, fromIndex) {\n\t    var index = (fromIndex || 0) - 1,\n\t        length = array ? array.length : 0;\n\n\t    while (++index < length) {\n\t      if (array[index] === value) {\n\t        return index;\n\t      }\n\t    }\n\t    return -1;\n\t  }\n\n\t  /**\n\t   * An implementation of `_.contains` for cache objects that mimics the return\n\t   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.\n\t   *\n\t   * @private\n\t   * @param {Object} cache The cache object to inspect.\n\t   * @param {*} value The value to search for.\n\t   * @returns {number} Returns `0` if `value` is found, else `-1`.\n\t   */\n\t  function cacheIndexOf(cache, value) {\n\t    var type = typeof value;\n\t    cache = cache.cache;\n\n\t    if (type == 'boolean' || value == null) {\n\t      return cache[value] ? 0 : -1;\n\t    }\n\t    if (type != 'number' && type != 'string') {\n\t      type = 'object';\n\t    }\n\t    var key = type == 'number' ? value : keyPrefix + value;\n\t    cache = (cache = cache[type]) && cache[key];\n\n\t    return type == 'object'\n\t      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)\n\t      : (cache ? 0 : -1);\n\t  }\n\n\t  /**\n\t   * Adds a given value to the corresponding cache object.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to add to the cache.\n\t   */\n\t  function cachePush(value) {\n\t    var cache = this.cache,\n\t        type = typeof value;\n\n\t    if (type == 'boolean' || value == null) {\n\t      cache[value] = true;\n\t    } else {\n\t      if (type != 'number' && type != 'string') {\n\t        type = 'object';\n\t      }\n\t      var key = type == 'number' ? value : keyPrefix + value,\n\t          typeCache = cache[type] || (cache[type] = {});\n\n\t      if (type == 'object') {\n\t        (typeCache[key] || (typeCache[key] = [])).push(value);\n\t      } else {\n\t        typeCache[key] = true;\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Used by `_.max` and `_.min` as the default callback when a given\n\t   * collection is a string value.\n\t   *\n\t   * @private\n\t   * @param {string} value The character to inspect.\n\t   * @returns {number} Returns the code unit of given character.\n\t   */\n\t  function charAtCallback(value) {\n\t    return value.charCodeAt(0);\n\t  }\n\n\t  /**\n\t   * Used by `sortBy` to compare transformed `collection` elements, stable sorting\n\t   * them in ascending order.\n\t   *\n\t   * @private\n\t   * @param {Object} a The object to compare to `b`.\n\t   * @param {Object} b The object to compare to `a`.\n\t   * @returns {number} Returns the sort order indicator of `1` or `-1`.\n\t   */\n\t  function compareAscending(a, b) {\n\t    var ac = a.criteria,\n\t        bc = b.criteria,\n\t        index = -1,\n\t        length = ac.length;\n\n\t    while (++index < length) {\n\t      var value = ac[index],\n\t          other = bc[index];\n\n\t      if (value !== other) {\n\t        if (value > other || typeof value == 'undefined') {\n\t          return 1;\n\t        }\n\t        if (value < other || typeof other == 'undefined') {\n\t          return -1;\n\t        }\n\t      }\n\t    }\n\t    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n\t    // that causes it, under certain circumstances, to return the same value for\n\t    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247\n\t    //\n\t    // This also ensures a stable sort in V8 and other engines.\n\t    // See http://code.google.com/p/v8/issues/detail?id=90\n\t    return a.index - b.index;\n\t  }\n\n\t  /**\n\t   * Creates a cache object to optimize linear searches of large arrays.\n\t   *\n\t   * @private\n\t   * @param {Array} [array=[]] The array to search.\n\t   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.\n\t   */\n\t  function createCache(array) {\n\t    var index = -1,\n\t        length = array.length,\n\t        first = array[0],\n\t        mid = array[(length / 2) | 0],\n\t        last = array[length - 1];\n\n\t    if (first && typeof first == 'object' &&\n\t        mid && typeof mid == 'object' && last && typeof last == 'object') {\n\t      return false;\n\t    }\n\t    var cache = getObject();\n\t    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;\n\n\t    var result = getObject();\n\t    result.array = array;\n\t    result.cache = cache;\n\t    result.push = cachePush;\n\n\t    while (++index < length) {\n\t      result.push(array[index]);\n\t    }\n\t    return result;\n\t  }\n\n\t  /**\n\t   * Used by `template` to escape characters for inclusion in compiled\n\t   * string literals.\n\t   *\n\t   * @private\n\t   * @param {string} match The matched character to escape.\n\t   * @returns {string} Returns the escaped character.\n\t   */\n\t  function escapeStringChar(match) {\n\t    return '\\\\' + stringEscapes[match];\n\t  }\n\n\t  /**\n\t   * Gets an array from the array pool or creates a new one if the pool is empty.\n\t   *\n\t   * @private\n\t   * @returns {Array} The array from the pool.\n\t   */\n\t  function getArray() {\n\t    return arrayPool.pop() || [];\n\t  }\n\n\t  /**\n\t   * Gets an object from the object pool or creates a new one if the pool is empty.\n\t   *\n\t   * @private\n\t   * @returns {Object} The object from the pool.\n\t   */\n\t  function getObject() {\n\t    return objectPool.pop() || {\n\t      'array': null,\n\t      'cache': null,\n\t      'criteria': null,\n\t      'false': false,\n\t      'index': 0,\n\t      'null': false,\n\t      'number': null,\n\t      'object': null,\n\t      'push': null,\n\t      'string': null,\n\t      'true': false,\n\t      'undefined': false,\n\t      'value': null\n\t    };\n\t  }\n\n\t  /**\n\t   * Checks if `value` is a DOM node in IE < 9.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if the `value` is a DOM node, else `false`.\n\t   */\n\t  function isNode(value) {\n\t    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`\n\t    // methods that are `typeof` \"string\" and still can coerce nodes to strings\n\t    return typeof value.toString != 'function' && typeof (value + '') == 'string';\n\t  }\n\n\t  /**\n\t   * Releases the given array back to the array pool.\n\t   *\n\t   * @private\n\t   * @param {Array} [array] The array to release.\n\t   */\n\t  function releaseArray(array) {\n\t    array.length = 0;\n\t    if (arrayPool.length < maxPoolSize) {\n\t      arrayPool.push(array);\n\t    }\n\t  }\n\n\t  /**\n\t   * Releases the given object back to the object pool.\n\t   *\n\t   * @private\n\t   * @param {Object} [object] The object to release.\n\t   */\n\t  function releaseObject(object) {\n\t    var cache = object.cache;\n\t    if (cache) {\n\t      releaseObject(cache);\n\t    }\n\t    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;\n\t    if (objectPool.length < maxPoolSize) {\n\t      objectPool.push(object);\n\t    }\n\t  }\n\n\t  /**\n\t   * Slices the `collection` from the `start` index up to, but not including,\n\t   * the `end` index.\n\t   *\n\t   * Note: This function is used instead of `Array#slice` to support node lists\n\t   * in IE < 9 and to ensure dense arrays are returned.\n\t   *\n\t   * @private\n\t   * @param {Array|Object|string} collection The collection to slice.\n\t   * @param {number} start The start index.\n\t   * @param {number} end The end index.\n\t   * @returns {Array} Returns the new array.\n\t   */\n\t  function slice(array, start, end) {\n\t    start || (start = 0);\n\t    if (typeof end == 'undefined') {\n\t      end = array ? array.length : 0;\n\t    }\n\t    var index = -1,\n\t        length = end - start || 0,\n\t        result = Array(length < 0 ? 0 : length);\n\n\t    while (++index < length) {\n\t      result[index] = array[start + index];\n\t    }\n\t    return result;\n\t  }\n\n\t  /*--------------------------------------------------------------------------*/\n\n\t  /**\n\t   * Create a new `lodash` function using the given context object.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @category Utilities\n\t   * @param {Object} [context=root] The context object.\n\t   * @returns {Function} Returns the `lodash` function.\n\t   */\n\t  function runInContext(context) {\n\t    // Avoid issues with some ES3 environments that attempt to use values, named\n\t    // after built-in constructors like `Object`, for the creation of literals.\n\t    // ES5 clears this up by stating that literals must use built-in constructors.\n\t    // See http://es5.github.io/#x11.1.5.\n\t    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;\n\n\t    /** Native constructor references */\n\t    var Array = context.Array,\n\t        Boolean = context.Boolean,\n\t        Date = context.Date,\n\t        Error = context.Error,\n\t        Function = context.Function,\n\t        Math = context.Math,\n\t        Number = context.Number,\n\t        Object = context.Object,\n\t        RegExp = context.RegExp,\n\t        String = context.String,\n\t        TypeError = context.TypeError;\n\n\t    /**\n\t     * Used for `Array` method references.\n\t     *\n\t     * Normally `Array.prototype` would suffice, however, using an array literal\n\t     * avoids issues in Narwhal.\n\t     */\n\t    var arrayRef = [];\n\n\t    /** Used for native method references */\n\t    var errorProto = Error.prototype,\n\t        objectProto = Object.prototype,\n\t        stringProto = String.prototype;\n\n\t    /** Used to restore the original `_` reference in `noConflict` */\n\t    var oldDash = context._;\n\n\t    /** Used to resolve the internal [[Class]] of values */\n\t    var toString = objectProto.toString;\n\n\t    /** Used to detect if a method is native */\n\t    var reNative = RegExp('^' +\n\t      String(toString)\n\t        .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n\t        .replace(/toString| for [^\\]]+/g, '.*?') + '$'\n\t    );\n\n\t    /** Native method shortcuts */\n\t    var ceil = Math.ceil,\n\t        clearTimeout = context.clearTimeout,\n\t        floor = Math.floor,\n\t        fnToString = Function.prototype.toString,\n\t        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,\n\t        hasOwnProperty = objectProto.hasOwnProperty,\n\t        push = arrayRef.push,\n\t        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n\t        setTimeout = context.setTimeout,\n\t        splice = arrayRef.splice,\n\t        unshift = arrayRef.unshift;\n\n\t    /** Used to set meta data on functions */\n\t    var defineProperty = (function() {\n\t      // IE 8 only accepts DOM elements\n\t      try {\n\t        var o = {},\n\t            func = isNative(func = Object.defineProperty) && func,\n\t            result = func(o, o, o) && func;\n\t      } catch(e) { }\n\t      return result;\n\t    }());\n\n\t    /* Native method shortcuts for methods with the same name as other `lodash` methods */\n\t    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,\n\t        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,\n\t        nativeIsFinite = context.isFinite,\n\t        nativeIsNaN = context.isNaN,\n\t        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,\n\t        nativeMax = Math.max,\n\t        nativeMin = Math.min,\n\t        nativeParseInt = context.parseInt,\n\t        nativeRandom = Math.random;\n\n\t    /** Used to lookup a built-in constructor by [[Class]] */\n\t    var ctorByClass = {};\n\t    ctorByClass[arrayClass] = Array;\n\t    ctorByClass[boolClass] = Boolean;\n\t    ctorByClass[dateClass] = Date;\n\t    ctorByClass[funcClass] = Function;\n\t    ctorByClass[objectClass] = Object;\n\t    ctorByClass[numberClass] = Number;\n\t    ctorByClass[regexpClass] = RegExp;\n\t    ctorByClass[stringClass] = String;\n\n\t    /** Used to avoid iterating non-enumerable properties in IE < 9 */\n\t    var nonEnumProps = {};\n\t    nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };\n\t    nonEnumProps[boolClass] = nonEnumProps[stringClass] = { 'constructor': true, 'toString': true, 'valueOf': true };\n\t    nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = { 'constructor': true, 'toString': true };\n\t    nonEnumProps[objectClass] = { 'constructor': true };\n\n\t    (function() {\n\t      var length = shadowedProps.length;\n\t      while (length--) {\n\t        var key = shadowedProps[length];\n\t        for (var className in nonEnumProps) {\n\t          if (hasOwnProperty.call(nonEnumProps, className) && !hasOwnProperty.call(nonEnumProps[className], key)) {\n\t            nonEnumProps[className][key] = false;\n\t          }\n\t        }\n\t      }\n\t    }());\n\n\t    /*--------------------------------------------------------------------------*/\n\n\t    /**\n\t     * Creates a `lodash` object which wraps the given value to enable intuitive\n\t     * method chaining.\n\t     *\n\t     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:\n\t     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,\n\t     * and `unshift`\n\t     *\n\t     * Chaining is supported in custom builds as long as the `value` method is\n\t     * implicitly or explicitly included in the build.\n\t     *\n\t     * The chainable wrapper functions are:\n\t     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,\n\t     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,\n\t     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,\n\t     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,\n\t     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,\n\t     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,\n\t     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,\n\t     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,\n\t     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,\n\t     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,\n\t     * and `zip`\n\t     *\n\t     * The non-chainable wrapper functions are:\n\t     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,\n\t     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,\n\t     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,\n\t     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,\n\t     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,\n\t     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,\n\t     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,\n\t     * `template`, `unescape`, `uniqueId`, and `value`\n\t     *\n\t     * The wrapper functions `first` and `last` return wrapped values when `n` is\n\t     * provided, otherwise they return unwrapped values.\n\t     *\n\t     * Explicit chaining can be enabled by using the `_.chain` method.\n\t     *\n\t     * @name _\n\t     * @constructor\n\t     * @category Chaining\n\t     * @param {*} value The value to wrap in a `lodash` instance.\n\t     * @returns {Object} Returns a `lodash` instance.\n\t     * @example\n\t     *\n\t     * var wrapped = _([1, 2, 3]);\n\t     *\n\t     * // returns an unwrapped value\n\t     * wrapped.reduce(function(sum, num) {\n\t     *   return sum + num;\n\t     * });\n\t     * // => 6\n\t     *\n\t     * // returns a wrapped value\n\t     * var squares = wrapped.map(function(num) {\n\t     *   return num * num;\n\t     * });\n\t     *\n\t     * _.isArray(squares);\n\t     * // => false\n\t     *\n\t     * _.isArray(squares.value());\n\t     * // => true\n\t     */\n\t    function lodash(value) {\n\t      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor\n\t      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))\n\t       ? value\n\t       : new lodashWrapper(value);\n\t    }\n\n\t    /**\n\t     * A fast path for creating `lodash` wrapper objects.\n\t     *\n\t     * @private\n\t     * @param {*} value The value to wrap in a `lodash` instance.\n\t     * @param {boolean} chainAll A flag to enable chaining for all methods\n\t     * @returns {Object} Returns a `lodash` instance.\n\t     */\n\t    function lodashWrapper(value, chainAll) {\n\t      this.__chain__ = !!chainAll;\n\t      this.__wrapped__ = value;\n\t    }\n\t    // ensure `new lodashWrapper` is an instance of `lodash`\n\t    lodashWrapper.prototype = lodash.prototype;\n\n\t    /**\n\t     * An object used to flag environments features.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @type Object\n\t     */\n\t    var support = lodash.support = {};\n\n\t    (function() {\n\t      var ctor = function() { this.x = 1; },\n\t          object = { '0': 1, 'length': 1 },\n\t          props = [];\n\n\t      ctor.prototype = { 'valueOf': 1, 'y': 1 };\n\t      for (var key in new ctor) { props.push(key); }\n\t      for (key in arguments) { }\n\n\t      /**\n\t       * Detect if an `arguments` object's [[Class]] is resolvable (all but Firefox < 4, IE < 9).\n\t       *\n\t       * @memberOf _.support\n\t       * @type boolean\n\t       */\n\t      support.argsClass = toString.call(arguments) == argsClass;\n\n\t      /**\n\t       * Detect if `arguments` objects are `Object` objects (all but Narwhal and Opera < 10.5).\n\t       *\n\t       * @memberOf _.support\n\t       * @type boolean\n\t       */\n\t      support.argsObject = arguments.constructor == Object && !(arguments instanceof Array);\n\n\t      /**\n\t       * Detect if `name` or `message` properties of `Error.prototype` are\n\t       * enumerable by default. (IE < 9, Safari < 5.1)\n\t       *\n\t       * @memberOf _.support\n\t       * @type boolean\n\t       */\n\t      support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');\n\n\t      /**\n\t       * Detect if `prototype` properties are enumerable by default.\n\t       *\n\t       * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1\n\t       * (if the prototype or a property on the prototype has been set)\n\t       * incorrectly sets a function's `prototype` property [[Enumerable]]\n\t       * value to `true`.\n\t       *\n\t       * @memberOf _.support\n\t       * @type boolean\n\t       */\n\t      support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');\n\n\t      /**\n\t       * Detect if functions can be decompiled by `Function#toString`\n\t       * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).\n\t       *\n\t       * @memberOf _.support\n\t       * @type boolean\n\t       */\n\t      support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);\n\n\t      /**\n\t       * Detect if `Function#name` is supported (all but IE).\n\t       *\n\t       * @memberOf _.support\n\t       * @type boolean\n\t       */\n\t      support.funcNames = typeof Function.name == 'string';\n\n\t      /**\n\t       * Detect if `arguments` object indexes are non-enumerable\n\t       * (Firefox < 4, IE < 9, PhantomJS, Safari < 5.1).\n\t       *\n\t       * @memberOf _.support\n\t       * @type boolean\n\t       */\n\t      support.nonEnumArgs = key != 0;\n\n\t      /**\n\t       * Detect if properties shadowing those on `Object.prototype` are non-enumerable.\n\t       *\n\t       * In IE < 9 an objects own properties, shadowing non-enumerable ones, are\n\t       * made non-enumerable as well (a.k.a the JScript [[DontEnum]] bug).\n\t       *\n\t       * @memberOf _.support\n\t       * @type boolean\n\t       */\n\t      support.nonEnumShadows = !/valueOf/.test(props);\n\n\t      /**\n\t       * Detect if own properties are iterated after inherited properties (all but IE < 9).\n\t       *\n\t       * @memberOf _.support\n\t       * @type boolean\n\t       */\n\t      support.ownLast = props[0] != 'x';\n\n\t      /**\n\t       * Detect if `Array#shift` and `Array#splice` augment array-like objects correctly.\n\t       *\n\t       * Firefox < 10, IE compatibility mode, and IE < 9 have buggy Array `shift()`\n\t       * and `splice()` functions that fail to remove the last element, `value[0]`,\n\t       * of array-like objects even though the `length` property is set to `0`.\n\t       * The `shift()` method is buggy in IE 8 compatibility mode, while `splice()`\n\t       * is buggy regardless of mode in IE < 9 and buggy in compatibility mode in IE 9.\n\t       *\n\t       * @memberOf _.support\n\t       * @type boolean\n\t       */\n\t      support.spliceObjects = (arrayRef.splice.call(object, 0, 1), !object[0]);\n\n\t      /**\n\t       * Detect lack of support for accessing string characters by index.\n\t       *\n\t       * IE < 8 can't access characters by index and IE 8 can only access\n\t       * characters by index on string literals.\n\t       *\n\t       * @memberOf _.support\n\t       * @type boolean\n\t       */\n\t      support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';\n\n\t      /**\n\t       * Detect if a DOM node's [[Class]] is resolvable (all but IE < 9)\n\t       * and that the JS engine errors when attempting to coerce an object to\n\t       * a string without a `toString` function.\n\t       *\n\t       * @memberOf _.support\n\t       * @type boolean\n\t       */\n\t      try {\n\t        support.nodeClass = !(toString.call(document) == objectClass && !({ 'toString': 0 } + ''));\n\t      } catch(e) {\n\t        support.nodeClass = true;\n\t      }\n\t    }(1));\n\n\t    /**\n\t     * By default, the template delimiters used by Lo-Dash are similar to those in\n\t     * embedded Ruby (ERB). Change the following template settings to use alternative\n\t     * delimiters.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @type Object\n\t     */\n\t    lodash.templateSettings = {\n\n\t      /**\n\t       * Used to detect `data` property values to be HTML-escaped.\n\t       *\n\t       * @memberOf _.templateSettings\n\t       * @type RegExp\n\t       */\n\t      'escape': /<%-([\\s\\S]+?)%>/g,\n\n\t      /**\n\t       * Used to detect code to be evaluated.\n\t       *\n\t       * @memberOf _.templateSettings\n\t       * @type RegExp\n\t       */\n\t      'evaluate': /<%([\\s\\S]+?)%>/g,\n\n\t      /**\n\t       * Used to detect `data` property values to inject.\n\t       *\n\t       * @memberOf _.templateSettings\n\t       * @type RegExp\n\t       */\n\t      'interpolate': reInterpolate,\n\n\t      /**\n\t       * Used to reference the data object in the template text.\n\t       *\n\t       * @memberOf _.templateSettings\n\t       * @type string\n\t       */\n\t      'variable': '',\n\n\t      /**\n\t       * Used to import variables into the compiled template.\n\t       *\n\t       * @memberOf _.templateSettings\n\t       * @type Object\n\t       */\n\t      'imports': {\n\n\t        /**\n\t         * A reference to the `lodash` function.\n\t         *\n\t         * @memberOf _.templateSettings.imports\n\t         * @type Function\n\t         */\n\t        '_': lodash\n\t      }\n\t    };\n\n\t    /*--------------------------------------------------------------------------*/\n\n\t    /**\n\t     * The template used to create iterator functions.\n\t     *\n\t     * @private\n\t     * @param {Object} data The data object used to populate the text.\n\t     * @returns {string} Returns the interpolated text.\n\t     */\n\t    var iteratorTemplate = function(obj) {\n\n\t      var __p = 'var index, iterable = ' +\n\t      (obj.firstArg) +\n\t      ', result = ' +\n\t      (obj.init) +\n\t      ';\\nif (!iterable) return result;\\n' +\n\t      (obj.top) +\n\t      ';';\n\t       if (obj.array) {\n\t      __p += '\\nvar length = iterable.length; index = -1;\\nif (' +\n\t      (obj.array) +\n\t      ') {  ';\n\t       if (support.unindexedChars) {\n\t      __p += '\\n  if (isString(iterable)) {\\n    iterable = iterable.split(\\'\\')\\n  }  ';\n\t       }\n\t      __p += '\\n  while (++index < length) {\\n    ' +\n\t      (obj.loop) +\n\t      ';\\n  }\\n}\\nelse {  ';\n\t       } else if (support.nonEnumArgs) {\n\t      __p += '\\n  var length = iterable.length; index = -1;\\n  if (length && isArguments(iterable)) {\\n    while (++index < length) {\\n      index += \\'\\';\\n      ' +\n\t      (obj.loop) +\n\t      ';\\n    }\\n  } else {  ';\n\t       }\n\n\t       if (support.enumPrototypes) {\n\t      __p += '\\n  var skipProto = typeof iterable == \\'function\\';\\n  ';\n\t       }\n\n\t       if (support.enumErrorProps) {\n\t      __p += '\\n  var skipErrorProps = iterable === errorProto || iterable instanceof Error;\\n  ';\n\t       }\n\n\t          var conditions = [];    if (support.enumPrototypes) { conditions.push('!(skipProto && index == \"prototype\")'); }    if (support.enumErrorProps)  { conditions.push('!(skipErrorProps && (index == \"message\" || index == \"name\"))'); }\n\n\t       if (obj.useHas && obj.keys) {\n\t      __p += '\\n  var ownIndex = -1,\\n      ownProps = objectTypes[typeof iterable] && keys(iterable),\\n      length = ownProps ? ownProps.length : 0;\\n\\n  while (++ownIndex < length) {\\n    index = ownProps[ownIndex];\\n';\n\t          if (conditions.length) {\n\t      __p += '    if (' +\n\t      (conditions.join(' && ')) +\n\t      ') {\\n  ';\n\t       }\n\t      __p +=\n\t      (obj.loop) +\n\t      ';    ';\n\t       if (conditions.length) {\n\t      __p += '\\n    }';\n\t       }\n\t      __p += '\\n  }  ';\n\t       } else {\n\t      __p += '\\n  for (index in iterable) {\\n';\n\t          if (obj.useHas) { conditions.push(\"hasOwnProperty.call(iterable, index)\"); }    if (conditions.length) {\n\t      __p += '    if (' +\n\t      (conditions.join(' && ')) +\n\t      ') {\\n  ';\n\t       }\n\t      __p +=\n\t      (obj.loop) +\n\t      ';    ';\n\t       if (conditions.length) {\n\t      __p += '\\n    }';\n\t       }\n\t      __p += '\\n  }    ';\n\t       if (support.nonEnumShadows) {\n\t      __p += '\\n\\n  if (iterable !== objectProto) {\\n    var ctor = iterable.constructor,\\n        isProto = iterable === (ctor && ctor.prototype),\\n        className = iterable === stringProto ? stringClass : iterable === errorProto ? errorClass : toString.call(iterable),\\n        nonEnum = nonEnumProps[className];\\n      ';\n\t       for (k = 0; k < 7; k++) {\n\t      __p += '\\n    index = \\'' +\n\t      (obj.shadowedProps[k]) +\n\t      '\\';\\n    if ((!(isProto && nonEnum[index]) && hasOwnProperty.call(iterable, index))';\n\t              if (!obj.useHas) {\n\t      __p += ' || (!nonEnum[index] && iterable[index] !== objectProto[index])';\n\t       }\n\t      __p += ') {\\n      ' +\n\t      (obj.loop) +\n\t      ';\\n    }      ';\n\t       }\n\t      __p += '\\n  }    ';\n\t       }\n\n\t       }\n\n\t       if (obj.array || support.nonEnumArgs) {\n\t      __p += '\\n}';\n\t       }\n\t      __p +=\n\t      (obj.bottom) +\n\t      ';\\nreturn result';\n\n\t      return __p\n\t    };\n\n\t    /*--------------------------------------------------------------------------*/\n\n\t    /**\n\t     * The base implementation of `_.bind` that creates the bound function and\n\t     * sets its meta data.\n\t     *\n\t     * @private\n\t     * @param {Array} bindData The bind data array.\n\t     * @returns {Function} Returns the new bound function.\n\t     */\n\t    function baseBind(bindData) {\n\t      var func = bindData[0],\n\t          partialArgs = bindData[2],\n\t          thisArg = bindData[4];\n\n\t      function bound() {\n\t        // `Function#bind` spec\n\t        // http://es5.github.io/#x15.3.4.5\n\t        if (partialArgs) {\n\t          // avoid `arguments` object deoptimizations by using `slice` instead\n\t          // of `Array.prototype.slice.call` and not assigning `arguments` to a\n\t          // variable as a ternary expression\n\t          var args = slice(partialArgs);\n\t          push.apply(args, arguments);\n\t        }\n\t        // mimic the constructor's `return` behavior\n\t        // http://es5.github.io/#x13.2.2\n\t        if (this instanceof bound) {\n\t          // ensure `new bound` is an instance of `func`\n\t          var thisBinding = baseCreate(func.prototype),\n\t              result = func.apply(thisBinding, args || arguments);\n\t          return isObject(result) ? result : thisBinding;\n\t        }\n\t        return func.apply(thisArg, args || arguments);\n\t      }\n\t      setBindData(bound, bindData);\n\t      return bound;\n\t    }\n\n\t    /**\n\t     * The base implementation of `_.clone` without argument juggling or support\n\t     * for `thisArg` binding.\n\t     *\n\t     * @private\n\t     * @param {*} value The value to clone.\n\t     * @param {boolean} [isDeep=false] Specify a deep clone.\n\t     * @param {Function} [callback] The function to customize cloning values.\n\t     * @param {Array} [stackA=[]] Tracks traversed source objects.\n\t     * @param {Array} [stackB=[]] Associates clones with source counterparts.\n\t     * @returns {*} Returns the cloned value.\n\t     */\n\t    function baseClone(value, isDeep, callback, stackA, stackB) {\n\t      if (callback) {\n\t        var result = callback(value);\n\t        if (typeof result != 'undefined') {\n\t          return result;\n\t        }\n\t      }\n\t      // inspect [[Class]]\n\t      var isObj = isObject(value);\n\t      if (isObj) {\n\t        var className = toString.call(value);\n\t        if (!cloneableClasses[className] || (!support.nodeClass && isNode(value))) {\n\t          return value;\n\t        }\n\t        var ctor = ctorByClass[className];\n\t        switch (className) {\n\t          case boolClass:\n\t          case dateClass:\n\t            return new ctor(+value);\n\n\t          case numberClass:\n\t          case stringClass:\n\t            return new ctor(value);\n\n\t          case regexpClass:\n\t            result = ctor(value.source, reFlags.exec(value));\n\t            result.lastIndex = value.lastIndex;\n\t            return result;\n\t        }\n\t      } else {\n\t        return value;\n\t      }\n\t      var isArr = isArray(value);\n\t      if (isDeep) {\n\t        // check for circular references and return corresponding clone\n\t        var initedStack = !stackA;\n\t        stackA || (stackA = getArray());\n\t        stackB || (stackB = getArray());\n\n\t        var length = stackA.length;\n\t        while (length--) {\n\t          if (stackA[length] == value) {\n\t            return stackB[length];\n\t          }\n\t        }\n\t        result = isArr ? ctor(value.length) : {};\n\t      }\n\t      else {\n\t        result = isArr ? slice(value) : assign({}, value);\n\t      }\n\t      // add array properties assigned by `RegExp#exec`\n\t      if (isArr) {\n\t        if (hasOwnProperty.call(value, 'index')) {\n\t          result.index = value.index;\n\t        }\n\t        if (hasOwnProperty.call(value, 'input')) {\n\t          result.input = value.input;\n\t        }\n\t      }\n\t      // exit for shallow clone\n\t      if (!isDeep) {\n\t        return result;\n\t      }\n\t      // add the source value to the stack of traversed objects\n\t      // and associate it with its clone\n\t      stackA.push(value);\n\t      stackB.push(result);\n\n\t      // recursively populate clone (susceptible to call stack limits)\n\t      (isArr ? baseEach : forOwn)(value, function(objValue, key) {\n\t        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);\n\t      });\n\n\t      if (initedStack) {\n\t        releaseArray(stackA);\n\t        releaseArray(stackB);\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * The base implementation of `_.create` without support for assigning\n\t     * properties to the created object.\n\t     *\n\t     * @private\n\t     * @param {Object} prototype The object to inherit from.\n\t     * @returns {Object} Returns the new object.\n\t     */\n\t    function baseCreate(prototype, properties) {\n\t      return isObject(prototype) ? nativeCreate(prototype) : {};\n\t    }\n\t    // fallback for browsers without `Object.create`\n\t    if (!nativeCreate) {\n\t      baseCreate = (function() {\n\t        function Object() {}\n\t        return function(prototype) {\n\t          if (isObject(prototype)) {\n\t            Object.prototype = prototype;\n\t            var result = new Object;\n\t            Object.prototype = null;\n\t          }\n\t          return result || context.Object();\n\t        };\n\t      }());\n\t    }\n\n\t    /**\n\t     * The base implementation of `_.createCallback` without support for creating\n\t     * \"_.pluck\" or \"_.where\" style callbacks.\n\t     *\n\t     * @private\n\t     * @param {*} [func=identity] The value to convert to a callback.\n\t     * @param {*} [thisArg] The `this` binding of the created callback.\n\t     * @param {number} [argCount] The number of arguments the callback accepts.\n\t     * @returns {Function} Returns a callback function.\n\t     */\n\t    function baseCreateCallback(func, thisArg, argCount) {\n\t      if (typeof func != 'function') {\n\t        return identity;\n\t      }\n\t      // exit early for no `thisArg` or already bound by `Function#bind`\n\t      if (typeof thisArg == 'undefined' || !('prototype' in func)) {\n\t        return func;\n\t      }\n\t      var bindData = func.__bindData__;\n\t      if (typeof bindData == 'undefined') {\n\t        if (support.funcNames) {\n\t          bindData = !func.name;\n\t        }\n\t        bindData = bindData || !support.funcDecomp;\n\t        if (!bindData) {\n\t          var source = fnToString.call(func);\n\t          if (!support.funcNames) {\n\t            bindData = !reFuncName.test(source);\n\t          }\n\t          if (!bindData) {\n\t            // checks if `func` references the `this` keyword and stores the result\n\t            bindData = reThis.test(source);\n\t            setBindData(func, bindData);\n\t          }\n\t        }\n\t      }\n\t      // exit early if there are no `this` references or `func` is bound\n\t      if (bindData === false || (bindData !== true && bindData[1] & 1)) {\n\t        return func;\n\t      }\n\t      switch (argCount) {\n\t        case 1: return function(value) {\n\t          return func.call(thisArg, value);\n\t        };\n\t        case 2: return function(a, b) {\n\t          return func.call(thisArg, a, b);\n\t        };\n\t        case 3: return function(value, index, collection) {\n\t          return func.call(thisArg, value, index, collection);\n\t        };\n\t        case 4: return function(accumulator, value, index, collection) {\n\t          return func.call(thisArg, accumulator, value, index, collection);\n\t        };\n\t      }\n\t      return bind(func, thisArg);\n\t    }\n\n\t    /**\n\t     * The base implementation of `createWrapper` that creates the wrapper and\n\t     * sets its meta data.\n\t     *\n\t     * @private\n\t     * @param {Array} bindData The bind data array.\n\t     * @returns {Function} Returns the new function.\n\t     */\n\t    function baseCreateWrapper(bindData) {\n\t      var func = bindData[0],\n\t          bitmask = bindData[1],\n\t          partialArgs = bindData[2],\n\t          partialRightArgs = bindData[3],\n\t          thisArg = bindData[4],\n\t          arity = bindData[5];\n\n\t      var isBind = bitmask & 1,\n\t          isBindKey = bitmask & 2,\n\t          isCurry = bitmask & 4,\n\t          isCurryBound = bitmask & 8,\n\t          key = func;\n\n\t      function bound() {\n\t        var thisBinding = isBind ? thisArg : this;\n\t        if (partialArgs) {\n\t          var args = slice(partialArgs);\n\t          push.apply(args, arguments);\n\t        }\n\t        if (partialRightArgs || isCurry) {\n\t          args || (args = slice(arguments));\n\t          if (partialRightArgs) {\n\t            push.apply(args, partialRightArgs);\n\t          }\n\t          if (isCurry && args.length < arity) {\n\t            bitmask |= 16 & ~32;\n\t            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);\n\t          }\n\t        }\n\t        args || (args = arguments);\n\t        if (isBindKey) {\n\t          func = thisBinding[key];\n\t        }\n\t        if (this instanceof bound) {\n\t          thisBinding = baseCreate(func.prototype);\n\t          var result = func.apply(thisBinding, args);\n\t          return isObject(result) ? result : thisBinding;\n\t        }\n\t        return func.apply(thisBinding, args);\n\t      }\n\t      setBindData(bound, bindData);\n\t      return bound;\n\t    }\n\n\t    /**\n\t     * The base implementation of `_.difference` that accepts a single array\n\t     * of values to exclude.\n\t     *\n\t     * @private\n\t     * @param {Array} array The array to process.\n\t     * @param {Array} [values] The array of values to exclude.\n\t     * @returns {Array} Returns a new array of filtered values.\n\t     */\n\t    function baseDifference(array, values) {\n\t      var index = -1,\n\t          indexOf = getIndexOf(),\n\t          length = array ? array.length : 0,\n\t          isLarge = length >= largeArraySize && indexOf === baseIndexOf,\n\t          result = [];\n\n\t      if (isLarge) {\n\t        var cache = createCache(values);\n\t        if (cache) {\n\t          indexOf = cacheIndexOf;\n\t          values = cache;\n\t        } else {\n\t          isLarge = false;\n\t        }\n\t      }\n\t      while (++index < length) {\n\t        var value = array[index];\n\t        if (indexOf(values, value) < 0) {\n\t          result.push(value);\n\t        }\n\t      }\n\t      if (isLarge) {\n\t        releaseObject(values);\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * The base implementation of `_.flatten` without support for callback\n\t     * shorthands or `thisArg` binding.\n\t     *\n\t     * @private\n\t     * @param {Array} array The array to flatten.\n\t     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.\n\t     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.\n\t     * @param {number} [fromIndex=0] The index to start from.\n\t     * @returns {Array} Returns a new flattened array.\n\t     */\n\t    function baseFlatten(array, isShallow, isStrict, fromIndex) {\n\t      var index = (fromIndex || 0) - 1,\n\t          length = array ? array.length : 0,\n\t          result = [];\n\n\t      while (++index < length) {\n\t        var value = array[index];\n\n\t        if (value && typeof value == 'object' && typeof value.length == 'number'\n\t            && (isArray(value) || isArguments(value))) {\n\t          // recursively flatten arrays (susceptible to call stack limits)\n\t          if (!isShallow) {\n\t            value = baseFlatten(value, isShallow, isStrict);\n\t          }\n\t          var valIndex = -1,\n\t              valLength = value.length,\n\t              resIndex = result.length;\n\n\t          result.length += valLength;\n\t          while (++valIndex < valLength) {\n\t            result[resIndex++] = value[valIndex];\n\t          }\n\t        } else if (!isStrict) {\n\t          result.push(value);\n\t        }\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * The base implementation of `_.isEqual`, without support for `thisArg` binding,\n\t     * that allows partial \"_.where\" style comparisons.\n\t     *\n\t     * @private\n\t     * @param {*} a The value to compare.\n\t     * @param {*} b The other value to compare.\n\t     * @param {Function} [callback] The function to customize comparing values.\n\t     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.\n\t     * @param {Array} [stackA=[]] Tracks traversed `a` objects.\n\t     * @param {Array} [stackB=[]] Tracks traversed `b` objects.\n\t     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n\t     */\n\t    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {\n\t      // used to indicate that when comparing objects, `a` has at least the properties of `b`\n\t      if (callback) {\n\t        var result = callback(a, b);\n\t        if (typeof result != 'undefined') {\n\t          return !!result;\n\t        }\n\t      }\n\t      // exit early for identical values\n\t      if (a === b) {\n\t        // treat `+0` vs. `-0` as not equal\n\t        return a !== 0 || (1 / a == 1 / b);\n\t      }\n\t      var type = typeof a,\n\t          otherType = typeof b;\n\n\t      // exit early for unlike primitive values\n\t      if (a === a &&\n\t          !(a && objectTypes[type]) &&\n\t          !(b && objectTypes[otherType])) {\n\t        return false;\n\t      }\n\t      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior\n\t      // http://es5.github.io/#x15.3.4.4\n\t      if (a == null || b == null) {\n\t        return a === b;\n\t      }\n\t      // compare [[Class]] names\n\t      var className = toString.call(a),\n\t          otherClass = toString.call(b);\n\n\t      if (className == argsClass) {\n\t        className = objectClass;\n\t      }\n\t      if (otherClass == argsClass) {\n\t        otherClass = objectClass;\n\t      }\n\t      if (className != otherClass) {\n\t        return false;\n\t      }\n\t      switch (className) {\n\t        case boolClass:\n\t        case dateClass:\n\t          // coerce dates and booleans to numbers, dates to milliseconds and booleans\n\t          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal\n\t          return +a == +b;\n\n\t        case numberClass:\n\t          // treat `NaN` vs. `NaN` as equal\n\t          return (a != +a)\n\t            ? b != +b\n\t            // but treat `+0` vs. `-0` as not equal\n\t            : (a == 0 ? (1 / a == 1 / b) : a == +b);\n\n\t        case regexpClass:\n\t        case stringClass:\n\t          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)\n\t          // treat string primitives and their corresponding object instances as equal\n\t          return a == String(b);\n\t      }\n\t      var isArr = className == arrayClass;\n\t      if (!isArr) {\n\t        // unwrap any `lodash` wrapped values\n\t        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),\n\t            bWrapped = hasOwnProperty.call(b, '__wrapped__');\n\n\t        if (aWrapped || bWrapped) {\n\t          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);\n\t        }\n\t        // exit for functions and DOM nodes\n\t        if (className != objectClass || (!support.nodeClass && (isNode(a) || isNode(b)))) {\n\t          return false;\n\t        }\n\t        // in older versions of Opera, `arguments` objects have `Array` constructors\n\t        var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor,\n\t            ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;\n\n\t        // non `Object` object instances with different constructors are not equal\n\t        if (ctorA != ctorB &&\n\t              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&\n\t              ('constructor' in a && 'constructor' in b)\n\t            ) {\n\t          return false;\n\t        }\n\t      }\n\t      // assume cyclic structures are equal\n\t      // the algorithm for detecting cyclic structures is adapted from ES 5.1\n\t      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)\n\t      var initedStack = !stackA;\n\t      stackA || (stackA = getArray());\n\t      stackB || (stackB = getArray());\n\n\t      var length = stackA.length;\n\t      while (length--) {\n\t        if (stackA[length] == a) {\n\t          return stackB[length] == b;\n\t        }\n\t      }\n\t      var size = 0;\n\t      result = true;\n\n\t      // add `a` and `b` to the stack of traversed objects\n\t      stackA.push(a);\n\t      stackB.push(b);\n\n\t      // recursively compare objects and arrays (susceptible to call stack limits)\n\t      if (isArr) {\n\t        // compare lengths to determine if a deep comparison is necessary\n\t        length = a.length;\n\t        size = b.length;\n\t        result = size == length;\n\n\t        if (result || isWhere) {\n\t          // deep compare the contents, ignoring non-numeric properties\n\t          while (size--) {\n\t            var index = length,\n\t                value = b[size];\n\n\t            if (isWhere) {\n\t              while (index--) {\n\t                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {\n\t                  break;\n\t                }\n\t              }\n\t            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {\n\t              break;\n\t            }\n\t          }\n\t        }\n\t      }\n\t      else {\n\t        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`\n\t        // which, in this case, is more costly\n\t        forIn(b, function(value, key, b) {\n\t          if (hasOwnProperty.call(b, key)) {\n\t            // count the number of properties.\n\t            size++;\n\t            // deep compare each property value.\n\t            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));\n\t          }\n\t        });\n\n\t        if (result && !isWhere) {\n\t          // ensure both objects have the same number of properties\n\t          forIn(a, function(value, key, a) {\n\t            if (hasOwnProperty.call(a, key)) {\n\t              // `size` will be `-1` if `a` has more properties than `b`\n\t              return (result = --size > -1);\n\t            }\n\t          });\n\t        }\n\t      }\n\t      stackA.pop();\n\t      stackB.pop();\n\n\t      if (initedStack) {\n\t        releaseArray(stackA);\n\t        releaseArray(stackB);\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * The base implementation of `_.merge` without argument juggling or support\n\t     * for `thisArg` binding.\n\t     *\n\t     * @private\n\t     * @param {Object} object The destination object.\n\t     * @param {Object} source The source object.\n\t     * @param {Function} [callback] The function to customize merging properties.\n\t     * @param {Array} [stackA=[]] Tracks traversed source objects.\n\t     * @param {Array} [stackB=[]] Associates values with source counterparts.\n\t     */\n\t    function baseMerge(object, source, callback, stackA, stackB) {\n\t      (isArray(source) ? forEach : forOwn)(source, function(source, key) {\n\t        var found,\n\t            isArr,\n\t            result = source,\n\t            value = object[key];\n\n\t        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {\n\t          // avoid merging previously merged cyclic sources\n\t          var stackLength = stackA.length;\n\t          while (stackLength--) {\n\t            if ((found = stackA[stackLength] == source)) {\n\t              value = stackB[stackLength];\n\t              break;\n\t            }\n\t          }\n\t          if (!found) {\n\t            var isShallow;\n\t            if (callback) {\n\t              result = callback(value, source);\n\t              if ((isShallow = typeof result != 'undefined')) {\n\t                value = result;\n\t              }\n\t            }\n\t            if (!isShallow) {\n\t              value = isArr\n\t                ? (isArray(value) ? value : [])\n\t                : (isPlainObject(value) ? value : {});\n\t            }\n\t            // add `source` and associated `value` to the stack of traversed objects\n\t            stackA.push(source);\n\t            stackB.push(value);\n\n\t            // recursively merge objects and arrays (susceptible to call stack limits)\n\t            if (!isShallow) {\n\t              baseMerge(value, source, callback, stackA, stackB);\n\t            }\n\t          }\n\t        }\n\t        else {\n\t          if (callback) {\n\t            result = callback(value, source);\n\t            if (typeof result == 'undefined') {\n\t              result = source;\n\t            }\n\t          }\n\t          if (typeof result != 'undefined') {\n\t            value = result;\n\t          }\n\t        }\n\t        object[key] = value;\n\t      });\n\t    }\n\n\t    /**\n\t     * The base implementation of `_.random` without argument juggling or support\n\t     * for returning floating-point numbers.\n\t     *\n\t     * @private\n\t     * @param {number} min The minimum possible value.\n\t     * @param {number} max The maximum possible value.\n\t     * @returns {number} Returns a random number.\n\t     */\n\t    function baseRandom(min, max) {\n\t      return min + floor(nativeRandom() * (max - min + 1));\n\t    }\n\n\t    /**\n\t     * The base implementation of `_.uniq` without support for callback shorthands\n\t     * or `thisArg` binding.\n\t     *\n\t     * @private\n\t     * @param {Array} array The array to process.\n\t     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.\n\t     * @param {Function} [callback] The function called per iteration.\n\t     * @returns {Array} Returns a duplicate-value-free array.\n\t     */\n\t    function baseUniq(array, isSorted, callback) {\n\t      var index = -1,\n\t          indexOf = getIndexOf(),\n\t          length = array ? array.length : 0,\n\t          result = [];\n\n\t      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,\n\t          seen = (callback || isLarge) ? getArray() : result;\n\n\t      if (isLarge) {\n\t        var cache = createCache(seen);\n\t        indexOf = cacheIndexOf;\n\t        seen = cache;\n\t      }\n\t      while (++index < length) {\n\t        var value = array[index],\n\t            computed = callback ? callback(value, index, array) : value;\n\n\t        if (isSorted\n\t              ? !index || seen[seen.length - 1] !== computed\n\t              : indexOf(seen, computed) < 0\n\t            ) {\n\t          if (callback || isLarge) {\n\t            seen.push(computed);\n\t          }\n\t          result.push(value);\n\t        }\n\t      }\n\t      if (isLarge) {\n\t        releaseArray(seen.array);\n\t        releaseObject(seen);\n\t      } else if (callback) {\n\t        releaseArray(seen);\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Creates a function that aggregates a collection, creating an object composed\n\t     * of keys generated from the results of running each element of the collection\n\t     * through a callback. The given `setter` function sets the keys and values\n\t     * of the composed object.\n\t     *\n\t     * @private\n\t     * @param {Function} setter The setter function.\n\t     * @returns {Function} Returns the new aggregator function.\n\t     */\n\t    function createAggregator(setter) {\n\t      return function(collection, callback, thisArg) {\n\t        var result = {};\n\t        callback = lodash.createCallback(callback, thisArg, 3);\n\n\t        if (isArray(collection)) {\n\t          var index = -1,\n\t              length = collection.length;\n\n\t          while (++index < length) {\n\t            var value = collection[index];\n\t            setter(result, value, callback(value, index, collection), collection);\n\t          }\n\t        } else {\n\t          baseEach(collection, function(value, key, collection) {\n\t            setter(result, value, callback(value, key, collection), collection);\n\t          });\n\t        }\n\t        return result;\n\t      };\n\t    }\n\n\t    /**\n\t     * Creates a function that, when called, either curries or invokes `func`\n\t     * with an optional `this` binding and partially applied arguments.\n\t     *\n\t     * @private\n\t     * @param {Function|string} func The function or method name to reference.\n\t     * @param {number} bitmask The bitmask of method flags to compose.\n\t     *  The bitmask may be composed of the following flags:\n\t     *  1 - `_.bind`\n\t     *  2 - `_.bindKey`\n\t     *  4 - `_.curry`\n\t     *  8 - `_.curry` (bound)\n\t     *  16 - `_.partial`\n\t     *  32 - `_.partialRight`\n\t     * @param {Array} [partialArgs] An array of arguments to prepend to those\n\t     *  provided to the new function.\n\t     * @param {Array} [partialRightArgs] An array of arguments to append to those\n\t     *  provided to the new function.\n\t     * @param {*} [thisArg] The `this` binding of `func`.\n\t     * @param {number} [arity] The arity of `func`.\n\t     * @returns {Function} Returns the new function.\n\t     */\n\t    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {\n\t      var isBind = bitmask & 1,\n\t          isBindKey = bitmask & 2,\n\t          isCurry = bitmask & 4,\n\t          isCurryBound = bitmask & 8,\n\t          isPartial = bitmask & 16,\n\t          isPartialRight = bitmask & 32;\n\n\t      if (!isBindKey && !isFunction(func)) {\n\t        throw new TypeError;\n\t      }\n\t      if (isPartial && !partialArgs.length) {\n\t        bitmask &= ~16;\n\t        isPartial = partialArgs = false;\n\t      }\n\t      if (isPartialRight && !partialRightArgs.length) {\n\t        bitmask &= ~32;\n\t        isPartialRight = partialRightArgs = false;\n\t      }\n\t      var bindData = func && func.__bindData__;\n\t      if (bindData && bindData !== true) {\n\t        // clone `bindData`\n\t        bindData = slice(bindData);\n\t        if (bindData[2]) {\n\t          bindData[2] = slice(bindData[2]);\n\t        }\n\t        if (bindData[3]) {\n\t          bindData[3] = slice(bindData[3]);\n\t        }\n\t        // set `thisBinding` is not previously bound\n\t        if (isBind && !(bindData[1] & 1)) {\n\t          bindData[4] = thisArg;\n\t        }\n\t        // set if previously bound but not currently (subsequent curried functions)\n\t        if (!isBind && bindData[1] & 1) {\n\t          bitmask |= 8;\n\t        }\n\t        // set curried arity if not yet set\n\t        if (isCurry && !(bindData[1] & 4)) {\n\t          bindData[5] = arity;\n\t        }\n\t        // append partial left arguments\n\t        if (isPartial) {\n\t          push.apply(bindData[2] || (bindData[2] = []), partialArgs);\n\t        }\n\t        // append partial right arguments\n\t        if (isPartialRight) {\n\t          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);\n\t        }\n\t        // merge flags\n\t        bindData[1] |= bitmask;\n\t        return createWrapper.apply(null, bindData);\n\t      }\n\t      // fast path for `_.bind`\n\t      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;\n\t      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);\n\t    }\n\n\t    /**\n\t     * Creates compiled iteration functions.\n\t     *\n\t     * @private\n\t     * @param {...Object} [options] The compile options object(s).\n\t     * @param {string} [options.array] Code to determine if the iterable is an array or array-like.\n\t     * @param {boolean} [options.useHas] Specify using `hasOwnProperty` checks in the object loop.\n\t     * @param {Function} [options.keys] A reference to `_.keys` for use in own property iteration.\n\t     * @param {string} [options.args] A comma separated string of iteration function arguments.\n\t     * @param {string} [options.top] Code to execute before the iteration branches.\n\t     * @param {string} [options.loop] Code to execute in the object loop.\n\t     * @param {string} [options.bottom] Code to execute after the iteration branches.\n\t     * @returns {Function} Returns the compiled function.\n\t     */\n\t    function createIterator() {\n\t      // data properties\n\t      iteratorData.shadowedProps = shadowedProps;\n\n\t      // iterator options\n\t      iteratorData.array = iteratorData.bottom = iteratorData.loop = iteratorData.top = '';\n\t      iteratorData.init = 'iterable';\n\t      iteratorData.useHas = true;\n\n\t      // merge options into a template data object\n\t      for (var object, index = 0; object = arguments[index]; index++) {\n\t        for (var key in object) {\n\t          iteratorData[key] = object[key];\n\t        }\n\t      }\n\t      var args = iteratorData.args;\n\t      iteratorData.firstArg = /^[^,]+/.exec(args)[0];\n\n\t      // create the function factory\n\t      var factory = Function(\n\t          'baseCreateCallback, errorClass, errorProto, hasOwnProperty, ' +\n\t          'indicatorObject, isArguments, isArray, isString, keys, objectProto, ' +\n\t          'objectTypes, nonEnumProps, stringClass, stringProto, toString',\n\t        'return function(' + args + ') {\\n' + iteratorTemplate(iteratorData) + '\\n}'\n\t      );\n\n\t      // return the compiled function\n\t      return factory(\n\t        baseCreateCallback, errorClass, errorProto, hasOwnProperty,\n\t        indicatorObject, isArguments, isArray, isString, iteratorData.keys, objectProto,\n\t        objectTypes, nonEnumProps, stringClass, stringProto, toString\n\t      );\n\t    }\n\n\t    /**\n\t     * Used by `escape` to convert characters to HTML entities.\n\t     *\n\t     * @private\n\t     * @param {string} match The matched character to escape.\n\t     * @returns {string} Returns the escaped character.\n\t     */\n\t    function escapeHtmlChar(match) {\n\t      return htmlEscapes[match];\n\t    }\n\n\t    /**\n\t     * Gets the appropriate \"indexOf\" function. If the `_.indexOf` method is\n\t     * customized, this method returns the custom method, otherwise it returns\n\t     * the `baseIndexOf` function.\n\t     *\n\t     * @private\n\t     * @returns {Function} Returns the \"indexOf\" function.\n\t     */\n\t    function getIndexOf() {\n\t      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Checks if `value` is a native function.\n\t     *\n\t     * @private\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.\n\t     */\n\t    function isNative(value) {\n\t      return typeof value == 'function' && reNative.test(value);\n\t    }\n\n\t    /**\n\t     * Sets `this` binding data on a given function.\n\t     *\n\t     * @private\n\t     * @param {Function} func The function to set data on.\n\t     * @param {Array} value The data array to set.\n\t     */\n\t    var setBindData = !defineProperty ? noop : function(func, value) {\n\t      descriptor.value = value;\n\t      defineProperty(func, '__bindData__', descriptor);\n\t      descriptor.value = null;\n\t    };\n\n\t    /**\n\t     * A fallback implementation of `isPlainObject` which checks if a given value\n\t     * is an object created by the `Object` constructor, assuming objects created\n\t     * by the `Object` constructor have no inherited enumerable properties and that\n\t     * there are no `Object.prototype` extensions.\n\t     *\n\t     * @private\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n\t     */\n\t    function shimIsPlainObject(value) {\n\t      var ctor,\n\t          result;\n\n\t      // avoid non Object objects, `arguments` objects, and DOM elements\n\t      if (!(value && toString.call(value) == objectClass) ||\n\t          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor)) ||\n\t          (!support.argsClass && isArguments(value)) ||\n\t          (!support.nodeClass && isNode(value))) {\n\t        return false;\n\t      }\n\t      // IE < 9 iterates inherited properties before own properties. If the first\n\t      // iterated property is an object's own property then there are no inherited\n\t      // enumerable properties.\n\t      if (support.ownLast) {\n\t        forIn(value, function(value, key, object) {\n\t          result = hasOwnProperty.call(object, key);\n\t          return false;\n\t        });\n\t        return result !== false;\n\t      }\n\t      // In most environments an object's own properties are iterated before\n\t      // its inherited properties. If the last iterated property is an object's\n\t      // own property then there are no inherited enumerable properties.\n\t      forIn(value, function(value, key) {\n\t        result = key;\n\t      });\n\t      return typeof result == 'undefined' || hasOwnProperty.call(value, result);\n\t    }\n\n\t    /**\n\t     * Used by `unescape` to convert HTML entities to characters.\n\t     *\n\t     * @private\n\t     * @param {string} match The matched character to unescape.\n\t     * @returns {string} Returns the unescaped character.\n\t     */\n\t    function unescapeHtmlChar(match) {\n\t      return htmlUnescapes[match];\n\t    }\n\n\t    /*--------------------------------------------------------------------------*/\n\n\t    /**\n\t     * Checks if `value` is an `arguments` object.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.\n\t     * @example\n\t     *\n\t     * (function() { return _.isArguments(arguments); })(1, 2, 3);\n\t     * // => true\n\t     *\n\t     * _.isArguments([1, 2, 3]);\n\t     * // => false\n\t     */\n\t    function isArguments(value) {\n\t      return value && typeof value == 'object' && typeof value.length == 'number' &&\n\t        toString.call(value) == argsClass || false;\n\t    }\n\t    // fallback for browsers that can't detect `arguments` objects by [[Class]]\n\t    if (!support.argsClass) {\n\t      isArguments = function(value) {\n\t        return value && typeof value == 'object' && typeof value.length == 'number' &&\n\t          hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee') || false;\n\t      };\n\t    }\n\n\t    /**\n\t     * Checks if `value` is an array.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @type Function\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.\n\t     * @example\n\t     *\n\t     * (function() { return _.isArray(arguments); })();\n\t     * // => false\n\t     *\n\t     * _.isArray([1, 2, 3]);\n\t     * // => true\n\t     */\n\t    var isArray = nativeIsArray || function(value) {\n\t      return value && typeof value == 'object' && typeof value.length == 'number' &&\n\t        toString.call(value) == arrayClass || false;\n\t    };\n\n\t    /**\n\t     * A fallback implementation of `Object.keys` which produces an array of the\n\t     * given object's own enumerable property names.\n\t     *\n\t     * @private\n\t     * @type Function\n\t     * @param {Object} object The object to inspect.\n\t     * @returns {Array} Returns an array of property names.\n\t     */\n\t    var shimKeys = createIterator({\n\t      'args': 'object',\n\t      'init': '[]',\n\t      'top': 'if (!(objectTypes[typeof object])) return result',\n\t      'loop': 'result.push(index)'\n\t    });\n\n\t    /**\n\t     * Creates an array composed of the own enumerable property names of an object.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Object} object The object to inspect.\n\t     * @returns {Array} Returns an array of property names.\n\t     * @example\n\t     *\n\t     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });\n\t     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)\n\t     */\n\t    var keys = !nativeKeys ? shimKeys : function(object) {\n\t      if (!isObject(object)) {\n\t        return [];\n\t      }\n\t      if ((support.enumPrototypes && typeof object == 'function') ||\n\t          (support.nonEnumArgs && object.length && isArguments(object))) {\n\t        return shimKeys(object);\n\t      }\n\t      return nativeKeys(object);\n\t    };\n\n\t    /** Reusable iterator options shared by `each`, `forIn`, and `forOwn` */\n\t    var eachIteratorOptions = {\n\t      'args': 'collection, callback, thisArg',\n\t      'top': \"callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3)\",\n\t      'array': \"typeof length == 'number'\",\n\t      'keys': keys,\n\t      'loop': 'if (callback(iterable[index], index, collection) === false) return result'\n\t    };\n\n\t    /** Reusable iterator options for `assign` and `defaults` */\n\t    var defaultsIteratorOptions = {\n\t      'args': 'object, source, guard',\n\t      'top':\n\t        'var args = arguments,\\n' +\n\t        '    argsIndex = 0,\\n' +\n\t        \"    argsLength = typeof guard == 'number' ? 2 : args.length;\\n\" +\n\t        'while (++argsIndex < argsLength) {\\n' +\n\t        '  iterable = args[argsIndex];\\n' +\n\t        '  if (iterable && objectTypes[typeof iterable]) {',\n\t      'keys': keys,\n\t      'loop': \"if (typeof result[index] == 'undefined') result[index] = iterable[index]\",\n\t      'bottom': '  }\\n}'\n\t    };\n\n\t    /** Reusable iterator options for `forIn` and `forOwn` */\n\t    var forOwnIteratorOptions = {\n\t      'top': 'if (!objectTypes[typeof iterable]) return result;\\n' + eachIteratorOptions.top,\n\t      'array': false\n\t    };\n\n\t    /**\n\t     * Used to convert characters to HTML entities:\n\t     *\n\t     * Though the `>` character is escaped for symmetry, characters like `>` and `/`\n\t     * don't require escaping in HTML and have no special meaning unless they're part\n\t     * of a tag or an unquoted attribute value.\n\t     * http://mathiasbynens.be/notes/ambiguous-ampersands (under \"semi-related fun fact\")\n\t     */\n\t    var htmlEscapes = {\n\t      '&': '&amp;',\n\t      '<': '&lt;',\n\t      '>': '&gt;',\n\t      '\"': '&quot;',\n\t      \"'\": '&#39;'\n\t    };\n\n\t    /** Used to convert HTML entities to characters */\n\t    var htmlUnescapes = invert(htmlEscapes);\n\n\t    /** Used to match HTML entities and HTML characters */\n\t    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),\n\t        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');\n\n\t    /**\n\t     * A function compiled to iterate `arguments` objects, arrays, objects, and\n\t     * strings consistenly across environments, executing the callback for each\n\t     * element in the collection. The callback is bound to `thisArg` and invoked\n\t     * with three arguments; (value, index|key, collection). Callbacks may exit\n\t     * iteration early by explicitly returning `false`.\n\t     *\n\t     * @private\n\t     * @type Function\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function} [callback=identity] The function called per iteration.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Array|Object|string} Returns `collection`.\n\t     */\n\t    var baseEach = createIterator(eachIteratorOptions);\n\n\t    /*--------------------------------------------------------------------------*/\n\n\t    /**\n\t     * Assigns own enumerable properties of source object(s) to the destination\n\t     * object. Subsequent sources will overwrite property assignments of previous\n\t     * sources. If a callback is provided it will be executed to produce the\n\t     * assigned values. The callback is bound to `thisArg` and invoked with two\n\t     * arguments; (objectValue, sourceValue).\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @type Function\n\t     * @alias extend\n\t     * @category Objects\n\t     * @param {Object} object The destination object.\n\t     * @param {...Object} [source] The source objects.\n\t     * @param {Function} [callback] The function to customize assigning values.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Object} Returns the destination object.\n\t     * @example\n\t     *\n\t     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });\n\t     * // => { 'name': 'fred', 'employer': 'slate' }\n\t     *\n\t     * var defaults = _.partialRight(_.assign, function(a, b) {\n\t     *   return typeof a == 'undefined' ? b : a;\n\t     * });\n\t     *\n\t     * var object = { 'name': 'barney' };\n\t     * defaults(object, { 'name': 'fred', 'employer': 'slate' });\n\t     * // => { 'name': 'barney', 'employer': 'slate' }\n\t     */\n\t    var assign = createIterator(defaultsIteratorOptions, {\n\t      'top':\n\t        defaultsIteratorOptions.top.replace(';',\n\t          ';\\n' +\n\t          \"if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\\n\" +\n\t          '  var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);\\n' +\n\t          \"} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\\n\" +\n\t          '  callback = args[--argsLength];\\n' +\n\t          '}'\n\t        ),\n\t      'loop': 'result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]'\n\t    });\n\n\t    /**\n\t     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also\n\t     * be cloned, otherwise they will be assigned by reference. If a callback\n\t     * is provided it will be executed to produce the cloned values. If the\n\t     * callback returns `undefined` cloning will be handled by the method instead.\n\t     * The callback is bound to `thisArg` and invoked with one argument; (value).\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to clone.\n\t     * @param {boolean} [isDeep=false] Specify a deep clone.\n\t     * @param {Function} [callback] The function to customize cloning values.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {*} Returns the cloned value.\n\t     * @example\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney', 'age': 36 },\n\t     *   { 'name': 'fred',   'age': 40 }\n\t     * ];\n\t     *\n\t     * var shallow = _.clone(characters);\n\t     * shallow[0] === characters[0];\n\t     * // => true\n\t     *\n\t     * var deep = _.clone(characters, true);\n\t     * deep[0] === characters[0];\n\t     * // => false\n\t     *\n\t     * _.mixin({\n\t     *   'clone': _.partialRight(_.clone, function(value) {\n\t     *     return _.isElement(value) ? value.cloneNode(false) : undefined;\n\t     *   })\n\t     * });\n\t     *\n\t     * var clone = _.clone(document.body);\n\t     * clone.childNodes.length;\n\t     * // => 0\n\t     */\n\t    function clone(value, isDeep, callback, thisArg) {\n\t      // allows working with \"Collections\" methods without using their `index`\n\t      // and `collection` arguments for `isDeep` and `callback`\n\t      if (typeof isDeep != 'boolean' && isDeep != null) {\n\t        thisArg = callback;\n\t        callback = isDeep;\n\t        isDeep = false;\n\t      }\n\t      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));\n\t    }\n\n\t    /**\n\t     * Creates a deep clone of `value`. If a callback is provided it will be\n\t     * executed to produce the cloned values. If the callback returns `undefined`\n\t     * cloning will be handled by the method instead. The callback is bound to\n\t     * `thisArg` and invoked with one argument; (value).\n\t     *\n\t     * Note: This method is loosely based on the structured clone algorithm. Functions\n\t     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and\n\t     * objects created by constructors other than `Object` are cloned to plain `Object` objects.\n\t     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to deep clone.\n\t     * @param {Function} [callback] The function to customize cloning values.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {*} Returns the deep cloned value.\n\t     * @example\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney', 'age': 36 },\n\t     *   { 'name': 'fred',   'age': 40 }\n\t     * ];\n\t     *\n\t     * var deep = _.cloneDeep(characters);\n\t     * deep[0] === characters[0];\n\t     * // => false\n\t     *\n\t     * var view = {\n\t     *   'label': 'docs',\n\t     *   'node': element\n\t     * };\n\t     *\n\t     * var clone = _.cloneDeep(view, function(value) {\n\t     *   return _.isElement(value) ? value.cloneNode(true) : undefined;\n\t     * });\n\t     *\n\t     * clone.node == view.node;\n\t     * // => false\n\t     */\n\t    function cloneDeep(value, callback, thisArg) {\n\t      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));\n\t    }\n\n\t    /**\n\t     * Creates an object that inherits from the given `prototype` object. If a\n\t     * `properties` object is provided its own enumerable properties are assigned\n\t     * to the created object.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Object} prototype The object to inherit from.\n\t     * @param {Object} [properties] The properties to assign to the object.\n\t     * @returns {Object} Returns the new object.\n\t     * @example\n\t     *\n\t     * function Shape() {\n\t     *   this.x = 0;\n\t     *   this.y = 0;\n\t     * }\n\t     *\n\t     * function Circle() {\n\t     *   Shape.call(this);\n\t     * }\n\t     *\n\t     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });\n\t     *\n\t     * var circle = new Circle;\n\t     * circle instanceof Circle;\n\t     * // => true\n\t     *\n\t     * circle instanceof Shape;\n\t     * // => true\n\t     */\n\t    function create(prototype, properties) {\n\t      var result = baseCreate(prototype);\n\t      return properties ? assign(result, properties) : result;\n\t    }\n\n\t    /**\n\t     * Assigns own enumerable properties of source object(s) to the destination\n\t     * object for all destination properties that resolve to `undefined`. Once a\n\t     * property is set, additional defaults of the same property will be ignored.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @type Function\n\t     * @category Objects\n\t     * @param {Object} object The destination object.\n\t     * @param {...Object} [source] The source objects.\n\t     * @param- {Object} [guard] Allows working with `_.reduce` without using its\n\t     *  `key` and `object` arguments as sources.\n\t     * @returns {Object} Returns the destination object.\n\t     * @example\n\t     *\n\t     * var object = { 'name': 'barney' };\n\t     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });\n\t     * // => { 'name': 'barney', 'employer': 'slate' }\n\t     */\n\t    var defaults = createIterator(defaultsIteratorOptions);\n\n\t    /**\n\t     * This method is like `_.findIndex` except that it returns the key of the\n\t     * first element that passes the callback check, instead of the element itself.\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Object} object The object to search.\n\t     * @param {Function|Object|string} [callback=identity] The function called per\n\t     *  iteration. If a property name or object is provided it will be used to\n\t     *  create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {string|undefined} Returns the key of the found element, else `undefined`.\n\t     * @example\n\t     *\n\t     * var characters = {\n\t     *   'barney': {  'age': 36, 'blocked': false },\n\t     *   'fred': {    'age': 40, 'blocked': true },\n\t     *   'pebbles': { 'age': 1,  'blocked': false }\n\t     * };\n\t     *\n\t     * _.findKey(characters, function(chr) {\n\t     *   return chr.age < 40;\n\t     * });\n\t     * // => 'barney' (property order is not guaranteed across environments)\n\t     *\n\t     * // using \"_.where\" callback shorthand\n\t     * _.findKey(characters, { 'age': 1 });\n\t     * // => 'pebbles'\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.findKey(characters, 'blocked');\n\t     * // => 'fred'\n\t     */\n\t    function findKey(object, callback, thisArg) {\n\t      var result;\n\t      callback = lodash.createCallback(callback, thisArg, 3);\n\t      forOwn(object, function(value, key, object) {\n\t        if (callback(value, key, object)) {\n\t          result = key;\n\t          return false;\n\t        }\n\t      });\n\t      return result;\n\t    }\n\n\t    /**\n\t     * This method is like `_.findKey` except that it iterates over elements\n\t     * of a `collection` in the opposite order.\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Object} object The object to search.\n\t     * @param {Function|Object|string} [callback=identity] The function called per\n\t     *  iteration. If a property name or object is provided it will be used to\n\t     *  create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {string|undefined} Returns the key of the found element, else `undefined`.\n\t     * @example\n\t     *\n\t     * var characters = {\n\t     *   'barney': {  'age': 36, 'blocked': true },\n\t     *   'fred': {    'age': 40, 'blocked': false },\n\t     *   'pebbles': { 'age': 1,  'blocked': true }\n\t     * };\n\t     *\n\t     * _.findLastKey(characters, function(chr) {\n\t     *   return chr.age < 40;\n\t     * });\n\t     * // => returns `pebbles`, assuming `_.findKey` returns `barney`\n\t     *\n\t     * // using \"_.where\" callback shorthand\n\t     * _.findLastKey(characters, { 'age': 40 });\n\t     * // => 'fred'\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.findLastKey(characters, 'blocked');\n\t     * // => 'pebbles'\n\t     */\n\t    function findLastKey(object, callback, thisArg) {\n\t      var result;\n\t      callback = lodash.createCallback(callback, thisArg, 3);\n\t      forOwnRight(object, function(value, key, object) {\n\t        if (callback(value, key, object)) {\n\t          result = key;\n\t          return false;\n\t        }\n\t      });\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Iterates over own and inherited enumerable properties of an object,\n\t     * executing the callback for each property. The callback is bound to `thisArg`\n\t     * and invoked with three arguments; (value, key, object). Callbacks may exit\n\t     * iteration early by explicitly returning `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @type Function\n\t     * @category Objects\n\t     * @param {Object} object The object to iterate over.\n\t     * @param {Function} [callback=identity] The function called per iteration.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Object} Returns `object`.\n\t     * @example\n\t     *\n\t     * function Shape() {\n\t     *   this.x = 0;\n\t     *   this.y = 0;\n\t     * }\n\t     *\n\t     * Shape.prototype.move = function(x, y) {\n\t     *   this.x += x;\n\t     *   this.y += y;\n\t     * };\n\t     *\n\t     * _.forIn(new Shape, function(value, key) {\n\t     *   console.log(key);\n\t     * });\n\t     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)\n\t     */\n\t    var forIn = createIterator(eachIteratorOptions, forOwnIteratorOptions, {\n\t      'useHas': false\n\t    });\n\n\t    /**\n\t     * This method is like `_.forIn` except that it iterates over elements\n\t     * of a `collection` in the opposite order.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Object} object The object to iterate over.\n\t     * @param {Function} [callback=identity] The function called per iteration.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Object} Returns `object`.\n\t     * @example\n\t     *\n\t     * function Shape() {\n\t     *   this.x = 0;\n\t     *   this.y = 0;\n\t     * }\n\t     *\n\t     * Shape.prototype.move = function(x, y) {\n\t     *   this.x += x;\n\t     *   this.y += y;\n\t     * };\n\t     *\n\t     * _.forInRight(new Shape, function(value, key) {\n\t     *   console.log(key);\n\t     * });\n\t     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'\n\t     */\n\t    function forInRight(object, callback, thisArg) {\n\t      var pairs = [];\n\n\t      forIn(object, function(value, key) {\n\t        pairs.push(key, value);\n\t      });\n\n\t      var length = pairs.length;\n\t      callback = baseCreateCallback(callback, thisArg, 3);\n\t      while (length--) {\n\t        if (callback(pairs[length--], pairs[length], object) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return object;\n\t    }\n\n\t    /**\n\t     * Iterates over own enumerable properties of an object, executing the callback\n\t     * for each property. The callback is bound to `thisArg` and invoked with three\n\t     * arguments; (value, key, object). Callbacks may exit iteration early by\n\t     * explicitly returning `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @type Function\n\t     * @category Objects\n\t     * @param {Object} object The object to iterate over.\n\t     * @param {Function} [callback=identity] The function called per iteration.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Object} Returns `object`.\n\t     * @example\n\t     *\n\t     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n\t     *   console.log(key);\n\t     * });\n\t     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)\n\t     */\n\t    var forOwn = createIterator(eachIteratorOptions, forOwnIteratorOptions);\n\n\t    /**\n\t     * This method is like `_.forOwn` except that it iterates over elements\n\t     * of a `collection` in the opposite order.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Object} object The object to iterate over.\n\t     * @param {Function} [callback=identity] The function called per iteration.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Object} Returns `object`.\n\t     * @example\n\t     *\n\t     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n\t     *   console.log(key);\n\t     * });\n\t     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'\n\t     */\n\t    function forOwnRight(object, callback, thisArg) {\n\t      var props = keys(object),\n\t          length = props.length;\n\n\t      callback = baseCreateCallback(callback, thisArg, 3);\n\t      while (length--) {\n\t        var key = props[length];\n\t        if (callback(object[key], key, object) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return object;\n\t    }\n\n\t    /**\n\t     * Creates a sorted array of property names of all enumerable properties,\n\t     * own and inherited, of `object` that have function values.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias methods\n\t     * @category Objects\n\t     * @param {Object} object The object to inspect.\n\t     * @returns {Array} Returns an array of property names that have function values.\n\t     * @example\n\t     *\n\t     * _.functions(_);\n\t     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]\n\t     */\n\t    function functions(object) {\n\t      var result = [];\n\t      forIn(object, function(value, key) {\n\t        if (isFunction(value)) {\n\t          result.push(key);\n\t        }\n\t      });\n\t      return result.sort();\n\t    }\n\n\t    /**\n\t     * Checks if the specified property name exists as a direct property of `object`,\n\t     * instead of an inherited property.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Object} object The object to inspect.\n\t     * @param {string} key The name of the property to check.\n\t     * @returns {boolean} Returns `true` if key is a direct property, else `false`.\n\t     * @example\n\t     *\n\t     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');\n\t     * // => true\n\t     */\n\t    function has(object, key) {\n\t      return object ? hasOwnProperty.call(object, key) : false;\n\t    }\n\n\t    /**\n\t     * Creates an object composed of the inverted keys and values of the given object.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Object} object The object to invert.\n\t     * @returns {Object} Returns the created inverted object.\n\t     * @example\n\t     *\n\t     * _.invert({ 'first': 'fred', 'second': 'barney' });\n\t     * // => { 'fred': 'first', 'barney': 'second' }\n\t     */\n\t    function invert(object) {\n\t      var index = -1,\n\t          props = keys(object),\n\t          length = props.length,\n\t          result = {};\n\n\t      while (++index < length) {\n\t        var key = props[index];\n\t        result[object[key]] = key;\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Checks if `value` is a boolean value.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.\n\t     * @example\n\t     *\n\t     * _.isBoolean(null);\n\t     * // => false\n\t     */\n\t    function isBoolean(value) {\n\t      return value === true || value === false ||\n\t        value && typeof value == 'object' && toString.call(value) == boolClass || false;\n\t    }\n\n\t    /**\n\t     * Checks if `value` is a date.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.\n\t     * @example\n\t     *\n\t     * _.isDate(new Date);\n\t     * // => true\n\t     */\n\t    function isDate(value) {\n\t      return value && typeof value == 'object' && toString.call(value) == dateClass || false;\n\t    }\n\n\t    /**\n\t     * Checks if `value` is a DOM element.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.\n\t     * @example\n\t     *\n\t     * _.isElement(document.body);\n\t     * // => true\n\t     */\n\t    function isElement(value) {\n\t      return value && value.nodeType === 1 || false;\n\t    }\n\n\t    /**\n\t     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a\n\t     * length of `0` and objects with no own enumerable properties are considered\n\t     * \"empty\".\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Array|Object|string} value The value to inspect.\n\t     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.\n\t     * @example\n\t     *\n\t     * _.isEmpty([1, 2, 3]);\n\t     * // => false\n\t     *\n\t     * _.isEmpty({});\n\t     * // => true\n\t     *\n\t     * _.isEmpty('');\n\t     * // => true\n\t     */\n\t    function isEmpty(value) {\n\t      var result = true;\n\t      if (!value) {\n\t        return result;\n\t      }\n\t      var className = toString.call(value),\n\t          length = value.length;\n\n\t      if ((className == arrayClass || className == stringClass ||\n\t          (support.argsClass ? className == argsClass : isArguments(value))) ||\n\t          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {\n\t        return !length;\n\t      }\n\t      forOwn(value, function() {\n\t        return (result = false);\n\t      });\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Performs a deep comparison between two values to determine if they are\n\t     * equivalent to each other. If a callback is provided it will be executed\n\t     * to compare values. If the callback returns `undefined` comparisons will\n\t     * be handled by the method instead. The callback is bound to `thisArg` and\n\t     * invoked with two arguments; (a, b).\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} a The value to compare.\n\t     * @param {*} b The other value to compare.\n\t     * @param {Function} [callback] The function to customize comparing values.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n\t     * @example\n\t     *\n\t     * var object = { 'name': 'fred' };\n\t     * var copy = { 'name': 'fred' };\n\t     *\n\t     * object == copy;\n\t     * // => false\n\t     *\n\t     * _.isEqual(object, copy);\n\t     * // => true\n\t     *\n\t     * var words = ['hello', 'goodbye'];\n\t     * var otherWords = ['hi', 'goodbye'];\n\t     *\n\t     * _.isEqual(words, otherWords, function(a, b) {\n\t     *   var reGreet = /^(?:hello|hi)$/i,\n\t     *       aGreet = _.isString(a) && reGreet.test(a),\n\t     *       bGreet = _.isString(b) && reGreet.test(b);\n\t     *\n\t     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;\n\t     * });\n\t     * // => true\n\t     */\n\t    function isEqual(a, b, callback, thisArg) {\n\t      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));\n\t    }\n\n\t    /**\n\t     * Checks if `value` is, or can be coerced to, a finite number.\n\t     *\n\t     * Note: This is not the same as native `isFinite` which will return true for\n\t     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.\n\t     * @example\n\t     *\n\t     * _.isFinite(-101);\n\t     * // => true\n\t     *\n\t     * _.isFinite('10');\n\t     * // => true\n\t     *\n\t     * _.isFinite(true);\n\t     * // => false\n\t     *\n\t     * _.isFinite('');\n\t     * // => false\n\t     *\n\t     * _.isFinite(Infinity);\n\t     * // => false\n\t     */\n\t    function isFinite(value) {\n\t      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));\n\t    }\n\n\t    /**\n\t     * Checks if `value` is a function.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.\n\t     * @example\n\t     *\n\t     * _.isFunction(_);\n\t     * // => true\n\t     */\n\t    function isFunction(value) {\n\t      return typeof value == 'function';\n\t    }\n\t    // fallback for older versions of Chrome and Safari\n\t    if (isFunction(/x/)) {\n\t      isFunction = function(value) {\n\t        return typeof value == 'function' && toString.call(value) == funcClass;\n\t      };\n\t    }\n\n\t    /**\n\t     * Checks if `value` is the language type of Object.\n\t     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.\n\t     * @example\n\t     *\n\t     * _.isObject({});\n\t     * // => true\n\t     *\n\t     * _.isObject([1, 2, 3]);\n\t     * // => true\n\t     *\n\t     * _.isObject(1);\n\t     * // => false\n\t     */\n\t    function isObject(value) {\n\t      // check if the value is the ECMAScript language type of Object\n\t      // http://es5.github.io/#x8\n\t      // and avoid a V8 bug\n\t      // http://code.google.com/p/v8/issues/detail?id=2291\n\t      return !!(value && objectTypes[typeof value]);\n\t    }\n\n\t    /**\n\t     * Checks if `value` is `NaN`.\n\t     *\n\t     * Note: This is not the same as native `isNaN` which will return `true` for\n\t     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.\n\t     * @example\n\t     *\n\t     * _.isNaN(NaN);\n\t     * // => true\n\t     *\n\t     * _.isNaN(new Number(NaN));\n\t     * // => true\n\t     *\n\t     * isNaN(undefined);\n\t     * // => true\n\t     *\n\t     * _.isNaN(undefined);\n\t     * // => false\n\t     */\n\t    function isNaN(value) {\n\t      // `NaN` as a primitive is the only value that is not equal to itself\n\t      // (perform the [[Class]] check first to avoid errors with some host objects in IE)\n\t      return isNumber(value) && value != +value;\n\t    }\n\n\t    /**\n\t     * Checks if `value` is `null`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.\n\t     * @example\n\t     *\n\t     * _.isNull(null);\n\t     * // => true\n\t     *\n\t     * _.isNull(undefined);\n\t     * // => false\n\t     */\n\t    function isNull(value) {\n\t      return value === null;\n\t    }\n\n\t    /**\n\t     * Checks if `value` is a number.\n\t     *\n\t     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.\n\t     * @example\n\t     *\n\t     * _.isNumber(8.4 * 5);\n\t     * // => true\n\t     */\n\t    function isNumber(value) {\n\t      return typeof value == 'number' ||\n\t        value && typeof value == 'object' && toString.call(value) == numberClass || false;\n\t    }\n\n\t    /**\n\t     * Checks if `value` is an object created by the `Object` constructor.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n\t     * @example\n\t     *\n\t     * function Shape() {\n\t     *   this.x = 0;\n\t     *   this.y = 0;\n\t     * }\n\t     *\n\t     * _.isPlainObject(new Shape);\n\t     * // => false\n\t     *\n\t     * _.isPlainObject([1, 2, 3]);\n\t     * // => false\n\t     *\n\t     * _.isPlainObject({ 'x': 0, 'y': 0 });\n\t     * // => true\n\t     */\n\t    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {\n\t      if (!(value && toString.call(value) == objectClass) || (!support.argsClass && isArguments(value))) {\n\t        return false;\n\t      }\n\t      var valueOf = value.valueOf,\n\t          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);\n\n\t      return objProto\n\t        ? (value == objProto || getPrototypeOf(value) == objProto)\n\t        : shimIsPlainObject(value);\n\t    };\n\n\t    /**\n\t     * Checks if `value` is a regular expression.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.\n\t     * @example\n\t     *\n\t     * _.isRegExp(/fred/);\n\t     * // => true\n\t     */\n\t    function isRegExp(value) {\n\t      return value && objectTypes[typeof value] && toString.call(value) == regexpClass || false;\n\t    }\n\n\t    /**\n\t     * Checks if `value` is a string.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.\n\t     * @example\n\t     *\n\t     * _.isString('fred');\n\t     * // => true\n\t     */\n\t    function isString(value) {\n\t      return typeof value == 'string' ||\n\t        value && typeof value == 'object' && toString.call(value) == stringClass || false;\n\t    }\n\n\t    /**\n\t     * Checks if `value` is `undefined`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {*} value The value to check.\n\t     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.\n\t     * @example\n\t     *\n\t     * _.isUndefined(void 0);\n\t     * // => true\n\t     */\n\t    function isUndefined(value) {\n\t      return typeof value == 'undefined';\n\t    }\n\n\t    /**\n\t     * Creates an object with the same keys as `object` and values generated by\n\t     * running each own enumerable property of `object` through the callback.\n\t     * The callback is bound to `thisArg` and invoked with three arguments;\n\t     * (value, key, object).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Object} object The object to iterate over.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Array} Returns a new object with values of the results of each `callback` execution.\n\t     * @example\n\t     *\n\t     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });\n\t     * // => { 'a': 3, 'b': 6, 'c': 9 }\n\t     *\n\t     * var characters = {\n\t     *   'fred': { 'name': 'fred', 'age': 40 },\n\t     *   'pebbles': { 'name': 'pebbles', 'age': 1 }\n\t     * };\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.mapValues(characters, 'age');\n\t     * // => { 'fred': 40, 'pebbles': 1 }\n\t     */\n\t    function mapValues(object, callback, thisArg) {\n\t      var result = {};\n\t      callback = lodash.createCallback(callback, thisArg, 3);\n\n\t      forOwn(object, function(value, key, object) {\n\t        result[key] = callback(value, key, object);\n\t      });\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Recursively merges own enumerable properties of the source object(s), that\n\t     * don't resolve to `undefined` into the destination object. Subsequent sources\n\t     * will overwrite property assignments of previous sources. If a callback is\n\t     * provided it will be executed to produce the merged values of the destination\n\t     * and source properties. If the callback returns `undefined` merging will\n\t     * be handled by the method instead. The callback is bound to `thisArg` and\n\t     * invoked with two arguments; (objectValue, sourceValue).\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Object} object The destination object.\n\t     * @param {...Object} [source] The source objects.\n\t     * @param {Function} [callback] The function to customize merging properties.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Object} Returns the destination object.\n\t     * @example\n\t     *\n\t     * var names = {\n\t     *   'characters': [\n\t     *     { 'name': 'barney' },\n\t     *     { 'name': 'fred' }\n\t     *   ]\n\t     * };\n\t     *\n\t     * var ages = {\n\t     *   'characters': [\n\t     *     { 'age': 36 },\n\t     *     { 'age': 40 }\n\t     *   ]\n\t     * };\n\t     *\n\t     * _.merge(names, ages);\n\t     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }\n\t     *\n\t     * var food = {\n\t     *   'fruits': ['apple'],\n\t     *   'vegetables': ['beet']\n\t     * };\n\t     *\n\t     * var otherFood = {\n\t     *   'fruits': ['banana'],\n\t     *   'vegetables': ['carrot']\n\t     * };\n\t     *\n\t     * _.merge(food, otherFood, function(a, b) {\n\t     *   return _.isArray(a) ? a.concat(b) : undefined;\n\t     * });\n\t     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }\n\t     */\n\t    function merge(object) {\n\t      var args = arguments,\n\t          length = 2;\n\n\t      if (!isObject(object)) {\n\t        return object;\n\t      }\n\t      // allows working with `_.reduce` and `_.reduceRight` without using\n\t      // their `index` and `collection` arguments\n\t      if (typeof args[2] != 'number') {\n\t        length = args.length;\n\t      }\n\t      if (length > 3 && typeof args[length - 2] == 'function') {\n\t        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);\n\t      } else if (length > 2 && typeof args[length - 1] == 'function') {\n\t        callback = args[--length];\n\t      }\n\t      var sources = slice(arguments, 1, length),\n\t          index = -1,\n\t          stackA = getArray(),\n\t          stackB = getArray();\n\n\t      while (++index < length) {\n\t        baseMerge(object, sources[index], callback, stackA, stackB);\n\t      }\n\t      releaseArray(stackA);\n\t      releaseArray(stackB);\n\t      return object;\n\t    }\n\n\t    /**\n\t     * Creates a shallow clone of `object` excluding the specified properties.\n\t     * Property names may be specified as individual arguments or as arrays of\n\t     * property names. If a callback is provided it will be executed for each\n\t     * property of `object` omitting the properties the callback returns truey\n\t     * for. The callback is bound to `thisArg` and invoked with three arguments;\n\t     * (value, key, object).\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Object} object The source object.\n\t     * @param {Function|...string|string[]} [callback] The properties to omit or the\n\t     *  function called per iteration.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Object} Returns an object without the omitted properties.\n\t     * @example\n\t     *\n\t     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');\n\t     * // => { 'name': 'fred' }\n\t     *\n\t     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {\n\t     *   return typeof value == 'number';\n\t     * });\n\t     * // => { 'name': 'fred' }\n\t     */\n\t    function omit(object, callback, thisArg) {\n\t      var result = {};\n\t      if (typeof callback != 'function') {\n\t        var props = [];\n\t        forIn(object, function(value, key) {\n\t          props.push(key);\n\t        });\n\t        props = baseDifference(props, baseFlatten(arguments, true, false, 1));\n\n\t        var index = -1,\n\t            length = props.length;\n\n\t        while (++index < length) {\n\t          var key = props[index];\n\t          result[key] = object[key];\n\t        }\n\t      } else {\n\t        callback = lodash.createCallback(callback, thisArg, 3);\n\t        forIn(object, function(value, key, object) {\n\t          if (!callback(value, key, object)) {\n\t            result[key] = value;\n\t          }\n\t        });\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Creates a two dimensional array of an object's key-value pairs,\n\t     * i.e. `[[key1, value1], [key2, value2]]`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Object} object The object to inspect.\n\t     * @returns {Array} Returns new array of key-value pairs.\n\t     * @example\n\t     *\n\t     * _.pairs({ 'barney': 36, 'fred': 40 });\n\t     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)\n\t     */\n\t    function pairs(object) {\n\t      var index = -1,\n\t          props = keys(object),\n\t          length = props.length,\n\t          result = Array(length);\n\n\t      while (++index < length) {\n\t        var key = props[index];\n\t        result[index] = [key, object[key]];\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Creates a shallow clone of `object` composed of the specified properties.\n\t     * Property names may be specified as individual arguments or as arrays of\n\t     * property names. If a callback is provided it will be executed for each\n\t     * property of `object` picking the properties the callback returns truey\n\t     * for. The callback is bound to `thisArg` and invoked with three arguments;\n\t     * (value, key, object).\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Object} object The source object.\n\t     * @param {Function|...string|string[]} [callback] The function called per\n\t     *  iteration or property names to pick, specified as individual property\n\t     *  names or arrays of property names.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Object} Returns an object composed of the picked properties.\n\t     * @example\n\t     *\n\t     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');\n\t     * // => { 'name': 'fred' }\n\t     *\n\t     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {\n\t     *   return key.charAt(0) != '_';\n\t     * });\n\t     * // => { 'name': 'fred' }\n\t     */\n\t    function pick(object, callback, thisArg) {\n\t      var result = {};\n\t      if (typeof callback != 'function') {\n\t        var index = -1,\n\t            props = baseFlatten(arguments, true, false, 1),\n\t            length = isObject(object) ? props.length : 0;\n\n\t        while (++index < length) {\n\t          var key = props[index];\n\t          if (key in object) {\n\t            result[key] = object[key];\n\t          }\n\t        }\n\t      } else {\n\t        callback = lodash.createCallback(callback, thisArg, 3);\n\t        forIn(object, function(value, key, object) {\n\t          if (callback(value, key, object)) {\n\t            result[key] = value;\n\t          }\n\t        });\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * An alternative to `_.reduce` this method transforms `object` to a new\n\t     * `accumulator` object which is the result of running each of its own\n\t     * enumerable properties through a callback, with each callback execution\n\t     * potentially mutating the `accumulator` object. The callback is bound to\n\t     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).\n\t     * Callbacks may exit iteration early by explicitly returning `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Array|Object} object The object to iterate over.\n\t     * @param {Function} [callback=identity] The function called per iteration.\n\t     * @param {*} [accumulator] The custom accumulator value.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {*} Returns the accumulated value.\n\t     * @example\n\t     *\n\t     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {\n\t     *   num *= num;\n\t     *   if (num % 2) {\n\t     *     return result.push(num) < 3;\n\t     *   }\n\t     * });\n\t     * // => [1, 9, 25]\n\t     *\n\t     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {\n\t     *   result[key] = num * 3;\n\t     * });\n\t     * // => { 'a': 3, 'b': 6, 'c': 9 }\n\t     */\n\t    function transform(object, callback, accumulator, thisArg) {\n\t      var isArr = isArray(object);\n\t      if (accumulator == null) {\n\t        if (isArr) {\n\t          accumulator = [];\n\t        } else {\n\t          var ctor = object && object.constructor,\n\t              proto = ctor && ctor.prototype;\n\n\t          accumulator = baseCreate(proto);\n\t        }\n\t      }\n\t      if (callback) {\n\t        callback = lodash.createCallback(callback, thisArg, 4);\n\t        (isArr ? baseEach : forOwn)(object, function(value, index, object) {\n\t          return callback(accumulator, value, index, object);\n\t        });\n\t      }\n\t      return accumulator;\n\t    }\n\n\t    /**\n\t     * Creates an array composed of the own enumerable property values of `object`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Objects\n\t     * @param {Object} object The object to inspect.\n\t     * @returns {Array} Returns an array of property values.\n\t     * @example\n\t     *\n\t     * _.values({ 'one': 1, 'two': 2, 'three': 3 });\n\t     * // => [1, 2, 3] (property order is not guaranteed across environments)\n\t     */\n\t    function values(object) {\n\t      var index = -1,\n\t          props = keys(object),\n\t          length = props.length,\n\t          result = Array(length);\n\n\t      while (++index < length) {\n\t        result[index] = object[props[index]];\n\t      }\n\t      return result;\n\t    }\n\n\t    /*--------------------------------------------------------------------------*/\n\n\t    /**\n\t     * Creates an array of elements from the specified indexes, or keys, of the\n\t     * `collection`. Indexes may be specified as individual arguments or as arrays\n\t     * of indexes.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`\n\t     *   to retrieve, specified as individual indexes or arrays of indexes.\n\t     * @returns {Array} Returns a new array of elements corresponding to the\n\t     *  provided indexes.\n\t     * @example\n\t     *\n\t     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);\n\t     * // => ['a', 'c', 'e']\n\t     *\n\t     * _.at(['fred', 'barney', 'pebbles'], 0, 2);\n\t     * // => ['fred', 'pebbles']\n\t     */\n\t    function at(collection) {\n\t      var args = arguments,\n\t          index = -1,\n\t          props = baseFlatten(args, true, false, 1),\n\t          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,\n\t          result = Array(length);\n\n\t      if (support.unindexedChars && isString(collection)) {\n\t        collection = collection.split('');\n\t      }\n\t      while(++index < length) {\n\t        result[index] = collection[props[index]];\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Checks if a given value is present in a collection using strict equality\n\t     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the\n\t     * offset from the end of the collection.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias include\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {*} target The value to check for.\n\t     * @param {number} [fromIndex=0] The index to search from.\n\t     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.\n\t     * @example\n\t     *\n\t     * _.contains([1, 2, 3], 1);\n\t     * // => true\n\t     *\n\t     * _.contains([1, 2, 3], 1, 2);\n\t     * // => false\n\t     *\n\t     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');\n\t     * // => true\n\t     *\n\t     * _.contains('pebbles', 'eb');\n\t     * // => true\n\t     */\n\t    function contains(collection, target, fromIndex) {\n\t      var index = -1,\n\t          indexOf = getIndexOf(),\n\t          length = collection ? collection.length : 0,\n\t          result = false;\n\n\t      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;\n\t      if (isArray(collection)) {\n\t        result = indexOf(collection, target, fromIndex) > -1;\n\t      } else if (typeof length == 'number') {\n\t        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;\n\t      } else {\n\t        baseEach(collection, function(value) {\n\t          if (++index >= fromIndex) {\n\t            return !(result = value === target);\n\t          }\n\t        });\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Creates an object composed of keys generated from the results of running\n\t     * each element of `collection` through the callback. The corresponding value\n\t     * of each key is the number of times the key was returned by the callback.\n\t     * The callback is bound to `thisArg` and invoked with three arguments;\n\t     * (value, index|key, collection).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Object} Returns the composed aggregate object.\n\t     * @example\n\t     *\n\t     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });\n\t     * // => { '4': 1, '6': 2 }\n\t     *\n\t     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n\t     * // => { '4': 1, '6': 2 }\n\t     *\n\t     * _.countBy(['one', 'two', 'three'], 'length');\n\t     * // => { '3': 2, '5': 1 }\n\t     */\n\t    var countBy = createAggregator(function(result, value, key) {\n\t      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);\n\t    });\n\n\t    /**\n\t     * Checks if the given callback returns truey value for **all** elements of\n\t     * a collection. The callback is bound to `thisArg` and invoked with three\n\t     * arguments; (value, index|key, collection).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias all\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {boolean} Returns `true` if all elements passed the callback check,\n\t     *  else `false`.\n\t     * @example\n\t     *\n\t     * _.every([true, 1, null, 'yes']);\n\t     * // => false\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney', 'age': 36 },\n\t     *   { 'name': 'fred',   'age': 40 }\n\t     * ];\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.every(characters, 'age');\n\t     * // => true\n\t     *\n\t     * // using \"_.where\" callback shorthand\n\t     * _.every(characters, { 'age': 36 });\n\t     * // => false\n\t     */\n\t    function every(collection, callback, thisArg) {\n\t      var result = true;\n\t      callback = lodash.createCallback(callback, thisArg, 3);\n\n\t      if (isArray(collection)) {\n\t        var index = -1,\n\t            length = collection.length;\n\n\t        while (++index < length) {\n\t          if (!(result = !!callback(collection[index], index, collection))) {\n\t            break;\n\t          }\n\t        }\n\t      } else {\n\t        baseEach(collection, function(value, index, collection) {\n\t          return (result = !!callback(value, index, collection));\n\t        });\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Iterates over elements of a collection, returning an array of all elements\n\t     * the callback returns truey for. The callback is bound to `thisArg` and\n\t     * invoked with three arguments; (value, index|key, collection).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias select\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Array} Returns a new array of elements that passed the callback check.\n\t     * @example\n\t     *\n\t     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n\t     * // => [2, 4, 6]\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney', 'age': 36, 'blocked': false },\n\t     *   { 'name': 'fred',   'age': 40, 'blocked': true }\n\t     * ];\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.filter(characters, 'blocked');\n\t     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]\n\t     *\n\t     * // using \"_.where\" callback shorthand\n\t     * _.filter(characters, { 'age': 36 });\n\t     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]\n\t     */\n\t    function filter(collection, callback, thisArg) {\n\t      var result = [];\n\t      callback = lodash.createCallback(callback, thisArg, 3);\n\n\t      if (isArray(collection)) {\n\t        var index = -1,\n\t            length = collection.length;\n\n\t        while (++index < length) {\n\t          var value = collection[index];\n\t          if (callback(value, index, collection)) {\n\t            result.push(value);\n\t          }\n\t        }\n\t      } else {\n\t        baseEach(collection, function(value, index, collection) {\n\t          if (callback(value, index, collection)) {\n\t            result.push(value);\n\t          }\n\t        });\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Iterates over elements of a collection, returning the first element that\n\t     * the callback returns truey for. The callback is bound to `thisArg` and\n\t     * invoked with three arguments; (value, index|key, collection).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias detect, findWhere\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {*} Returns the found element, else `undefined`.\n\t     * @example\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney',  'age': 36, 'blocked': false },\n\t     *   { 'name': 'fred',    'age': 40, 'blocked': true },\n\t     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }\n\t     * ];\n\t     *\n\t     * _.find(characters, function(chr) {\n\t     *   return chr.age < 40;\n\t     * });\n\t     * // => { 'name': 'barney', 'age': 36, 'blocked': false }\n\t     *\n\t     * // using \"_.where\" callback shorthand\n\t     * _.find(characters, { 'age': 1 });\n\t     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.find(characters, 'blocked');\n\t     * // => { 'name': 'fred', 'age': 40, 'blocked': true }\n\t     */\n\t    function find(collection, callback, thisArg) {\n\t      callback = lodash.createCallback(callback, thisArg, 3);\n\n\t      if (isArray(collection)) {\n\t        var index = -1,\n\t            length = collection.length;\n\n\t        while (++index < length) {\n\t          var value = collection[index];\n\t          if (callback(value, index, collection)) {\n\t            return value;\n\t          }\n\t        }\n\t      } else {\n\t        var result;\n\t        baseEach(collection, function(value, index, collection) {\n\t          if (callback(value, index, collection)) {\n\t            result = value;\n\t            return false;\n\t          }\n\t        });\n\t        return result;\n\t      }\n\t    }\n\n\t    /**\n\t     * This method is like `_.find` except that it iterates over elements\n\t     * of a `collection` from right to left.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {*} Returns the found element, else `undefined`.\n\t     * @example\n\t     *\n\t     * _.findLast([1, 2, 3, 4], function(num) {\n\t     *   return num % 2 == 1;\n\t     * });\n\t     * // => 3\n\t     */\n\t    function findLast(collection, callback, thisArg) {\n\t      var result;\n\t      callback = lodash.createCallback(callback, thisArg, 3);\n\t      forEachRight(collection, function(value, index, collection) {\n\t        if (callback(value, index, collection)) {\n\t          result = value;\n\t          return false;\n\t        }\n\t      });\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Iterates over elements of a collection, executing the callback for each\n\t     * element. The callback is bound to `thisArg` and invoked with three arguments;\n\t     * (value, index|key, collection). Callbacks may exit iteration early by\n\t     * explicitly returning `false`.\n\t     *\n\t     * Note: As with other \"Collections\" methods, objects with a `length` property\n\t     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\n\t     * may be used for object iteration.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias each\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function} [callback=identity] The function called per iteration.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Array|Object|string} Returns `collection`.\n\t     * @example\n\t     *\n\t     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');\n\t     * // => logs each number and returns '1,2,3'\n\t     *\n\t     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });\n\t     * // => logs each number and returns the object (property order is not guaranteed across environments)\n\t     */\n\t    function forEach(collection, callback, thisArg) {\n\t      if (callback && typeof thisArg == 'undefined' && isArray(collection)) {\n\t        var index = -1,\n\t            length = collection.length;\n\n\t        while (++index < length) {\n\t          if (callback(collection[index], index, collection) === false) {\n\t            break;\n\t          }\n\t        }\n\t      } else {\n\t        baseEach(collection, callback, thisArg);\n\t      }\n\t      return collection;\n\t    }\n\n\t    /**\n\t     * This method is like `_.forEach` except that it iterates over elements\n\t     * of a `collection` from right to left.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias eachRight\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function} [callback=identity] The function called per iteration.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Array|Object|string} Returns `collection`.\n\t     * @example\n\t     *\n\t     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');\n\t     * // => logs each number from right to left and returns '3,2,1'\n\t     */\n\t    function forEachRight(collection, callback, thisArg) {\n\t      var iterable = collection,\n\t          length = collection ? collection.length : 0;\n\n\t      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);\n\t      if (isArray(collection)) {\n\t        while (length--) {\n\t          if (callback(collection[length], length, collection) === false) {\n\t            break;\n\t          }\n\t        }\n\t      } else {\n\t        if (typeof length != 'number') {\n\t          var props = keys(collection);\n\t          length = props.length;\n\t        } else if (support.unindexedChars && isString(collection)) {\n\t          iterable = collection.split('');\n\t        }\n\t        baseEach(collection, function(value, key, collection) {\n\t          key = props ? props[--length] : --length;\n\t          return callback(iterable[key], key, collection);\n\t        });\n\t      }\n\t      return collection;\n\t    }\n\n\t    /**\n\t     * Creates an object composed of keys generated from the results of running\n\t     * each element of a collection through the callback. The corresponding value\n\t     * of each key is an array of the elements responsible for generating the key.\n\t     * The callback is bound to `thisArg` and invoked with three arguments;\n\t     * (value, index|key, collection).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Object} Returns the composed aggregate object.\n\t     * @example\n\t     *\n\t     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });\n\t     * // => { '4': [4.2], '6': [6.1, 6.4] }\n\t     *\n\t     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n\t     * // => { '4': [4.2], '6': [6.1, 6.4] }\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.groupBy(['one', 'two', 'three'], 'length');\n\t     * // => { '3': ['one', 'two'], '5': ['three'] }\n\t     */\n\t    var groupBy = createAggregator(function(result, value, key) {\n\t      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);\n\t    });\n\n\t    /**\n\t     * Creates an object composed of keys generated from the results of running\n\t     * each element of the collection through the given callback. The corresponding\n\t     * value of each key is the last element responsible for generating the key.\n\t     * The callback is bound to `thisArg` and invoked with three arguments;\n\t     * (value, index|key, collection).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Object} Returns the composed aggregate object.\n\t     * @example\n\t     *\n\t     * var keys = [\n\t     *   { 'dir': 'left', 'code': 97 },\n\t     *   { 'dir': 'right', 'code': 100 }\n\t     * ];\n\t     *\n\t     * _.indexBy(keys, 'dir');\n\t     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n\t     *\n\t     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });\n\t     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n\t     *\n\t     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);\n\t     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n\t     */\n\t    var indexBy = createAggregator(function(result, value, key) {\n\t      result[key] = value;\n\t    });\n\n\t    /**\n\t     * Invokes the method named by `methodName` on each element in the `collection`\n\t     * returning an array of the results of each invoked method. Additional arguments\n\t     * will be provided to each invoked method. If `methodName` is a function it\n\t     * will be invoked for, and `this` bound to, each element in the `collection`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|string} methodName The name of the method to invoke or\n\t     *  the function invoked per iteration.\n\t     * @param {...*} [arg] Arguments to invoke the method with.\n\t     * @returns {Array} Returns a new array of the results of each invoked method.\n\t     * @example\n\t     *\n\t     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n\t     * // => [[1, 5, 7], [1, 2, 3]]\n\t     *\n\t     * _.invoke([123, 456], String.prototype.split, '');\n\t     * // => [['1', '2', '3'], ['4', '5', '6']]\n\t     */\n\t    function invoke(collection, methodName) {\n\t      var args = slice(arguments, 2),\n\t          index = -1,\n\t          isFunc = typeof methodName == 'function',\n\t          length = collection ? collection.length : 0,\n\t          result = Array(typeof length == 'number' ? length : 0);\n\n\t      forEach(collection, function(value) {\n\t        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);\n\t      });\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Creates an array of values by running each element in the collection\n\t     * through the callback. The callback is bound to `thisArg` and invoked with\n\t     * three arguments; (value, index|key, collection).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias collect\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Array} Returns a new array of the results of each `callback` execution.\n\t     * @example\n\t     *\n\t     * _.map([1, 2, 3], function(num) { return num * 3; });\n\t     * // => [3, 6, 9]\n\t     *\n\t     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });\n\t     * // => [3, 6, 9] (property order is not guaranteed across environments)\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney', 'age': 36 },\n\t     *   { 'name': 'fred',   'age': 40 }\n\t     * ];\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.map(characters, 'name');\n\t     * // => ['barney', 'fred']\n\t     */\n\t    function map(collection, callback, thisArg) {\n\t      var index = -1,\n\t          length = collection ? collection.length : 0,\n\t          result = Array(typeof length == 'number' ? length : 0);\n\n\t      callback = lodash.createCallback(callback, thisArg, 3);\n\t      if (isArray(collection)) {\n\t        while (++index < length) {\n\t          result[index] = callback(collection[index], index, collection);\n\t        }\n\t      } else {\n\t        baseEach(collection, function(value, key, collection) {\n\t          result[++index] = callback(value, key, collection);\n\t        });\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Retrieves the maximum value of a collection. If the collection is empty or\n\t     * falsey `-Infinity` is returned. If a callback is provided it will be executed\n\t     * for each value in the collection to generate the criterion by which the value\n\t     * is ranked. The callback is bound to `thisArg` and invoked with three\n\t     * arguments; (value, index, collection).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {*} Returns the maximum value.\n\t     * @example\n\t     *\n\t     * _.max([4, 2, 8, 6]);\n\t     * // => 8\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney', 'age': 36 },\n\t     *   { 'name': 'fred',   'age': 40 }\n\t     * ];\n\t     *\n\t     * _.max(characters, function(chr) { return chr.age; });\n\t     * // => { 'name': 'fred', 'age': 40 };\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.max(characters, 'age');\n\t     * // => { 'name': 'fred', 'age': 40 };\n\t     */\n\t    function max(collection, callback, thisArg) {\n\t      var computed = -Infinity,\n\t          result = computed;\n\n\t      // allows working with functions like `_.map` without using\n\t      // their `index` argument as a callback\n\t      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {\n\t        callback = null;\n\t      }\n\t      if (callback == null && isArray(collection)) {\n\t        var index = -1,\n\t            length = collection.length;\n\n\t        while (++index < length) {\n\t          var value = collection[index];\n\t          if (value > result) {\n\t            result = value;\n\t          }\n\t        }\n\t      } else {\n\t        callback = (callback == null && isString(collection))\n\t          ? charAtCallback\n\t          : lodash.createCallback(callback, thisArg, 3);\n\n\t        baseEach(collection, function(value, index, collection) {\n\t          var current = callback(value, index, collection);\n\t          if (current > computed) {\n\t            computed = current;\n\t            result = value;\n\t          }\n\t        });\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Retrieves the minimum value of a collection. If the collection is empty or\n\t     * falsey `Infinity` is returned. If a callback is provided it will be executed\n\t     * for each value in the collection to generate the criterion by which the value\n\t     * is ranked. The callback is bound to `thisArg` and invoked with three\n\t     * arguments; (value, index, collection).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {*} Returns the minimum value.\n\t     * @example\n\t     *\n\t     * _.min([4, 2, 8, 6]);\n\t     * // => 2\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney', 'age': 36 },\n\t     *   { 'name': 'fred',   'age': 40 }\n\t     * ];\n\t     *\n\t     * _.min(characters, function(chr) { return chr.age; });\n\t     * // => { 'name': 'barney', 'age': 36 };\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.min(characters, 'age');\n\t     * // => { 'name': 'barney', 'age': 36 };\n\t     */\n\t    function min(collection, callback, thisArg) {\n\t      var computed = Infinity,\n\t          result = computed;\n\n\t      // allows working with functions like `_.map` without using\n\t      // their `index` argument as a callback\n\t      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {\n\t        callback = null;\n\t      }\n\t      if (callback == null && isArray(collection)) {\n\t        var index = -1,\n\t            length = collection.length;\n\n\t        while (++index < length) {\n\t          var value = collection[index];\n\t          if (value < result) {\n\t            result = value;\n\t          }\n\t        }\n\t      } else {\n\t        callback = (callback == null && isString(collection))\n\t          ? charAtCallback\n\t          : lodash.createCallback(callback, thisArg, 3);\n\n\t        baseEach(collection, function(value, index, collection) {\n\t          var current = callback(value, index, collection);\n\t          if (current < computed) {\n\t            computed = current;\n\t            result = value;\n\t          }\n\t        });\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Retrieves the value of a specified property from all elements in the collection.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @type Function\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {string} property The name of the property to pluck.\n\t     * @returns {Array} Returns a new array of property values.\n\t     * @example\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney', 'age': 36 },\n\t     *   { 'name': 'fred',   'age': 40 }\n\t     * ];\n\t     *\n\t     * _.pluck(characters, 'name');\n\t     * // => ['barney', 'fred']\n\t     */\n\t    var pluck = map;\n\n\t    /**\n\t     * Reduces a collection to a value which is the accumulated result of running\n\t     * each element in the collection through the callback, where each successive\n\t     * callback execution consumes the return value of the previous execution. If\n\t     * `accumulator` is not provided the first element of the collection will be\n\t     * used as the initial `accumulator` value. The callback is bound to `thisArg`\n\t     * and invoked with four arguments; (accumulator, value, index|key, collection).\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias foldl, inject\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function} [callback=identity] The function called per iteration.\n\t     * @param {*} [accumulator] Initial value of the accumulator.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {*} Returns the accumulated value.\n\t     * @example\n\t     *\n\t     * var sum = _.reduce([1, 2, 3], function(sum, num) {\n\t     *   return sum + num;\n\t     * });\n\t     * // => 6\n\t     *\n\t     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {\n\t     *   result[key] = num * 3;\n\t     *   return result;\n\t     * }, {});\n\t     * // => { 'a': 3, 'b': 6, 'c': 9 }\n\t     */\n\t    function reduce(collection, callback, accumulator, thisArg) {\n\t      var noaccum = arguments.length < 3;\n\t      callback = lodash.createCallback(callback, thisArg, 4);\n\n\t      if (isArray(collection)) {\n\t        var index = -1,\n\t            length = collection.length;\n\n\t        if (noaccum) {\n\t          accumulator = collection[++index];\n\t        }\n\t        while (++index < length) {\n\t          accumulator = callback(accumulator, collection[index], index, collection);\n\t        }\n\t      } else {\n\t        baseEach(collection, function(value, index, collection) {\n\t          accumulator = noaccum\n\t            ? (noaccum = false, value)\n\t            : callback(accumulator, value, index, collection)\n\t        });\n\t      }\n\t      return accumulator;\n\t    }\n\n\t    /**\n\t     * This method is like `_.reduce` except that it iterates over elements\n\t     * of a `collection` from right to left.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias foldr\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function} [callback=identity] The function called per iteration.\n\t     * @param {*} [accumulator] Initial value of the accumulator.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {*} Returns the accumulated value.\n\t     * @example\n\t     *\n\t     * var list = [[0, 1], [2, 3], [4, 5]];\n\t     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n\t     * // => [4, 5, 2, 3, 0, 1]\n\t     */\n\t    function reduceRight(collection, callback, accumulator, thisArg) {\n\t      var noaccum = arguments.length < 3;\n\t      callback = lodash.createCallback(callback, thisArg, 4);\n\t      forEachRight(collection, function(value, index, collection) {\n\t        accumulator = noaccum\n\t          ? (noaccum = false, value)\n\t          : callback(accumulator, value, index, collection);\n\t      });\n\t      return accumulator;\n\t    }\n\n\t    /**\n\t     * The opposite of `_.filter` this method returns the elements of a\n\t     * collection that the callback does **not** return truey for.\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Array} Returns a new array of elements that failed the callback check.\n\t     * @example\n\t     *\n\t     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n\t     * // => [1, 3, 5]\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney', 'age': 36, 'blocked': false },\n\t     *   { 'name': 'fred',   'age': 40, 'blocked': true }\n\t     * ];\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.reject(characters, 'blocked');\n\t     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]\n\t     *\n\t     * // using \"_.where\" callback shorthand\n\t     * _.reject(characters, { 'age': 36 });\n\t     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]\n\t     */\n\t    function reject(collection, callback, thisArg) {\n\t      callback = lodash.createCallback(callback, thisArg, 3);\n\t      return filter(collection, function(value, index, collection) {\n\t        return !callback(value, index, collection);\n\t      });\n\t    }\n\n\t    /**\n\t     * Retrieves a random element or `n` random elements from a collection.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to sample.\n\t     * @param {number} [n] The number of elements to sample.\n\t     * @param- {Object} [guard] Allows working with functions like `_.map`\n\t     *  without using their `index` arguments as `n`.\n\t     * @returns {Array} Returns the random sample(s) of `collection`.\n\t     * @example\n\t     *\n\t     * _.sample([1, 2, 3, 4]);\n\t     * // => 2\n\t     *\n\t     * _.sample([1, 2, 3, 4], 2);\n\t     * // => [3, 1]\n\t     */\n\t    function sample(collection, n, guard) {\n\t      if (collection && typeof collection.length != 'number') {\n\t        collection = values(collection);\n\t      } else if (support.unindexedChars && isString(collection)) {\n\t        collection = collection.split('');\n\t      }\n\t      if (n == null || guard) {\n\t        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;\n\t      }\n\t      var result = shuffle(collection);\n\t      result.length = nativeMin(nativeMax(0, n), result.length);\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Creates an array of shuffled values, using a version of the Fisher-Yates\n\t     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to shuffle.\n\t     * @returns {Array} Returns a new shuffled collection.\n\t     * @example\n\t     *\n\t     * _.shuffle([1, 2, 3, 4, 5, 6]);\n\t     * // => [4, 1, 6, 3, 5, 2]\n\t     */\n\t    function shuffle(collection) {\n\t      var index = -1,\n\t          length = collection ? collection.length : 0,\n\t          result = Array(typeof length == 'number' ? length : 0);\n\n\t      forEach(collection, function(value) {\n\t        var rand = baseRandom(0, ++index);\n\t        result[index] = result[rand];\n\t        result[rand] = value;\n\t      });\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Gets the size of the `collection` by returning `collection.length` for arrays\n\t     * and array-like objects or the number of own enumerable properties for objects.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to inspect.\n\t     * @returns {number} Returns `collection.length` or number of own enumerable properties.\n\t     * @example\n\t     *\n\t     * _.size([1, 2]);\n\t     * // => 2\n\t     *\n\t     * _.size({ 'one': 1, 'two': 2, 'three': 3 });\n\t     * // => 3\n\t     *\n\t     * _.size('pebbles');\n\t     * // => 7\n\t     */\n\t    function size(collection) {\n\t      var length = collection ? collection.length : 0;\n\t      return typeof length == 'number' ? length : keys(collection).length;\n\t    }\n\n\t    /**\n\t     * Checks if the callback returns a truey value for **any** element of a\n\t     * collection. The function returns as soon as it finds a passing value and\n\t     * does not iterate over the entire collection. The callback is bound to\n\t     * `thisArg` and invoked with three arguments; (value, index|key, collection).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias any\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {boolean} Returns `true` if any element passed the callback check,\n\t     *  else `false`.\n\t     * @example\n\t     *\n\t     * _.some([null, 0, 'yes', false], Boolean);\n\t     * // => true\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney', 'age': 36, 'blocked': false },\n\t     *   { 'name': 'fred',   'age': 40, 'blocked': true }\n\t     * ];\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.some(characters, 'blocked');\n\t     * // => true\n\t     *\n\t     * // using \"_.where\" callback shorthand\n\t     * _.some(characters, { 'age': 1 });\n\t     * // => false\n\t     */\n\t    function some(collection, callback, thisArg) {\n\t      var result;\n\t      callback = lodash.createCallback(callback, thisArg, 3);\n\n\t      if (isArray(collection)) {\n\t        var index = -1,\n\t            length = collection.length;\n\n\t        while (++index < length) {\n\t          if ((result = callback(collection[index], index, collection))) {\n\t            break;\n\t          }\n\t        }\n\t      } else {\n\t        baseEach(collection, function(value, index, collection) {\n\t          return !(result = callback(value, index, collection));\n\t        });\n\t      }\n\t      return !!result;\n\t    }\n\n\t    /**\n\t     * Creates an array of elements, sorted in ascending order by the results of\n\t     * running each element in a collection through the callback. This method\n\t     * performs a stable sort, that is, it will preserve the original sort order\n\t     * of equal elements. The callback is bound to `thisArg` and invoked with\n\t     * three arguments; (value, index|key, collection).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an array of property names is provided for `callback` the collection\n\t     * will be sorted by each property value.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Array|Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Array} Returns a new array of sorted elements.\n\t     * @example\n\t     *\n\t     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });\n\t     * // => [3, 1, 2]\n\t     *\n\t     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);\n\t     * // => [3, 1, 2]\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney',  'age': 36 },\n\t     *   { 'name': 'fred',    'age': 40 },\n\t     *   { 'name': 'barney',  'age': 26 },\n\t     *   { 'name': 'fred',    'age': 30 }\n\t     * ];\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.map(_.sortBy(characters, 'age'), _.values);\n\t     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]\n\t     *\n\t     * // sorting by multiple properties\n\t     * _.map(_.sortBy(characters, ['name', 'age']), _.values);\n\t     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]\n\t     */\n\t    function sortBy(collection, callback, thisArg) {\n\t      var index = -1,\n\t          isArr = isArray(callback),\n\t          length = collection ? collection.length : 0,\n\t          result = Array(typeof length == 'number' ? length : 0);\n\n\t      if (!isArr) {\n\t        callback = lodash.createCallback(callback, thisArg, 3);\n\t      }\n\t      forEach(collection, function(value, key, collection) {\n\t        var object = result[++index] = getObject();\n\t        if (isArr) {\n\t          object.criteria = map(callback, function(key) { return value[key]; });\n\t        } else {\n\t          (object.criteria = getArray())[0] = callback(value, key, collection);\n\t        }\n\t        object.index = index;\n\t        object.value = value;\n\t      });\n\n\t      length = result.length;\n\t      result.sort(compareAscending);\n\t      while (length--) {\n\t        var object = result[length];\n\t        result[length] = object.value;\n\t        if (!isArr) {\n\t          releaseArray(object.criteria);\n\t        }\n\t        releaseObject(object);\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Converts the `collection` to an array.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to convert.\n\t     * @returns {Array} Returns the new converted array.\n\t     * @example\n\t     *\n\t     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n\t     * // => [2, 3, 4]\n\t     */\n\t    function toArray(collection) {\n\t      if (collection && typeof collection.length == 'number') {\n\t        return (support.unindexedChars && isString(collection))\n\t          ? collection.split('')\n\t          : slice(collection);\n\t      }\n\t      return values(collection);\n\t    }\n\n\t    /**\n\t     * Performs a deep comparison of each element in a `collection` to the given\n\t     * `properties` object, returning an array of all elements that have equivalent\n\t     * property values.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @type Function\n\t     * @category Collections\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Object} props The object of property values to filter by.\n\t     * @returns {Array} Returns a new array of elements that have the given properties.\n\t     * @example\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },\n\t     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }\n\t     * ];\n\t     *\n\t     * _.where(characters, { 'age': 36 });\n\t     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]\n\t     *\n\t     * _.where(characters, { 'pets': ['dino'] });\n\t     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]\n\t     */\n\t    var where = filter;\n\n\t    /*--------------------------------------------------------------------------*/\n\n\t    /**\n\t     * Creates an array with all falsey values removed. The values `false`, `null`,\n\t     * `0`, `\"\"`, `undefined`, and `NaN` are all falsey.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {Array} array The array to compact.\n\t     * @returns {Array} Returns a new array of filtered values.\n\t     * @example\n\t     *\n\t     * _.compact([0, 1, false, 2, '', 3]);\n\t     * // => [1, 2, 3]\n\t     */\n\t    function compact(array) {\n\t      var index = -1,\n\t          length = array ? array.length : 0,\n\t          result = [];\n\n\t      while (++index < length) {\n\t        var value = array[index];\n\t        if (value) {\n\t          result.push(value);\n\t        }\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Creates an array excluding all values of the provided arrays using strict\n\t     * equality for comparisons, i.e. `===`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {Array} array The array to process.\n\t     * @param {...Array} [values] The arrays of values to exclude.\n\t     * @returns {Array} Returns a new array of filtered values.\n\t     * @example\n\t     *\n\t     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n\t     * // => [1, 3, 4]\n\t     */\n\t    function difference(array) {\n\t      return baseDifference(array, baseFlatten(arguments, true, true, 1));\n\t    }\n\n\t    /**\n\t     * This method is like `_.find` except that it returns the index of the first\n\t     * element that passes the callback check, instead of the element itself.\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {Array} array The array to search.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {number} Returns the index of the found element, else `-1`.\n\t     * @example\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney',  'age': 36, 'blocked': false },\n\t     *   { 'name': 'fred',    'age': 40, 'blocked': true },\n\t     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }\n\t     * ];\n\t     *\n\t     * _.findIndex(characters, function(chr) {\n\t     *   return chr.age < 20;\n\t     * });\n\t     * // => 2\n\t     *\n\t     * // using \"_.where\" callback shorthand\n\t     * _.findIndex(characters, { 'age': 36 });\n\t     * // => 0\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.findIndex(characters, 'blocked');\n\t     * // => 1\n\t     */\n\t    function findIndex(array, callback, thisArg) {\n\t      var index = -1,\n\t          length = array ? array.length : 0;\n\n\t      callback = lodash.createCallback(callback, thisArg, 3);\n\t      while (++index < length) {\n\t        if (callback(array[index], index, array)) {\n\t          return index;\n\t        }\n\t      }\n\t      return -1;\n\t    }\n\n\t    /**\n\t     * This method is like `_.findIndex` except that it iterates over elements\n\t     * of a `collection` from right to left.\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {Array} array The array to search.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {number} Returns the index of the found element, else `-1`.\n\t     * @example\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney',  'age': 36, 'blocked': true },\n\t     *   { 'name': 'fred',    'age': 40, 'blocked': false },\n\t     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }\n\t     * ];\n\t     *\n\t     * _.findLastIndex(characters, function(chr) {\n\t     *   return chr.age > 30;\n\t     * });\n\t     * // => 1\n\t     *\n\t     * // using \"_.where\" callback shorthand\n\t     * _.findLastIndex(characters, { 'age': 36 });\n\t     * // => 0\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.findLastIndex(characters, 'blocked');\n\t     * // => 2\n\t     */\n\t    function findLastIndex(array, callback, thisArg) {\n\t      var length = array ? array.length : 0;\n\t      callback = lodash.createCallback(callback, thisArg, 3);\n\t      while (length--) {\n\t        if (callback(array[length], length, array)) {\n\t          return length;\n\t        }\n\t      }\n\t      return -1;\n\t    }\n\n\t    /**\n\t     * Gets the first element or first `n` elements of an array. If a callback\n\t     * is provided elements at the beginning of the array are returned as long\n\t     * as the callback returns truey. The callback is bound to `thisArg` and\n\t     * invoked with three arguments; (value, index, array).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias head, take\n\t     * @category Arrays\n\t     * @param {Array} array The array to query.\n\t     * @param {Function|Object|number|string} [callback] The function called\n\t     *  per element or the number of elements to return. If a property name or\n\t     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n\t     *  style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {*} Returns the first element(s) of `array`.\n\t     * @example\n\t     *\n\t     * _.first([1, 2, 3]);\n\t     * // => 1\n\t     *\n\t     * _.first([1, 2, 3], 2);\n\t     * // => [1, 2]\n\t     *\n\t     * _.first([1, 2, 3], function(num) {\n\t     *   return num < 3;\n\t     * });\n\t     * // => [1, 2]\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },\n\t     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },\n\t     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }\n\t     * ];\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.first(characters, 'blocked');\n\t     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]\n\t     *\n\t     * // using \"_.where\" callback shorthand\n\t     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');\n\t     * // => ['barney', 'fred']\n\t     */\n\t    function first(array, callback, thisArg) {\n\t      var n = 0,\n\t          length = array ? array.length : 0;\n\n\t      if (typeof callback != 'number' && callback != null) {\n\t        var index = -1;\n\t        callback = lodash.createCallback(callback, thisArg, 3);\n\t        while (++index < length && callback(array[index], index, array)) {\n\t          n++;\n\t        }\n\t      } else {\n\t        n = callback;\n\t        if (n == null || thisArg) {\n\t          return array ? array[0] : undefined;\n\t        }\n\t      }\n\t      return slice(array, 0, nativeMin(nativeMax(0, n), length));\n\t    }\n\n\t    /**\n\t     * Flattens a nested array (the nesting can be to any depth). If `isShallow`\n\t     * is truey, the array will only be flattened a single level. If a callback\n\t     * is provided each element of the array is passed through the callback before\n\t     * flattening. The callback is bound to `thisArg` and invoked with three\n\t     * arguments; (value, index, array).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {Array} array The array to flatten.\n\t     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Array} Returns a new flattened array.\n\t     * @example\n\t     *\n\t     * _.flatten([1, [2], [3, [[4]]]]);\n\t     * // => [1, 2, 3, 4];\n\t     *\n\t     * _.flatten([1, [2], [3, [[4]]]], true);\n\t     * // => [1, 2, 3, [[4]]];\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },\n\t     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }\n\t     * ];\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.flatten(characters, 'pets');\n\t     * // => ['hoppy', 'baby puss', 'dino']\n\t     */\n\t    function flatten(array, isShallow, callback, thisArg) {\n\t      // juggle arguments\n\t      if (typeof isShallow != 'boolean' && isShallow != null) {\n\t        thisArg = callback;\n\t        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;\n\t        isShallow = false;\n\t      }\n\t      if (callback != null) {\n\t        array = map(array, callback, thisArg);\n\t      }\n\t      return baseFlatten(array, isShallow);\n\t    }\n\n\t    /**\n\t     * Gets the index at which the first occurrence of `value` is found using\n\t     * strict equality for comparisons, i.e. `===`. If the array is already sorted\n\t     * providing `true` for `fromIndex` will run a faster binary search.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {Array} array The array to search.\n\t     * @param {*} value The value to search for.\n\t     * @param {boolean|number} [fromIndex=0] The index to search from or `true`\n\t     *  to perform a binary search on a sorted array.\n\t     * @returns {number} Returns the index of the matched value or `-1`.\n\t     * @example\n\t     *\n\t     * _.indexOf([1, 2, 3, 1, 2, 3], 2);\n\t     * // => 1\n\t     *\n\t     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);\n\t     * // => 4\n\t     *\n\t     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);\n\t     * // => 2\n\t     */\n\t    function indexOf(array, value, fromIndex) {\n\t      if (typeof fromIndex == 'number') {\n\t        var length = array ? array.length : 0;\n\t        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);\n\t      } else if (fromIndex) {\n\t        var index = sortedIndex(array, value);\n\t        return array[index] === value ? index : -1;\n\t      }\n\t      return baseIndexOf(array, value, fromIndex);\n\t    }\n\n\t    /**\n\t     * Gets all but the last element or last `n` elements of an array. If a\n\t     * callback is provided elements at the end of the array are excluded from\n\t     * the result as long as the callback returns truey. The callback is bound\n\t     * to `thisArg` and invoked with three arguments; (value, index, array).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {Array} array The array to query.\n\t     * @param {Function|Object|number|string} [callback=1] The function called\n\t     *  per element or the number of elements to exclude. If a property name or\n\t     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n\t     *  style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Array} Returns a slice of `array`.\n\t     * @example\n\t     *\n\t     * _.initial([1, 2, 3]);\n\t     * // => [1, 2]\n\t     *\n\t     * _.initial([1, 2, 3], 2);\n\t     * // => [1]\n\t     *\n\t     * _.initial([1, 2, 3], function(num) {\n\t     *   return num > 1;\n\t     * });\n\t     * // => [1]\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },\n\t     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },\n\t     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }\n\t     * ];\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.initial(characters, 'blocked');\n\t     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]\n\t     *\n\t     * // using \"_.where\" callback shorthand\n\t     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');\n\t     * // => ['barney', 'fred']\n\t     */\n\t    function initial(array, callback, thisArg) {\n\t      var n = 0,\n\t          length = array ? array.length : 0;\n\n\t      if (typeof callback != 'number' && callback != null) {\n\t        var index = length;\n\t        callback = lodash.createCallback(callback, thisArg, 3);\n\t        while (index-- && callback(array[index], index, array)) {\n\t          n++;\n\t        }\n\t      } else {\n\t        n = (callback == null || thisArg) ? 1 : callback || n;\n\t      }\n\t      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));\n\t    }\n\n\t    /**\n\t     * Creates an array of unique values present in all provided arrays using\n\t     * strict equality for comparisons, i.e. `===`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {...Array} [array] The arrays to inspect.\n\t     * @returns {Array} Returns an array of shared values.\n\t     * @example\n\t     *\n\t     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);\n\t     * // => [1, 2]\n\t     */\n\t    function intersection() {\n\t      var args = [],\n\t          argsIndex = -1,\n\t          argsLength = arguments.length,\n\t          caches = getArray(),\n\t          indexOf = getIndexOf(),\n\t          trustIndexOf = indexOf === baseIndexOf,\n\t          seen = getArray();\n\n\t      while (++argsIndex < argsLength) {\n\t        var value = arguments[argsIndex];\n\t        if (isArray(value) || isArguments(value)) {\n\t          args.push(value);\n\t          caches.push(trustIndexOf && value.length >= largeArraySize &&\n\t            createCache(argsIndex ? args[argsIndex] : seen));\n\t        }\n\t      }\n\t      var array = args[0],\n\t          index = -1,\n\t          length = array ? array.length : 0,\n\t          result = [];\n\n\t      outer:\n\t      while (++index < length) {\n\t        var cache = caches[0];\n\t        value = array[index];\n\n\t        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {\n\t          argsIndex = argsLength;\n\t          (cache || seen).push(value);\n\t          while (--argsIndex) {\n\t            cache = caches[argsIndex];\n\t            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {\n\t              continue outer;\n\t            }\n\t          }\n\t          result.push(value);\n\t        }\n\t      }\n\t      while (argsLength--) {\n\t        cache = caches[argsLength];\n\t        if (cache) {\n\t          releaseObject(cache);\n\t        }\n\t      }\n\t      releaseArray(caches);\n\t      releaseArray(seen);\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Gets the last element or last `n` elements of an array. If a callback is\n\t     * provided elements at the end of the array are returned as long as the\n\t     * callback returns truey. The callback is bound to `thisArg` and invoked\n\t     * with three arguments; (value, index, array).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {Array} array The array to query.\n\t     * @param {Function|Object|number|string} [callback] The function called\n\t     *  per element or the number of elements to return. If a property name or\n\t     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n\t     *  style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {*} Returns the last element(s) of `array`.\n\t     * @example\n\t     *\n\t     * _.last([1, 2, 3]);\n\t     * // => 3\n\t     *\n\t     * _.last([1, 2, 3], 2);\n\t     * // => [2, 3]\n\t     *\n\t     * _.last([1, 2, 3], function(num) {\n\t     *   return num > 1;\n\t     * });\n\t     * // => [2, 3]\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },\n\t     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },\n\t     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }\n\t     * ];\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.pluck(_.last(characters, 'blocked'), 'name');\n\t     * // => ['fred', 'pebbles']\n\t     *\n\t     * // using \"_.where\" callback shorthand\n\t     * _.last(characters, { 'employer': 'na' });\n\t     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]\n\t     */\n\t    function last(array, callback, thisArg) {\n\t      var n = 0,\n\t          length = array ? array.length : 0;\n\n\t      if (typeof callback != 'number' && callback != null) {\n\t        var index = length;\n\t        callback = lodash.createCallback(callback, thisArg, 3);\n\t        while (index-- && callback(array[index], index, array)) {\n\t          n++;\n\t        }\n\t      } else {\n\t        n = callback;\n\t        if (n == null || thisArg) {\n\t          return array ? array[length - 1] : undefined;\n\t        }\n\t      }\n\t      return slice(array, nativeMax(0, length - n));\n\t    }\n\n\t    /**\n\t     * Gets the index at which the last occurrence of `value` is found using strict\n\t     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used\n\t     * as the offset from the end of the collection.\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {Array} array The array to search.\n\t     * @param {*} value The value to search for.\n\t     * @param {number} [fromIndex=array.length-1] The index to search from.\n\t     * @returns {number} Returns the index of the matched value or `-1`.\n\t     * @example\n\t     *\n\t     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n\t     * // => 4\n\t     *\n\t     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);\n\t     * // => 1\n\t     */\n\t    function lastIndexOf(array, value, fromIndex) {\n\t      var index = array ? array.length : 0;\n\t      if (typeof fromIndex == 'number') {\n\t        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;\n\t      }\n\t      while (index--) {\n\t        if (array[index] === value) {\n\t          return index;\n\t        }\n\t      }\n\t      return -1;\n\t    }\n\n\t    /**\n\t     * Removes all provided values from the given array using strict equality for\n\t     * comparisons, i.e. `===`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {Array} array The array to modify.\n\t     * @param {...*} [value] The values to remove.\n\t     * @returns {Array} Returns `array`.\n\t     * @example\n\t     *\n\t     * var array = [1, 2, 3, 1, 2, 3];\n\t     * _.pull(array, 2, 3);\n\t     * console.log(array);\n\t     * // => [1, 1]\n\t     */\n\t    function pull(array) {\n\t      var args = arguments,\n\t          argsIndex = 0,\n\t          argsLength = args.length,\n\t          length = array ? array.length : 0;\n\n\t      while (++argsIndex < argsLength) {\n\t        var index = -1,\n\t            value = args[argsIndex];\n\t        while (++index < length) {\n\t          if (array[index] === value) {\n\t            splice.call(array, index--, 1);\n\t            length--;\n\t          }\n\t        }\n\t      }\n\t      return array;\n\t    }\n\n\t    /**\n\t     * Creates an array of numbers (positive and/or negative) progressing from\n\t     * `start` up to but not including `end`. If `start` is less than `stop` a\n\t     * zero-length range is created unless a negative `step` is specified.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {number} [start=0] The start of the range.\n\t     * @param {number} end The end of the range.\n\t     * @param {number} [step=1] The value to increment or decrement by.\n\t     * @returns {Array} Returns a new range array.\n\t     * @example\n\t     *\n\t     * _.range(4);\n\t     * // => [0, 1, 2, 3]\n\t     *\n\t     * _.range(1, 5);\n\t     * // => [1, 2, 3, 4]\n\t     *\n\t     * _.range(0, 20, 5);\n\t     * // => [0, 5, 10, 15]\n\t     *\n\t     * _.range(0, -4, -1);\n\t     * // => [0, -1, -2, -3]\n\t     *\n\t     * _.range(1, 4, 0);\n\t     * // => [1, 1, 1]\n\t     *\n\t     * _.range(0);\n\t     * // => []\n\t     */\n\t    function range(start, end, step) {\n\t      start = +start || 0;\n\t      step = typeof step == 'number' ? step : (+step || 1);\n\n\t      if (end == null) {\n\t        end = start;\n\t        start = 0;\n\t      }\n\t      // use `Array(length)` so engines like Chakra and V8 avoid slower modes\n\t      // http://youtu.be/XAqIpGU8ZZk#t=17m25s\n\t      var index = -1,\n\t          length = nativeMax(0, ceil((end - start) / (step || 1))),\n\t          result = Array(length);\n\n\t      while (++index < length) {\n\t        result[index] = start;\n\t        start += step;\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Removes all elements from an array that the callback returns truey for\n\t     * and returns an array of removed elements. The callback is bound to `thisArg`\n\t     * and invoked with three arguments; (value, index, array).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {Array} array The array to modify.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Array} Returns a new array of removed elements.\n\t     * @example\n\t     *\n\t     * var array = [1, 2, 3, 4, 5, 6];\n\t     * var evens = _.remove(array, function(num) { return num % 2 == 0; });\n\t     *\n\t     * console.log(array);\n\t     * // => [1, 3, 5]\n\t     *\n\t     * console.log(evens);\n\t     * // => [2, 4, 6]\n\t     */\n\t    function remove(array, callback, thisArg) {\n\t      var index = -1,\n\t          length = array ? array.length : 0,\n\t          result = [];\n\n\t      callback = lodash.createCallback(callback, thisArg, 3);\n\t      while (++index < length) {\n\t        var value = array[index];\n\t        if (callback(value, index, array)) {\n\t          result.push(value);\n\t          splice.call(array, index--, 1);\n\t          length--;\n\t        }\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * The opposite of `_.initial` this method gets all but the first element or\n\t     * first `n` elements of an array. If a callback function is provided elements\n\t     * at the beginning of the array are excluded from the result as long as the\n\t     * callback returns truey. The callback is bound to `thisArg` and invoked\n\t     * with three arguments; (value, index, array).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias drop, tail\n\t     * @category Arrays\n\t     * @param {Array} array The array to query.\n\t     * @param {Function|Object|number|string} [callback=1] The function called\n\t     *  per element or the number of elements to exclude. If a property name or\n\t     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n\t     *  style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Array} Returns a slice of `array`.\n\t     * @example\n\t     *\n\t     * _.rest([1, 2, 3]);\n\t     * // => [2, 3]\n\t     *\n\t     * _.rest([1, 2, 3], 2);\n\t     * // => [3]\n\t     *\n\t     * _.rest([1, 2, 3], function(num) {\n\t     *   return num < 3;\n\t     * });\n\t     * // => [3]\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },\n\t     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },\n\t     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }\n\t     * ];\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.pluck(_.rest(characters, 'blocked'), 'name');\n\t     * // => ['fred', 'pebbles']\n\t     *\n\t     * // using \"_.where\" callback shorthand\n\t     * _.rest(characters, { 'employer': 'slate' });\n\t     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]\n\t     */\n\t    function rest(array, callback, thisArg) {\n\t      if (typeof callback != 'number' && callback != null) {\n\t        var n = 0,\n\t            index = -1,\n\t            length = array ? array.length : 0;\n\n\t        callback = lodash.createCallback(callback, thisArg, 3);\n\t        while (++index < length && callback(array[index], index, array)) {\n\t          n++;\n\t        }\n\t      } else {\n\t        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);\n\t      }\n\t      return slice(array, n);\n\t    }\n\n\t    /**\n\t     * Uses a binary search to determine the smallest index at which a value\n\t     * should be inserted into a given sorted array in order to maintain the sort\n\t     * order of the array. If a callback is provided it will be executed for\n\t     * `value` and each element of `array` to compute their sort ranking. The\n\t     * callback is bound to `thisArg` and invoked with one argument; (value).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {Array} array The array to inspect.\n\t     * @param {*} value The value to evaluate.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {number} Returns the index at which `value` should be inserted\n\t     *  into `array`.\n\t     * @example\n\t     *\n\t     * _.sortedIndex([20, 30, 50], 40);\n\t     * // => 2\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\n\t     * // => 2\n\t     *\n\t     * var dict = {\n\t     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }\n\t     * };\n\t     *\n\t     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n\t     *   return dict.wordToNumber[word];\n\t     * });\n\t     * // => 2\n\t     *\n\t     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n\t     *   return this.wordToNumber[word];\n\t     * }, dict);\n\t     * // => 2\n\t     */\n\t    function sortedIndex(array, value, callback, thisArg) {\n\t      var low = 0,\n\t          high = array ? array.length : low;\n\n\t      // explicitly reference `identity` for better inlining in Firefox\n\t      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;\n\t      value = callback(value);\n\n\t      while (low < high) {\n\t        var mid = (low + high) >>> 1;\n\t        (callback(array[mid]) < value)\n\t          ? low = mid + 1\n\t          : high = mid;\n\t      }\n\t      return low;\n\t    }\n\n\t    /**\n\t     * Creates an array of unique values, in order, of the provided arrays using\n\t     * strict equality for comparisons, i.e. `===`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {...Array} [array] The arrays to inspect.\n\t     * @returns {Array} Returns an array of combined values.\n\t     * @example\n\t     *\n\t     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);\n\t     * // => [1, 2, 3, 5, 4]\n\t     */\n\t    function union() {\n\t      return baseUniq(baseFlatten(arguments, true, true));\n\t    }\n\n\t    /**\n\t     * Creates a duplicate-value-free version of an array using strict equality\n\t     * for comparisons, i.e. `===`. If the array is sorted, providing\n\t     * `true` for `isSorted` will use a faster algorithm. If a callback is provided\n\t     * each element of `array` is passed through the callback before uniqueness\n\t     * is computed. The callback is bound to `thisArg` and invoked with three\n\t     * arguments; (value, index, array).\n\t     *\n\t     * If a property name is provided for `callback` the created \"_.pluck\" style\n\t     * callback will return the property value of the given element.\n\t     *\n\t     * If an object is provided for `callback` the created \"_.where\" style callback\n\t     * will return `true` for elements that have the properties of the given object,\n\t     * else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias unique\n\t     * @category Arrays\n\t     * @param {Array} array The array to process.\n\t     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.\n\t     * @param {Function|Object|string} [callback=identity] The function called\n\t     *  per iteration. If a property name or object is provided it will be used\n\t     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Array} Returns a duplicate-value-free array.\n\t     * @example\n\t     *\n\t     * _.uniq([1, 2, 1, 3, 1]);\n\t     * // => [1, 2, 3]\n\t     *\n\t     * _.uniq([1, 1, 2, 2, 3], true);\n\t     * // => [1, 2, 3]\n\t     *\n\t     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });\n\t     * // => ['A', 'b', 'C']\n\t     *\n\t     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);\n\t     * // => [1, 2.5, 3]\n\t     *\n\t     * // using \"_.pluck\" callback shorthand\n\t     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n\t     * // => [{ 'x': 1 }, { 'x': 2 }]\n\t     */\n\t    function uniq(array, isSorted, callback, thisArg) {\n\t      // juggle arguments\n\t      if (typeof isSorted != 'boolean' && isSorted != null) {\n\t        thisArg = callback;\n\t        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;\n\t        isSorted = false;\n\t      }\n\t      if (callback != null) {\n\t        callback = lodash.createCallback(callback, thisArg, 3);\n\t      }\n\t      return baseUniq(array, isSorted, callback);\n\t    }\n\n\t    /**\n\t     * Creates an array excluding all provided values using strict equality for\n\t     * comparisons, i.e. `===`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {Array} array The array to filter.\n\t     * @param {...*} [value] The values to exclude.\n\t     * @returns {Array} Returns a new array of filtered values.\n\t     * @example\n\t     *\n\t     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n\t     * // => [2, 3, 4]\n\t     */\n\t    function without(array) {\n\t      return baseDifference(array, slice(arguments, 1));\n\t    }\n\n\t    /**\n\t     * Creates an array that is the symmetric difference of the provided arrays.\n\t     * See http://en.wikipedia.org/wiki/Symmetric_difference.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Arrays\n\t     * @param {...Array} [array] The arrays to inspect.\n\t     * @returns {Array} Returns an array of values.\n\t     * @example\n\t     *\n\t     * _.xor([1, 2, 3], [5, 2, 1, 4]);\n\t     * // => [3, 5, 4]\n\t     *\n\t     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);\n\t     * // => [1, 4, 5]\n\t     */\n\t    function xor() {\n\t      var index = -1,\n\t          length = arguments.length;\n\n\t      while (++index < length) {\n\t        var array = arguments[index];\n\t        if (isArray(array) || isArguments(array)) {\n\t          var result = result\n\t            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))\n\t            : array;\n\t        }\n\t      }\n\t      return result || [];\n\t    }\n\n\t    /**\n\t     * Creates an array of grouped elements, the first of which contains the first\n\t     * elements of the given arrays, the second of which contains the second\n\t     * elements of the given arrays, and so on.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias unzip\n\t     * @category Arrays\n\t     * @param {...Array} [array] Arrays to process.\n\t     * @returns {Array} Returns a new array of grouped elements.\n\t     * @example\n\t     *\n\t     * _.zip(['fred', 'barney'], [30, 40], [true, false]);\n\t     * // => [['fred', 30, true], ['barney', 40, false]]\n\t     */\n\t    function zip() {\n\t      var array = arguments.length > 1 ? arguments : arguments[0],\n\t          index = -1,\n\t          length = array ? max(pluck(array, 'length')) : 0,\n\t          result = Array(length < 0 ? 0 : length);\n\n\t      while (++index < length) {\n\t        result[index] = pluck(array, index);\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Creates an object composed from arrays of `keys` and `values`. Provide\n\t     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`\n\t     * or two arrays, one of `keys` and one of corresponding `values`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @alias object\n\t     * @category Arrays\n\t     * @param {Array} keys The array of keys.\n\t     * @param {Array} [values=[]] The array of values.\n\t     * @returns {Object} Returns an object composed of the given keys and\n\t     *  corresponding values.\n\t     * @example\n\t     *\n\t     * _.zipObject(['fred', 'barney'], [30, 40]);\n\t     * // => { 'fred': 30, 'barney': 40 }\n\t     */\n\t    function zipObject(keys, values) {\n\t      var index = -1,\n\t          length = keys ? keys.length : 0,\n\t          result = {};\n\n\t      if (!values && length && !isArray(keys[0])) {\n\t        values = [];\n\t      }\n\t      while (++index < length) {\n\t        var key = keys[index];\n\t        if (values) {\n\t          result[key] = values[index];\n\t        } else if (key) {\n\t          result[key[0]] = key[1];\n\t        }\n\t      }\n\t      return result;\n\t    }\n\n\t    /*--------------------------------------------------------------------------*/\n\n\t    /**\n\t     * Creates a function that executes `func`, with  the `this` binding and\n\t     * arguments of the created function, only after being called `n` times.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {number} n The number of times the function must be called before\n\t     *  `func` is executed.\n\t     * @param {Function} func The function to restrict.\n\t     * @returns {Function} Returns the new restricted function.\n\t     * @example\n\t     *\n\t     * var saves = ['profile', 'settings'];\n\t     *\n\t     * var done = _.after(saves.length, function() {\n\t     *   console.log('Done saving!');\n\t     * });\n\t     *\n\t     * _.forEach(saves, function(type) {\n\t     *   asyncSave({ 'type': type, 'complete': done });\n\t     * });\n\t     * // => logs 'Done saving!', after all saves have completed\n\t     */\n\t    function after(n, func) {\n\t      if (!isFunction(func)) {\n\t        throw new TypeError;\n\t      }\n\t      return function() {\n\t        if (--n < 1) {\n\t          return func.apply(this, arguments);\n\t        }\n\t      };\n\t    }\n\n\t    /**\n\t     * Creates a function that, when called, invokes `func` with the `this`\n\t     * binding of `thisArg` and prepends any additional `bind` arguments to those\n\t     * provided to the bound function.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {Function} func The function to bind.\n\t     * @param {*} [thisArg] The `this` binding of `func`.\n\t     * @param {...*} [arg] Arguments to be partially applied.\n\t     * @returns {Function} Returns the new bound function.\n\t     * @example\n\t     *\n\t     * var func = function(greeting) {\n\t     *   return greeting + ' ' + this.name;\n\t     * };\n\t     *\n\t     * func = _.bind(func, { 'name': 'fred' }, 'hi');\n\t     * func();\n\t     * // => 'hi fred'\n\t     */\n\t    function bind(func, thisArg) {\n\t      return arguments.length > 2\n\t        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)\n\t        : createWrapper(func, 1, null, null, thisArg);\n\t    }\n\n\t    /**\n\t     * Binds methods of an object to the object itself, overwriting the existing\n\t     * method. Method names may be specified as individual arguments or as arrays\n\t     * of method names. If no method names are provided all the function properties\n\t     * of `object` will be bound.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {Object} object The object to bind and assign the bound methods to.\n\t     * @param {...string} [methodName] The object method names to\n\t     *  bind, specified as individual method names or arrays of method names.\n\t     * @returns {Object} Returns `object`.\n\t     * @example\n\t     *\n\t     * var view = {\n\t     *   'label': 'docs',\n\t     *   'onClick': function() { console.log('clicked ' + this.label); }\n\t     * };\n\t     *\n\t     * _.bindAll(view);\n\t     * jQuery('#docs').on('click', view.onClick);\n\t     * // => logs 'clicked docs', when the button is clicked\n\t     */\n\t    function bindAll(object) {\n\t      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),\n\t          index = -1,\n\t          length = funcs.length;\n\n\t      while (++index < length) {\n\t        var key = funcs[index];\n\t        object[key] = createWrapper(object[key], 1, null, null, object);\n\t      }\n\t      return object;\n\t    }\n\n\t    /**\n\t     * Creates a function that, when called, invokes the method at `object[key]`\n\t     * and prepends any additional `bindKey` arguments to those provided to the bound\n\t     * function. This method differs from `_.bind` by allowing bound functions to\n\t     * reference methods that will be redefined or don't yet exist.\n\t     * See http://michaux.ca/articles/lazy-function-definition-pattern.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {Object} object The object the method belongs to.\n\t     * @param {string} key The key of the method.\n\t     * @param {...*} [arg] Arguments to be partially applied.\n\t     * @returns {Function} Returns the new bound function.\n\t     * @example\n\t     *\n\t     * var object = {\n\t     *   'name': 'fred',\n\t     *   'greet': function(greeting) {\n\t     *     return greeting + ' ' + this.name;\n\t     *   }\n\t     * };\n\t     *\n\t     * var func = _.bindKey(object, 'greet', 'hi');\n\t     * func();\n\t     * // => 'hi fred'\n\t     *\n\t     * object.greet = function(greeting) {\n\t     *   return greeting + 'ya ' + this.name + '!';\n\t     * };\n\t     *\n\t     * func();\n\t     * // => 'hiya fred!'\n\t     */\n\t    function bindKey(object, key) {\n\t      return arguments.length > 2\n\t        ? createWrapper(key, 19, slice(arguments, 2), null, object)\n\t        : createWrapper(key, 3, null, null, object);\n\t    }\n\n\t    /**\n\t     * Creates a function that is the composition of the provided functions,\n\t     * where each function consumes the return value of the function that follows.\n\t     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.\n\t     * Each function is executed with the `this` binding of the composed function.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {...Function} [func] Functions to compose.\n\t     * @returns {Function} Returns the new composed function.\n\t     * @example\n\t     *\n\t     * var realNameMap = {\n\t     *   'pebbles': 'penelope'\n\t     * };\n\t     *\n\t     * var format = function(name) {\n\t     *   name = realNameMap[name.toLowerCase()] || name;\n\t     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n\t     * };\n\t     *\n\t     * var greet = function(formatted) {\n\t     *   return 'Hiya ' + formatted + '!';\n\t     * };\n\t     *\n\t     * var welcome = _.compose(greet, format);\n\t     * welcome('pebbles');\n\t     * // => 'Hiya Penelope!'\n\t     */\n\t    function compose() {\n\t      var funcs = arguments,\n\t          length = funcs.length;\n\n\t      while (length--) {\n\t        if (!isFunction(funcs[length])) {\n\t          throw new TypeError;\n\t        }\n\t      }\n\t      return function() {\n\t        var args = arguments,\n\t            length = funcs.length;\n\n\t        while (length--) {\n\t          args = [funcs[length].apply(this, args)];\n\t        }\n\t        return args[0];\n\t      };\n\t    }\n\n\t    /**\n\t     * Creates a function which accepts one or more arguments of `func` that when\n\t     * invoked either executes `func` returning its result, if all `func` arguments\n\t     * have been provided, or returns a function that accepts one or more of the\n\t     * remaining `func` arguments, and so on. The arity of `func` can be specified\n\t     * if `func.length` is not sufficient.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {Function} func The function to curry.\n\t     * @param {number} [arity=func.length] The arity of `func`.\n\t     * @returns {Function} Returns the new curried function.\n\t     * @example\n\t     *\n\t     * var curried = _.curry(function(a, b, c) {\n\t     *   console.log(a + b + c);\n\t     * });\n\t     *\n\t     * curried(1)(2)(3);\n\t     * // => 6\n\t     *\n\t     * curried(1, 2)(3);\n\t     * // => 6\n\t     *\n\t     * curried(1, 2, 3);\n\t     * // => 6\n\t     */\n\t    function curry(func, arity) {\n\t      arity = typeof arity == 'number' ? arity : (+arity || func.length);\n\t      return createWrapper(func, 4, null, null, null, arity);\n\t    }\n\n\t    /**\n\t     * Creates a function that will delay the execution of `func` until after\n\t     * `wait` milliseconds have elapsed since the last time it was invoked.\n\t     * Provide an options object to indicate that `func` should be invoked on\n\t     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls\n\t     * to the debounced function will return the result of the last `func` call.\n\t     *\n\t     * Note: If `leading` and `trailing` options are `true` `func` will be called\n\t     * on the trailing edge of the timeout only if the the debounced function is\n\t     * invoked more than once during the `wait` timeout.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {Function} func The function to debounce.\n\t     * @param {number} wait The number of milliseconds to delay.\n\t     * @param {Object} [options] The options object.\n\t     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.\n\t     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.\n\t     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.\n\t     * @returns {Function} Returns the new debounced function.\n\t     * @example\n\t     *\n\t     * // avoid costly calculations while the window size is in flux\n\t     * var lazyLayout = _.debounce(calculateLayout, 150);\n\t     * jQuery(window).on('resize', lazyLayout);\n\t     *\n\t     * // execute `sendMail` when the click event is fired, debouncing subsequent calls\n\t     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {\n\t     *   'leading': true,\n\t     *   'trailing': false\n\t     * });\n\t     *\n\t     * // ensure `batchLog` is executed once after 1 second of debounced calls\n\t     * var source = new EventSource('/stream');\n\t     * source.addEventListener('message', _.debounce(batchLog, 250, {\n\t     *   'maxWait': 1000\n\t     * }, false);\n\t     */\n\t    function debounce(func, wait, options) {\n\t      var args,\n\t          maxTimeoutId,\n\t          result,\n\t          stamp,\n\t          thisArg,\n\t          timeoutId,\n\t          trailingCall,\n\t          lastCalled = 0,\n\t          maxWait = false,\n\t          trailing = true;\n\n\t      if (!isFunction(func)) {\n\t        throw new TypeError;\n\t      }\n\t      wait = nativeMax(0, wait) || 0;\n\t      if (options === true) {\n\t        var leading = true;\n\t        trailing = false;\n\t      } else if (isObject(options)) {\n\t        leading = options.leading;\n\t        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);\n\t        trailing = 'trailing' in options ? options.trailing : trailing;\n\t      }\n\t      var delayed = function() {\n\t        var remaining = wait - (now() - stamp);\n\t        if (remaining <= 0) {\n\t          if (maxTimeoutId) {\n\t            clearTimeout(maxTimeoutId);\n\t          }\n\t          var isCalled = trailingCall;\n\t          maxTimeoutId = timeoutId = trailingCall = undefined;\n\t          if (isCalled) {\n\t            lastCalled = now();\n\t            result = func.apply(thisArg, args);\n\t            if (!timeoutId && !maxTimeoutId) {\n\t              args = thisArg = null;\n\t            }\n\t          }\n\t        } else {\n\t          timeoutId = setTimeout(delayed, remaining);\n\t        }\n\t      };\n\n\t      var maxDelayed = function() {\n\t        if (timeoutId) {\n\t          clearTimeout(timeoutId);\n\t        }\n\t        maxTimeoutId = timeoutId = trailingCall = undefined;\n\t        if (trailing || (maxWait !== wait)) {\n\t          lastCalled = now();\n\t          result = func.apply(thisArg, args);\n\t          if (!timeoutId && !maxTimeoutId) {\n\t            args = thisArg = null;\n\t          }\n\t        }\n\t      };\n\n\t      return function() {\n\t        args = arguments;\n\t        stamp = now();\n\t        thisArg = this;\n\t        trailingCall = trailing && (timeoutId || !leading);\n\n\t        if (maxWait === false) {\n\t          var leadingCall = leading && !timeoutId;\n\t        } else {\n\t          if (!maxTimeoutId && !leading) {\n\t            lastCalled = stamp;\n\t          }\n\t          var remaining = maxWait - (stamp - lastCalled),\n\t              isCalled = remaining <= 0;\n\n\t          if (isCalled) {\n\t            if (maxTimeoutId) {\n\t              maxTimeoutId = clearTimeout(maxTimeoutId);\n\t            }\n\t            lastCalled = stamp;\n\t            result = func.apply(thisArg, args);\n\t          }\n\t          else if (!maxTimeoutId) {\n\t            maxTimeoutId = setTimeout(maxDelayed, remaining);\n\t          }\n\t        }\n\t        if (isCalled && timeoutId) {\n\t          timeoutId = clearTimeout(timeoutId);\n\t        }\n\t        else if (!timeoutId && wait !== maxWait) {\n\t          timeoutId = setTimeout(delayed, wait);\n\t        }\n\t        if (leadingCall) {\n\t          isCalled = true;\n\t          result = func.apply(thisArg, args);\n\t        }\n\t        if (isCalled && !timeoutId && !maxTimeoutId) {\n\t          args = thisArg = null;\n\t        }\n\t        return result;\n\t      };\n\t    }\n\n\t    /**\n\t     * Defers executing the `func` function until the current call stack has cleared.\n\t     * Additional arguments will be provided to `func` when it is invoked.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {Function} func The function to defer.\n\t     * @param {...*} [arg] Arguments to invoke the function with.\n\t     * @returns {number} Returns the timer id.\n\t     * @example\n\t     *\n\t     * _.defer(function(text) { console.log(text); }, 'deferred');\n\t     * // logs 'deferred' after one or more milliseconds\n\t     */\n\t    function defer(func) {\n\t      if (!isFunction(func)) {\n\t        throw new TypeError;\n\t      }\n\t      var args = slice(arguments, 1);\n\t      return setTimeout(function() { func.apply(undefined, args); }, 1);\n\t    }\n\n\t    /**\n\t     * Executes the `func` function after `wait` milliseconds. Additional arguments\n\t     * will be provided to `func` when it is invoked.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {Function} func The function to delay.\n\t     * @param {number} wait The number of milliseconds to delay execution.\n\t     * @param {...*} [arg] Arguments to invoke the function with.\n\t     * @returns {number} Returns the timer id.\n\t     * @example\n\t     *\n\t     * _.delay(function(text) { console.log(text); }, 1000, 'later');\n\t     * // => logs 'later' after one second\n\t     */\n\t    function delay(func, wait) {\n\t      if (!isFunction(func)) {\n\t        throw new TypeError;\n\t      }\n\t      var args = slice(arguments, 2);\n\t      return setTimeout(function() { func.apply(undefined, args); }, wait);\n\t    }\n\n\t    /**\n\t     * Creates a function that memoizes the result of `func`. If `resolver` is\n\t     * provided it will be used to determine the cache key for storing the result\n\t     * based on the arguments provided to the memoized function. By default, the\n\t     * first argument provided to the memoized function is used as the cache key.\n\t     * The `func` is executed with the `this` binding of the memoized function.\n\t     * The result cache is exposed as the `cache` property on the memoized function.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {Function} func The function to have its output memoized.\n\t     * @param {Function} [resolver] A function used to resolve the cache key.\n\t     * @returns {Function} Returns the new memoizing function.\n\t     * @example\n\t     *\n\t     * var fibonacci = _.memoize(function(n) {\n\t     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n\t     * });\n\t     *\n\t     * fibonacci(9)\n\t     * // => 34\n\t     *\n\t     * var data = {\n\t     *   'fred': { 'name': 'fred', 'age': 40 },\n\t     *   'pebbles': { 'name': 'pebbles', 'age': 1 }\n\t     * };\n\t     *\n\t     * // modifying the result cache\n\t     * var get = _.memoize(function(name) { return data[name]; }, _.identity);\n\t     * get('pebbles');\n\t     * // => { 'name': 'pebbles', 'age': 1 }\n\t     *\n\t     * get.cache.pebbles.name = 'penelope';\n\t     * get('pebbles');\n\t     * // => { 'name': 'penelope', 'age': 1 }\n\t     */\n\t    function memoize(func, resolver) {\n\t      if (!isFunction(func)) {\n\t        throw new TypeError;\n\t      }\n\t      var memoized = function() {\n\t        var cache = memoized.cache,\n\t            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];\n\n\t        return hasOwnProperty.call(cache, key)\n\t          ? cache[key]\n\t          : (cache[key] = func.apply(this, arguments));\n\t      }\n\t      memoized.cache = {};\n\t      return memoized;\n\t    }\n\n\t    /**\n\t     * Creates a function that is restricted to execute `func` once. Repeat calls to\n\t     * the function will return the value of the first call. The `func` is executed\n\t     * with the `this` binding of the created function.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {Function} func The function to restrict.\n\t     * @returns {Function} Returns the new restricted function.\n\t     * @example\n\t     *\n\t     * var initialize = _.once(createApplication);\n\t     * initialize();\n\t     * initialize();\n\t     * // `initialize` executes `createApplication` once\n\t     */\n\t    function once(func) {\n\t      var ran,\n\t          result;\n\n\t      if (!isFunction(func)) {\n\t        throw new TypeError;\n\t      }\n\t      return function() {\n\t        if (ran) {\n\t          return result;\n\t        }\n\t        ran = true;\n\t        result = func.apply(this, arguments);\n\n\t        // clear the `func` variable so the function may be garbage collected\n\t        func = null;\n\t        return result;\n\t      };\n\t    }\n\n\t    /**\n\t     * Creates a function that, when called, invokes `func` with any additional\n\t     * `partial` arguments prepended to those provided to the new function. This\n\t     * method is similar to `_.bind` except it does **not** alter the `this` binding.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {Function} func The function to partially apply arguments to.\n\t     * @param {...*} [arg] Arguments to be partially applied.\n\t     * @returns {Function} Returns the new partially applied function.\n\t     * @example\n\t     *\n\t     * var greet = function(greeting, name) { return greeting + ' ' + name; };\n\t     * var hi = _.partial(greet, 'hi');\n\t     * hi('fred');\n\t     * // => 'hi fred'\n\t     */\n\t    function partial(func) {\n\t      return createWrapper(func, 16, slice(arguments, 1));\n\t    }\n\n\t    /**\n\t     * This method is like `_.partial` except that `partial` arguments are\n\t     * appended to those provided to the new function.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {Function} func The function to partially apply arguments to.\n\t     * @param {...*} [arg] Arguments to be partially applied.\n\t     * @returns {Function} Returns the new partially applied function.\n\t     * @example\n\t     *\n\t     * var defaultsDeep = _.partialRight(_.merge, _.defaults);\n\t     *\n\t     * var options = {\n\t     *   'variable': 'data',\n\t     *   'imports': { 'jq': $ }\n\t     * };\n\t     *\n\t     * defaultsDeep(options, _.templateSettings);\n\t     *\n\t     * options.variable\n\t     * // => 'data'\n\t     *\n\t     * options.imports\n\t     * // => { '_': _, 'jq': $ }\n\t     */\n\t    function partialRight(func) {\n\t      return createWrapper(func, 32, null, slice(arguments, 1));\n\t    }\n\n\t    /**\n\t     * Creates a function that, when executed, will only call the `func` function\n\t     * at most once per every `wait` milliseconds. Provide an options object to\n\t     * indicate that `func` should be invoked on the leading and/or trailing edge\n\t     * of the `wait` timeout. Subsequent calls to the throttled function will\n\t     * return the result of the last `func` call.\n\t     *\n\t     * Note: If `leading` and `trailing` options are `true` `func` will be called\n\t     * on the trailing edge of the timeout only if the the throttled function is\n\t     * invoked more than once during the `wait` timeout.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {Function} func The function to throttle.\n\t     * @param {number} wait The number of milliseconds to throttle executions to.\n\t     * @param {Object} [options] The options object.\n\t     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.\n\t     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.\n\t     * @returns {Function} Returns the new throttled function.\n\t     * @example\n\t     *\n\t     * // avoid excessively updating the position while scrolling\n\t     * var throttled = _.throttle(updatePosition, 100);\n\t     * jQuery(window).on('scroll', throttled);\n\t     *\n\t     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes\n\t     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {\n\t     *   'trailing': false\n\t     * }));\n\t     */\n\t    function throttle(func, wait, options) {\n\t      var leading = true,\n\t          trailing = true;\n\n\t      if (!isFunction(func)) {\n\t        throw new TypeError;\n\t      }\n\t      if (options === false) {\n\t        leading = false;\n\t      } else if (isObject(options)) {\n\t        leading = 'leading' in options ? options.leading : leading;\n\t        trailing = 'trailing' in options ? options.trailing : trailing;\n\t      }\n\t      debounceOptions.leading = leading;\n\t      debounceOptions.maxWait = wait;\n\t      debounceOptions.trailing = trailing;\n\n\t      return debounce(func, wait, debounceOptions);\n\t    }\n\n\t    /**\n\t     * Creates a function that provides `value` to the wrapper function as its\n\t     * first argument. Additional arguments provided to the function are appended\n\t     * to those provided to the wrapper function. The wrapper is executed with\n\t     * the `this` binding of the created function.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Functions\n\t     * @param {*} value The value to wrap.\n\t     * @param {Function} wrapper The wrapper function.\n\t     * @returns {Function} Returns the new function.\n\t     * @example\n\t     *\n\t     * var p = _.wrap(_.escape, function(func, text) {\n\t     *   return '<p>' + func(text) + '</p>';\n\t     * });\n\t     *\n\t     * p('Fred, Wilma, & Pebbles');\n\t     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'\n\t     */\n\t    function wrap(value, wrapper) {\n\t      return createWrapper(wrapper, 16, [value]);\n\t    }\n\n\t    /*--------------------------------------------------------------------------*/\n\n\t    /**\n\t     * Creates a function that returns `value`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @param {*} value The value to return from the new function.\n\t     * @returns {Function} Returns the new function.\n\t     * @example\n\t     *\n\t     * var object = { 'name': 'fred' };\n\t     * var getter = _.constant(object);\n\t     * getter() === object;\n\t     * // => true\n\t     */\n\t    function constant(value) {\n\t      return function() {\n\t        return value;\n\t      };\n\t    }\n\n\t    /**\n\t     * Produces a callback bound to an optional `thisArg`. If `func` is a property\n\t     * name the created callback will return the property value for a given element.\n\t     * If `func` is an object the created callback will return `true` for elements\n\t     * that contain the equivalent object properties, otherwise it will return `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @param {*} [func=identity] The value to convert to a callback.\n\t     * @param {*} [thisArg] The `this` binding of the created callback.\n\t     * @param {number} [argCount] The number of arguments the callback accepts.\n\t     * @returns {Function} Returns a callback function.\n\t     * @example\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney', 'age': 36 },\n\t     *   { 'name': 'fred',   'age': 40 }\n\t     * ];\n\t     *\n\t     * // wrap to create custom callback shorthands\n\t     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {\n\t     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);\n\t     *   return !match ? func(callback, thisArg) : function(object) {\n\t     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];\n\t     *   };\n\t     * });\n\t     *\n\t     * _.filter(characters, 'age__gt38');\n\t     * // => [{ 'name': 'fred', 'age': 40 }]\n\t     */\n\t    function createCallback(func, thisArg, argCount) {\n\t      var type = typeof func;\n\t      if (func == null || type == 'function') {\n\t        return baseCreateCallback(func, thisArg, argCount);\n\t      }\n\t      // handle \"_.pluck\" style callback shorthands\n\t      if (type != 'object') {\n\t        return property(func);\n\t      }\n\t      var props = keys(func),\n\t          key = props[0],\n\t          a = func[key];\n\n\t      // handle \"_.where\" style callback shorthands\n\t      if (props.length == 1 && a === a && !isObject(a)) {\n\t        // fast path the common case of providing an object with a single\n\t        // property containing a primitive value\n\t        return function(object) {\n\t          var b = object[key];\n\t          return a === b && (a !== 0 || (1 / a == 1 / b));\n\t        };\n\t      }\n\t      return function(object) {\n\t        var length = props.length,\n\t            result = false;\n\n\t        while (length--) {\n\t          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {\n\t            break;\n\t          }\n\t        }\n\t        return result;\n\t      };\n\t    }\n\n\t    /**\n\t     * Converts the characters `&`, `<`, `>`, `\"`, and `'` in `string` to their\n\t     * corresponding HTML entities.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @param {string} string The string to escape.\n\t     * @returns {string} Returns the escaped string.\n\t     * @example\n\t     *\n\t     * _.escape('Fred, Wilma, & Pebbles');\n\t     * // => 'Fred, Wilma, &amp; Pebbles'\n\t     */\n\t    function escape(string) {\n\t      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);\n\t    }\n\n\t    /**\n\t     * This method returns the first argument provided to it.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @param {*} value Any value.\n\t     * @returns {*} Returns `value`.\n\t     * @example\n\t     *\n\t     * var object = { 'name': 'fred' };\n\t     * _.identity(object) === object;\n\t     * // => true\n\t     */\n\t    function identity(value) {\n\t      return value;\n\t    }\n\n\t    /**\n\t     * Adds function properties of a source object to the destination object.\n\t     * If `object` is a function methods will be added to its prototype as well.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @param {Function|Object} [object=lodash] object The destination object.\n\t     * @param {Object} source The object of functions to add.\n\t     * @param {Object} [options] The options object.\n\t     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.\n\t     * @example\n\t     *\n\t     * function capitalize(string) {\n\t     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n\t     * }\n\t     *\n\t     * _.mixin({ 'capitalize': capitalize });\n\t     * _.capitalize('fred');\n\t     * // => 'Fred'\n\t     *\n\t     * _('fred').capitalize().value();\n\t     * // => 'Fred'\n\t     *\n\t     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });\n\t     * _('fred').capitalize();\n\t     * // => 'Fred'\n\t     */\n\t    function mixin(object, source, options) {\n\t      var chain = true,\n\t          methodNames = source && functions(source);\n\n\t      if (!source || (!options && !methodNames.length)) {\n\t        if (options == null) {\n\t          options = source;\n\t        }\n\t        ctor = lodashWrapper;\n\t        source = object;\n\t        object = lodash;\n\t        methodNames = functions(source);\n\t      }\n\t      if (options === false) {\n\t        chain = false;\n\t      } else if (isObject(options) && 'chain' in options) {\n\t        chain = options.chain;\n\t      }\n\t      var ctor = object,\n\t          isFunc = isFunction(ctor);\n\n\t      forEach(methodNames, function(methodName) {\n\t        var func = object[methodName] = source[methodName];\n\t        if (isFunc) {\n\t          ctor.prototype[methodName] = function() {\n\t            var chainAll = this.__chain__,\n\t                value = this.__wrapped__,\n\t                args = [value];\n\n\t            push.apply(args, arguments);\n\t            var result = func.apply(object, args);\n\t            if (chain || chainAll) {\n\t              if (value === result && isObject(result)) {\n\t                return this;\n\t              }\n\t              result = new ctor(result);\n\t              result.__chain__ = chainAll;\n\t            }\n\t            return result;\n\t          };\n\t        }\n\t      });\n\t    }\n\n\t    /**\n\t     * Reverts the '_' variable to its previous value and returns a reference to\n\t     * the `lodash` function.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @returns {Function} Returns the `lodash` function.\n\t     * @example\n\t     *\n\t     * var lodash = _.noConflict();\n\t     */\n\t    function noConflict() {\n\t      context._ = oldDash;\n\t      return this;\n\t    }\n\n\t    /**\n\t     * A no-operation function.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @example\n\t     *\n\t     * var object = { 'name': 'fred' };\n\t     * _.noop(object) === undefined;\n\t     * // => true\n\t     */\n\t    function noop() {\n\t      // no operation performed\n\t    }\n\n\t    /**\n\t     * Gets the number of milliseconds that have elapsed since the Unix epoch\n\t     * (1 January 1970 00:00:00 UTC).\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @example\n\t     *\n\t     * var stamp = _.now();\n\t     * _.defer(function() { console.log(_.now() - stamp); });\n\t     * // => logs the number of milliseconds it took for the deferred function to be called\n\t     */\n\t    var now = isNative(now = Date.now) && now || function() {\n\t      return new Date().getTime();\n\t    };\n\n\t    /**\n\t     * Converts the given value into an integer of the specified radix.\n\t     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the\n\t     * `value` is a hexadecimal, in which case a `radix` of `16` is used.\n\t     *\n\t     * Note: This method avoids differences in native ES3 and ES5 `parseInt`\n\t     * implementations. See http://es5.github.io/#E.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @param {string} value The value to parse.\n\t     * @param {number} [radix] The radix used to interpret the value to parse.\n\t     * @returns {number} Returns the new integer value.\n\t     * @example\n\t     *\n\t     * _.parseInt('08');\n\t     * // => 8\n\t     */\n\t    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {\n\t      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`\n\t      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);\n\t    };\n\n\t    /**\n\t     * Creates a \"_.pluck\" style function, which returns the `key` value of a\n\t     * given object.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @param {string} key The name of the property to retrieve.\n\t     * @returns {Function} Returns the new function.\n\t     * @example\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'fred',   'age': 40 },\n\t     *   { 'name': 'barney', 'age': 36 }\n\t     * ];\n\t     *\n\t     * var getName = _.property('name');\n\t     *\n\t     * _.map(characters, getName);\n\t     * // => ['barney', 'fred']\n\t     *\n\t     * _.sortBy(characters, getName);\n\t     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]\n\t     */\n\t    function property(key) {\n\t      return function(object) {\n\t        return object[key];\n\t      };\n\t    }\n\n\t    /**\n\t     * Produces a random number between `min` and `max` (inclusive). If only one\n\t     * argument is provided a number between `0` and the given number will be\n\t     * returned. If `floating` is truey or either `min` or `max` are floats a\n\t     * floating-point number will be returned instead of an integer.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @param {number} [min=0] The minimum possible value.\n\t     * @param {number} [max=1] The maximum possible value.\n\t     * @param {boolean} [floating=false] Specify returning a floating-point number.\n\t     * @returns {number} Returns a random number.\n\t     * @example\n\t     *\n\t     * _.random(0, 5);\n\t     * // => an integer between 0 and 5\n\t     *\n\t     * _.random(5);\n\t     * // => also an integer between 0 and 5\n\t     *\n\t     * _.random(5, true);\n\t     * // => a floating-point number between 0 and 5\n\t     *\n\t     * _.random(1.2, 5.2);\n\t     * // => a floating-point number between 1.2 and 5.2\n\t     */\n\t    function random(min, max, floating) {\n\t      var noMin = min == null,\n\t          noMax = max == null;\n\n\t      if (floating == null) {\n\t        if (typeof min == 'boolean' && noMax) {\n\t          floating = min;\n\t          min = 1;\n\t        }\n\t        else if (!noMax && typeof max == 'boolean') {\n\t          floating = max;\n\t          noMax = true;\n\t        }\n\t      }\n\t      if (noMin && noMax) {\n\t        max = 1;\n\t      }\n\t      min = +min || 0;\n\t      if (noMax) {\n\t        max = min;\n\t        min = 0;\n\t      } else {\n\t        max = +max || 0;\n\t      }\n\t      if (floating || min % 1 || max % 1) {\n\t        var rand = nativeRandom();\n\t        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);\n\t      }\n\t      return baseRandom(min, max);\n\t    }\n\n\t    /**\n\t     * Resolves the value of property `key` on `object`. If `key` is a function\n\t     * it will be invoked with the `this` binding of `object` and its result returned,\n\t     * else the property value is returned. If `object` is falsey then `undefined`\n\t     * is returned.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @param {Object} object The object to inspect.\n\t     * @param {string} key The name of the property to resolve.\n\t     * @returns {*} Returns the resolved value.\n\t     * @example\n\t     *\n\t     * var object = {\n\t     *   'cheese': 'crumpets',\n\t     *   'stuff': function() {\n\t     *     return 'nonsense';\n\t     *   }\n\t     * };\n\t     *\n\t     * _.result(object, 'cheese');\n\t     * // => 'crumpets'\n\t     *\n\t     * _.result(object, 'stuff');\n\t     * // => 'nonsense'\n\t     */\n\t    function result(object, key) {\n\t      if (object) {\n\t        var value = object[key];\n\t        return isFunction(value) ? object[key]() : value;\n\t      }\n\t    }\n\n\t    /**\n\t     * A micro-templating method that handles arbitrary delimiters, preserves\n\t     * whitespace, and correctly escapes quotes within interpolated code.\n\t     *\n\t     * Note: In the development build, `_.template` utilizes sourceURLs for easier\n\t     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n\t     *\n\t     * For more information on precompiling templates see:\n\t     * https://lodash.com/custom-builds\n\t     *\n\t     * For more information on Chrome extension sandboxes see:\n\t     * http://developer.chrome.com/stable/extensions/sandboxingEval.html\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @param {string} text The template text.\n\t     * @param {Object} data The data object used to populate the text.\n\t     * @param {Object} [options] The options object.\n\t     * @param {RegExp} [options.escape] The \"escape\" delimiter.\n\t     * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.\n\t     * @param {Object} [options.imports] An object to import into the template as local variables.\n\t     * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.\n\t     * @param {string} [sourceURL] The sourceURL of the template's compiled source.\n\t     * @param {string} [variable] The data object variable name.\n\t     * @returns {Function|string} Returns a compiled function when no `data` object\n\t     *  is given, else it returns the interpolated text.\n\t     * @example\n\t     *\n\t     * // using the \"interpolate\" delimiter to create a compiled template\n\t     * var compiled = _.template('hello <%= name %>');\n\t     * compiled({ 'name': 'fred' });\n\t     * // => 'hello fred'\n\t     *\n\t     * // using the \"escape\" delimiter to escape HTML in data property values\n\t     * _.template('<b><%- value %></b>', { 'value': '<script>' });\n\t     * // => '<b>&lt;script&gt;</b>'\n\t     *\n\t     * // using the \"evaluate\" delimiter to generate HTML\n\t     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';\n\t     * _.template(list, { 'people': ['fred', 'barney'] });\n\t     * // => '<li>fred</li><li>barney</li>'\n\t     *\n\t     * // using the ES6 delimiter as an alternative to the default \"interpolate\" delimiter\n\t     * _.template('hello ${ name }', { 'name': 'pebbles' });\n\t     * // => 'hello pebbles'\n\t     *\n\t     * // using the internal `print` function in \"evaluate\" delimiters\n\t     * _.template('<% print(\"hello \" + name); %>!', { 'name': 'barney' });\n\t     * // => 'hello barney!'\n\t     *\n\t     * // using a custom template delimiters\n\t     * _.templateSettings = {\n\t     *   'interpolate': /{{([\\s\\S]+?)}}/g\n\t     * };\n\t     *\n\t     * _.template('hello {{ name }}!', { 'name': 'mustache' });\n\t     * // => 'hello mustache!'\n\t     *\n\t     * // using the `imports` option to import jQuery\n\t     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';\n\t     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });\n\t     * // => '<li>fred</li><li>barney</li>'\n\t     *\n\t     * // using the `sourceURL` option to specify a custom sourceURL for the template\n\t     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });\n\t     * compiled(data);\n\t     * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n\t     *\n\t     * // using the `variable` option to ensure a with-statement isn't used in the compiled template\n\t     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });\n\t     * compiled.source;\n\t     * // => function(data) {\n\t     *   var __t, __p = '', __e = _.escape;\n\t     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';\n\t     *   return __p;\n\t     * }\n\t     *\n\t     * // using the `source` property to inline compiled templates for meaningful\n\t     * // line numbers in error messages and a stack trace\n\t     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n\t     *   var JST = {\\\n\t     *     \"main\": ' + _.template(mainText).source + '\\\n\t     *   };\\\n\t     * ');\n\t     */\n\t    function template(text, data, options) {\n\t      // based on John Resig's `tmpl` implementation\n\t      // http://ejohn.org/blog/javascript-micro-templating/\n\t      // and Laura Doktorova's doT.js\n\t      // https://github.com/olado/doT\n\t      var settings = lodash.templateSettings;\n\t      text = String(text || '');\n\n\t      // avoid missing dependencies when `iteratorTemplate` is not defined\n\t      options = defaults({}, options, settings);\n\n\t      var imports = defaults({}, options.imports, settings.imports),\n\t          importsKeys = keys(imports),\n\t          importsValues = values(imports);\n\n\t      var isEvaluating,\n\t          index = 0,\n\t          interpolate = options.interpolate || reNoMatch,\n\t          source = \"__p += '\";\n\n\t      // compile the regexp to match each delimiter\n\t      var reDelimiters = RegExp(\n\t        (options.escape || reNoMatch).source + '|' +\n\t        interpolate.source + '|' +\n\t        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n\t        (options.evaluate || reNoMatch).source + '|$'\n\t      , 'g');\n\n\t      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n\t        interpolateValue || (interpolateValue = esTemplateValue);\n\n\t        // escape characters that cannot be included in string literals\n\t        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n\t        // replace delimiters with snippets\n\t        if (escapeValue) {\n\t          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n\t        }\n\t        if (evaluateValue) {\n\t          isEvaluating = true;\n\t          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n\t        }\n\t        if (interpolateValue) {\n\t          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n\t        }\n\t        index = offset + match.length;\n\n\t        // the JS engine embedded in Adobe products requires returning the `match`\n\t        // string in order to produce the correct `offset` value\n\t        return match;\n\t      });\n\n\t      source += \"';\\n\";\n\n\t      // if `variable` is not specified, wrap a with-statement around the generated\n\t      // code to add the data object to the top of the scope chain\n\t      var variable = options.variable,\n\t          hasVariable = variable;\n\n\t      if (!hasVariable) {\n\t        variable = 'obj';\n\t        source = 'with (' + variable + ') {\\n' + source + '\\n}\\n';\n\t      }\n\t      // cleanup code by stripping empty strings\n\t      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n\t        .replace(reEmptyStringMiddle, '$1')\n\t        .replace(reEmptyStringTrailing, '$1;');\n\n\t      // frame code as the function body\n\t      source = 'function(' + variable + ') {\\n' +\n\t        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\\n') +\n\t        \"var __t, __p = '', __e = _.escape\" +\n\t        (isEvaluating\n\t          ? ', __j = Array.prototype.join;\\n' +\n\t            \"function print() { __p += __j.call(arguments, '') }\\n\"\n\t          : ';\\n'\n\t        ) +\n\t        source +\n\t        'return __p\\n}';\n\n\t      // Use a sourceURL for easier debugging.\n\t      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n\t      var sourceURL = '\\n/*\\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\\n*/';\n\n\t      try {\n\t        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);\n\t      } catch(e) {\n\t        e.source = source;\n\t        throw e;\n\t      }\n\t      if (data) {\n\t        return result(data);\n\t      }\n\t      // provide the compiled function's source by its `toString` method, in\n\t      // supported environments, or the `source` property as a convenience for\n\t      // inlining compiled templates during the build process\n\t      result.source = source;\n\t      return result;\n\t    }\n\n\t    /**\n\t     * Executes the callback `n` times, returning an array of the results\n\t     * of each callback execution. The callback is bound to `thisArg` and invoked\n\t     * with one argument; (index).\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @param {number} n The number of times to execute the callback.\n\t     * @param {Function} callback The function called per iteration.\n\t     * @param {*} [thisArg] The `this` binding of `callback`.\n\t     * @returns {Array} Returns an array of the results of each `callback` execution.\n\t     * @example\n\t     *\n\t     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));\n\t     * // => [3, 6, 4]\n\t     *\n\t     * _.times(3, function(n) { mage.castSpell(n); });\n\t     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively\n\t     *\n\t     * _.times(3, function(n) { this.cast(n); }, mage);\n\t     * // => also calls `mage.castSpell(n)` three times\n\t     */\n\t    function times(n, callback, thisArg) {\n\t      n = (n = +n) > -1 ? n : 0;\n\t      var index = -1,\n\t          result = Array(n);\n\n\t      callback = baseCreateCallback(callback, thisArg, 1);\n\t      while (++index < n) {\n\t        result[index] = callback(index);\n\t      }\n\t      return result;\n\t    }\n\n\t    /**\n\t     * The inverse of `_.escape` this method converts the HTML entities\n\t     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their\n\t     * corresponding characters.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @param {string} string The string to unescape.\n\t     * @returns {string} Returns the unescaped string.\n\t     * @example\n\t     *\n\t     * _.unescape('Fred, Barney &amp; Pebbles');\n\t     * // => 'Fred, Barney & Pebbles'\n\t     */\n\t    function unescape(string) {\n\t      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);\n\t    }\n\n\t    /**\n\t     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Utilities\n\t     * @param {string} [prefix] The value to prefix the ID with.\n\t     * @returns {string} Returns the unique ID.\n\t     * @example\n\t     *\n\t     * _.uniqueId('contact_');\n\t     * // => 'contact_104'\n\t     *\n\t     * _.uniqueId();\n\t     * // => '105'\n\t     */\n\t    function uniqueId(prefix) {\n\t      var id = ++idCounter;\n\t      return String(prefix == null ? '' : prefix) + id;\n\t    }\n\n\t    /*--------------------------------------------------------------------------*/\n\n\t    /**\n\t     * Creates a `lodash` object that wraps the given value with explicit\n\t     * method chaining enabled.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Chaining\n\t     * @param {*} value The value to wrap.\n\t     * @returns {Object} Returns the wrapper object.\n\t     * @example\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney',  'age': 36 },\n\t     *   { 'name': 'fred',    'age': 40 },\n\t     *   { 'name': 'pebbles', 'age': 1 }\n\t     * ];\n\t     *\n\t     * var youngest = _.chain(characters)\n\t     *     .sortBy('age')\n\t     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })\n\t     *     .first()\n\t     *     .value();\n\t     * // => 'pebbles is 1'\n\t     */\n\t    function chain(value) {\n\t      value = new lodashWrapper(value);\n\t      value.__chain__ = true;\n\t      return value;\n\t    }\n\n\t    /**\n\t     * Invokes `interceptor` with the `value` as the first argument and then\n\t     * returns `value`. The purpose of this method is to \"tap into\" a method\n\t     * chain in order to perform operations on intermediate results within\n\t     * the chain.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Chaining\n\t     * @param {*} value The value to provide to `interceptor`.\n\t     * @param {Function} interceptor The function to invoke.\n\t     * @returns {*} Returns `value`.\n\t     * @example\n\t     *\n\t     * _([1, 2, 3, 4])\n\t     *  .tap(function(array) { array.pop(); })\n\t     *  .reverse()\n\t     *  .value();\n\t     * // => [3, 2, 1]\n\t     */\n\t    function tap(value, interceptor) {\n\t      interceptor(value);\n\t      return value;\n\t    }\n\n\t    /**\n\t     * Enables explicit method chaining on the wrapper object.\n\t     *\n\t     * @name chain\n\t     * @memberOf _\n\t     * @category Chaining\n\t     * @returns {*} Returns the wrapper object.\n\t     * @example\n\t     *\n\t     * var characters = [\n\t     *   { 'name': 'barney', 'age': 36 },\n\t     *   { 'name': 'fred',   'age': 40 }\n\t     * ];\n\t     *\n\t     * // without explicit chaining\n\t     * _(characters).first();\n\t     * // => { 'name': 'barney', 'age': 36 }\n\t     *\n\t     * // with explicit chaining\n\t     * _(characters).chain()\n\t     *   .first()\n\t     *   .pick('age')\n\t     *   .value();\n\t     * // => { 'age': 36 }\n\t     */\n\t    function wrapperChain() {\n\t      this.__chain__ = true;\n\t      return this;\n\t    }\n\n\t    /**\n\t     * Produces the `toString` result of the wrapped value.\n\t     *\n\t     * @name toString\n\t     * @memberOf _\n\t     * @category Chaining\n\t     * @returns {string} Returns the string result.\n\t     * @example\n\t     *\n\t     * _([1, 2, 3]).toString();\n\t     * // => '1,2,3'\n\t     */\n\t    function wrapperToString() {\n\t      return String(this.__wrapped__);\n\t    }\n\n\t    /**\n\t     * Extracts the wrapped value.\n\t     *\n\t     * @name valueOf\n\t     * @memberOf _\n\t     * @alias value\n\t     * @category Chaining\n\t     * @returns {*} Returns the wrapped value.\n\t     * @example\n\t     *\n\t     * _([1, 2, 3]).valueOf();\n\t     * // => [1, 2, 3]\n\t     */\n\t    function wrapperValueOf() {\n\t      return this.__wrapped__;\n\t    }\n\n\t    /*--------------------------------------------------------------------------*/\n\n\t    // add functions that return wrapped values when chaining\n\t    lodash.after = after;\n\t    lodash.assign = assign;\n\t    lodash.at = at;\n\t    lodash.bind = bind;\n\t    lodash.bindAll = bindAll;\n\t    lodash.bindKey = bindKey;\n\t    lodash.chain = chain;\n\t    lodash.compact = compact;\n\t    lodash.compose = compose;\n\t    lodash.constant = constant;\n\t    lodash.countBy = countBy;\n\t    lodash.create = create;\n\t    lodash.createCallback = createCallback;\n\t    lodash.curry = curry;\n\t    lodash.debounce = debounce;\n\t    lodash.defaults = defaults;\n\t    lodash.defer = defer;\n\t    lodash.delay = delay;\n\t    lodash.difference = difference;\n\t    lodash.filter = filter;\n\t    lodash.flatten = flatten;\n\t    lodash.forEach = forEach;\n\t    lodash.forEachRight = forEachRight;\n\t    lodash.forIn = forIn;\n\t    lodash.forInRight = forInRight;\n\t    lodash.forOwn = forOwn;\n\t    lodash.forOwnRight = forOwnRight;\n\t    lodash.functions = functions;\n\t    lodash.groupBy = groupBy;\n\t    lodash.indexBy = indexBy;\n\t    lodash.initial = initial;\n\t    lodash.intersection = intersection;\n\t    lodash.invert = invert;\n\t    lodash.invoke = invoke;\n\t    lodash.keys = keys;\n\t    lodash.map = map;\n\t    lodash.mapValues = mapValues;\n\t    lodash.max = max;\n\t    lodash.memoize = memoize;\n\t    lodash.merge = merge;\n\t    lodash.min = min;\n\t    lodash.omit = omit;\n\t    lodash.once = once;\n\t    lodash.pairs = pairs;\n\t    lodash.partial = partial;\n\t    lodash.partialRight = partialRight;\n\t    lodash.pick = pick;\n\t    lodash.pluck = pluck;\n\t    lodash.property = property;\n\t    lodash.pull = pull;\n\t    lodash.range = range;\n\t    lodash.reject = reject;\n\t    lodash.remove = remove;\n\t    lodash.rest = rest;\n\t    lodash.shuffle = shuffle;\n\t    lodash.sortBy = sortBy;\n\t    lodash.tap = tap;\n\t    lodash.throttle = throttle;\n\t    lodash.times = times;\n\t    lodash.toArray = toArray;\n\t    lodash.transform = transform;\n\t    lodash.union = union;\n\t    lodash.uniq = uniq;\n\t    lodash.values = values;\n\t    lodash.where = where;\n\t    lodash.without = without;\n\t    lodash.wrap = wrap;\n\t    lodash.xor = xor;\n\t    lodash.zip = zip;\n\t    lodash.zipObject = zipObject;\n\n\t    // add aliases\n\t    lodash.collect = map;\n\t    lodash.drop = rest;\n\t    lodash.each = forEach;\n\t    lodash.eachRight = forEachRight;\n\t    lodash.extend = assign;\n\t    lodash.methods = functions;\n\t    lodash.object = zipObject;\n\t    lodash.select = filter;\n\t    lodash.tail = rest;\n\t    lodash.unique = uniq;\n\t    lodash.unzip = zip;\n\n\t    // add functions to `lodash.prototype`\n\t    mixin(lodash);\n\n\t    /*--------------------------------------------------------------------------*/\n\n\t    // add functions that return unwrapped values when chaining\n\t    lodash.clone = clone;\n\t    lodash.cloneDeep = cloneDeep;\n\t    lodash.contains = contains;\n\t    lodash.escape = escape;\n\t    lodash.every = every;\n\t    lodash.find = find;\n\t    lodash.findIndex = findIndex;\n\t    lodash.findKey = findKey;\n\t    lodash.findLast = findLast;\n\t    lodash.findLastIndex = findLastIndex;\n\t    lodash.findLastKey = findLastKey;\n\t    lodash.has = has;\n\t    lodash.identity = identity;\n\t    lodash.indexOf = indexOf;\n\t    lodash.isArguments = isArguments;\n\t    lodash.isArray = isArray;\n\t    lodash.isBoolean = isBoolean;\n\t    lodash.isDate = isDate;\n\t    lodash.isElement = isElement;\n\t    lodash.isEmpty = isEmpty;\n\t    lodash.isEqual = isEqual;\n\t    lodash.isFinite = isFinite;\n\t    lodash.isFunction = isFunction;\n\t    lodash.isNaN = isNaN;\n\t    lodash.isNull = isNull;\n\t    lodash.isNumber = isNumber;\n\t    lodash.isObject = isObject;\n\t    lodash.isPlainObject = isPlainObject;\n\t    lodash.isRegExp = isRegExp;\n\t    lodash.isString = isString;\n\t    lodash.isUndefined = isUndefined;\n\t    lodash.lastIndexOf = lastIndexOf;\n\t    lodash.mixin = mixin;\n\t    lodash.noConflict = noConflict;\n\t    lodash.noop = noop;\n\t    lodash.now = now;\n\t    lodash.parseInt = parseInt;\n\t    lodash.random = random;\n\t    lodash.reduce = reduce;\n\t    lodash.reduceRight = reduceRight;\n\t    lodash.result = result;\n\t    lodash.runInContext = runInContext;\n\t    lodash.size = size;\n\t    lodash.some = some;\n\t    lodash.sortedIndex = sortedIndex;\n\t    lodash.template = template;\n\t    lodash.unescape = unescape;\n\t    lodash.uniqueId = uniqueId;\n\n\t    // add aliases\n\t    lodash.all = every;\n\t    lodash.any = some;\n\t    lodash.detect = find;\n\t    lodash.findWhere = find;\n\t    lodash.foldl = reduce;\n\t    lodash.foldr = reduceRight;\n\t    lodash.include = contains;\n\t    lodash.inject = reduce;\n\n\t    mixin(function() {\n\t      var source = {}\n\t      forOwn(lodash, function(func, methodName) {\n\t        if (!lodash.prototype[methodName]) {\n\t          source[methodName] = func;\n\t        }\n\t      });\n\t      return source;\n\t    }(), false);\n\n\t    /*--------------------------------------------------------------------------*/\n\n\t    // add functions capable of returning wrapped and unwrapped values when chaining\n\t    lodash.first = first;\n\t    lodash.last = last;\n\t    lodash.sample = sample;\n\n\t    // add aliases\n\t    lodash.take = first;\n\t    lodash.head = first;\n\n\t    forOwn(lodash, function(func, methodName) {\n\t      var callbackable = methodName !== 'sample';\n\t      if (!lodash.prototype[methodName]) {\n\t        lodash.prototype[methodName]= function(n, guard) {\n\t          var chainAll = this.__chain__,\n\t              result = func(this.__wrapped__, n, guard);\n\n\t          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))\n\t            ? result\n\t            : new lodashWrapper(result, chainAll);\n\t        };\n\t      }\n\t    });\n\n\t    /*--------------------------------------------------------------------------*/\n\n\t    /**\n\t     * The semantic version number.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @type string\n\t     */\n\t    lodash.VERSION = '2.4.2';\n\n\t    // add \"Chaining\" functions to the wrapper\n\t    lodash.prototype.chain = wrapperChain;\n\t    lodash.prototype.toString = wrapperToString;\n\t    lodash.prototype.value = wrapperValueOf;\n\t    lodash.prototype.valueOf = wrapperValueOf;\n\n\t    // add `Array` functions that return unwrapped values\n\t    baseEach(['join', 'pop', 'shift'], function(methodName) {\n\t      var func = arrayRef[methodName];\n\t      lodash.prototype[methodName] = function() {\n\t        var chainAll = this.__chain__,\n\t            result = func.apply(this.__wrapped__, arguments);\n\n\t        return chainAll\n\t          ? new lodashWrapper(result, chainAll)\n\t          : result;\n\t      };\n\t    });\n\n\t    // add `Array` functions that return the existing wrapped value\n\t    baseEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {\n\t      var func = arrayRef[methodName];\n\t      lodash.prototype[methodName] = function() {\n\t        func.apply(this.__wrapped__, arguments);\n\t        return this;\n\t      };\n\t    });\n\n\t    // add `Array` functions that return new wrapped values\n\t    baseEach(['concat', 'slice', 'splice'], function(methodName) {\n\t      var func = arrayRef[methodName];\n\t      lodash.prototype[methodName] = function() {\n\t        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);\n\t      };\n\t    });\n\n\t    // avoid array-like object bugs with `Array#shift` and `Array#splice`\n\t    // in IE < 9, Firefox < 10, Narwhal, and RingoJS\n\t    if (!support.spliceObjects) {\n\t      baseEach(['pop', 'shift', 'splice'], function(methodName) {\n\t        var func = arrayRef[methodName],\n\t            isSplice = methodName == 'splice';\n\n\t        lodash.prototype[methodName] = function() {\n\t          var chainAll = this.__chain__,\n\t              value = this.__wrapped__,\n\t              result = func.apply(value, arguments);\n\n\t          if (value.length === 0) {\n\t            delete value[0];\n\t          }\n\t          return (chainAll || isSplice)\n\t            ? new lodashWrapper(result, chainAll)\n\t            : result;\n\t        };\n\t      });\n\t    }\n\n\t    return lodash;\n\t  }\n\n\t  /*--------------------------------------------------------------------------*/\n\n\t  // expose Lo-Dash\n\t  var _ = runInContext();\n\n\t  // some AMD build optimizers like r.js check for condition patterns like the following:\n\t  if (true) {\n\t    // Expose Lo-Dash to the global object even when an AMD loader is present in\n\t    // case Lo-Dash is loaded with a RequireJS shim config.\n\t    // See http://requirejs.org/docs/api.html#config-shim\n\t    root._ = _;\n\n\t    // define as an anonymous module so, through path mapping, it can be\n\t    // referenced as the \"underscore\" module\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return _;\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  }\n\t  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n\t  else if (freeExports && freeModule) {\n\t    // in Node.js or RingoJS\n\t    if (moduleExports) {\n\t      (freeModule.exports = _)._ = _;\n\t    }\n\t    // in Narwhal or Rhino -require\n\t    else {\n\t      freeExports._ = _;\n\t    }\n\t  }\n\t  else {\n\t    // in a browser or Rhino\n\t    root._ = _;\n\t  }\n\t}.call(this));\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)(module), (function() { return this; }())))\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * lodash (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modularize exports=\"npm\" -o ./`\n\t * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n\t * Released under MIT license <https://lodash.com/license>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t */\n\n\t/** Used as the `TypeError` message for \"Functions\" methods. */\n\tvar FUNC_ERROR_TEXT = 'Expected a function';\n\n\t/** Used to stand-in for `undefined` hash values. */\n\tvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n\t/** Used as references for various `Number` constants. */\n\tvar INFINITY = 1 / 0;\n\n\t/** `Object#toString` result references. */\n\tvar funcTag = '[object Function]',\n\t    genTag = '[object GeneratorFunction]',\n\t    symbolTag = '[object Symbol]';\n\n\t/** Used to match property names within property paths. */\n\tvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n\t    reIsPlainProp = /^\\w*$/,\n\t    reLeadingDot = /^\\./,\n\t    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n\t/**\n\t * Used to match `RegExp`\n\t * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n\t */\n\tvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n\t/** Used to match backslashes in property paths. */\n\tvar reEscapeChar = /\\\\(\\\\)?/g;\n\n\t/** Used to detect host constructors (Safari). */\n\tvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n\t/** Detect free variable `global` from Node.js. */\n\tvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n\t/** Detect free variable `self`. */\n\tvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n\t/** Used as a reference to the global object. */\n\tvar root = freeGlobal || freeSelf || Function('return this')();\n\n\t/**\n\t * Gets the value at `key` of `object`.\n\t *\n\t * @private\n\t * @param {Object} [object] The object to query.\n\t * @param {string} key The key of the property to get.\n\t * @returns {*} Returns the property value.\n\t */\n\tfunction getValue(object, key) {\n\t  return object == null ? undefined : object[key];\n\t}\n\n\t/**\n\t * Checks if `value` is a host object in IE < 9.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n\t */\n\tfunction isHostObject(value) {\n\t  // Many host objects are `Object` objects that can coerce to strings\n\t  // despite having improperly defined `toString` methods.\n\t  var result = false;\n\t  if (value != null && typeof value.toString != 'function') {\n\t    try {\n\t      result = !!(value + '');\n\t    } catch (e) {}\n\t  }\n\t  return result;\n\t}\n\n\t/** Used for built-in method references. */\n\tvar arrayProto = Array.prototype,\n\t    funcProto = Function.prototype,\n\t    objectProto = Object.prototype;\n\n\t/** Used to detect overreaching core-js shims. */\n\tvar coreJsData = root['__core-js_shared__'];\n\n\t/** Used to detect methods masquerading as native. */\n\tvar maskSrcKey = (function() {\n\t  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n\t  return uid ? ('Symbol(src)_1.' + uid) : '';\n\t}());\n\n\t/** Used to resolve the decompiled source of functions. */\n\tvar funcToString = funcProto.toString;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\n\t/**\n\t * Used to resolve the\n\t * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objectToString = objectProto.toString;\n\n\t/** Used to detect if a method is native. */\n\tvar reIsNative = RegExp('^' +\n\t  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n\t  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n\t);\n\n\t/** Built-in value references. */\n\tvar Symbol = root.Symbol,\n\t    splice = arrayProto.splice;\n\n\t/* Built-in method references that are verified to be native. */\n\tvar Map = getNative(root, 'Map'),\n\t    nativeCreate = getNative(Object, 'create');\n\n\t/** Used to convert symbols to primitives and strings. */\n\tvar symbolProto = Symbol ? Symbol.prototype : undefined,\n\t    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n\t/**\n\t * Creates a hash object.\n\t *\n\t * @private\n\t * @constructor\n\t * @param {Array} [entries] The key-value pairs to cache.\n\t */\n\tfunction Hash(entries) {\n\t  var index = -1,\n\t      length = entries ? entries.length : 0;\n\n\t  this.clear();\n\t  while (++index < length) {\n\t    var entry = entries[index];\n\t    this.set(entry[0], entry[1]);\n\t  }\n\t}\n\n\t/**\n\t * Removes all key-value entries from the hash.\n\t *\n\t * @private\n\t * @name clear\n\t * @memberOf Hash\n\t */\n\tfunction hashClear() {\n\t  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n\t}\n\n\t/**\n\t * Removes `key` and its value from the hash.\n\t *\n\t * @private\n\t * @name delete\n\t * @memberOf Hash\n\t * @param {Object} hash The hash to modify.\n\t * @param {string} key The key of the value to remove.\n\t * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t */\n\tfunction hashDelete(key) {\n\t  return this.has(key) && delete this.__data__[key];\n\t}\n\n\t/**\n\t * Gets the hash value for `key`.\n\t *\n\t * @private\n\t * @name get\n\t * @memberOf Hash\n\t * @param {string} key The key of the value to get.\n\t * @returns {*} Returns the entry value.\n\t */\n\tfunction hashGet(key) {\n\t  var data = this.__data__;\n\t  if (nativeCreate) {\n\t    var result = data[key];\n\t    return result === HASH_UNDEFINED ? undefined : result;\n\t  }\n\t  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n\t}\n\n\t/**\n\t * Checks if a hash value for `key` exists.\n\t *\n\t * @private\n\t * @name has\n\t * @memberOf Hash\n\t * @param {string} key The key of the entry to check.\n\t * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t */\n\tfunction hashHas(key) {\n\t  var data = this.__data__;\n\t  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n\t}\n\n\t/**\n\t * Sets the hash `key` to `value`.\n\t *\n\t * @private\n\t * @name set\n\t * @memberOf Hash\n\t * @param {string} key The key of the value to set.\n\t * @param {*} value The value to set.\n\t * @returns {Object} Returns the hash instance.\n\t */\n\tfunction hashSet(key, value) {\n\t  var data = this.__data__;\n\t  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n\t  return this;\n\t}\n\n\t// Add methods to `Hash`.\n\tHash.prototype.clear = hashClear;\n\tHash.prototype['delete'] = hashDelete;\n\tHash.prototype.get = hashGet;\n\tHash.prototype.has = hashHas;\n\tHash.prototype.set = hashSet;\n\n\t/**\n\t * Creates an list cache object.\n\t *\n\t * @private\n\t * @constructor\n\t * @param {Array} [entries] The key-value pairs to cache.\n\t */\n\tfunction ListCache(entries) {\n\t  var index = -1,\n\t      length = entries ? entries.length : 0;\n\n\t  this.clear();\n\t  while (++index < length) {\n\t    var entry = entries[index];\n\t    this.set(entry[0], entry[1]);\n\t  }\n\t}\n\n\t/**\n\t * Removes all key-value entries from the list cache.\n\t *\n\t * @private\n\t * @name clear\n\t * @memberOf ListCache\n\t */\n\tfunction listCacheClear() {\n\t  this.__data__ = [];\n\t}\n\n\t/**\n\t * Removes `key` and its value from the list cache.\n\t *\n\t * @private\n\t * @name delete\n\t * @memberOf ListCache\n\t * @param {string} key The key of the value to remove.\n\t * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t */\n\tfunction listCacheDelete(key) {\n\t  var data = this.__data__,\n\t      index = assocIndexOf(data, key);\n\n\t  if (index < 0) {\n\t    return false;\n\t  }\n\t  var lastIndex = data.length - 1;\n\t  if (index == lastIndex) {\n\t    data.pop();\n\t  } else {\n\t    splice.call(data, index, 1);\n\t  }\n\t  return true;\n\t}\n\n\t/**\n\t * Gets the list cache value for `key`.\n\t *\n\t * @private\n\t * @name get\n\t * @memberOf ListCache\n\t * @param {string} key The key of the value to get.\n\t * @returns {*} Returns the entry value.\n\t */\n\tfunction listCacheGet(key) {\n\t  var data = this.__data__,\n\t      index = assocIndexOf(data, key);\n\n\t  return index < 0 ? undefined : data[index][1];\n\t}\n\n\t/**\n\t * Checks if a list cache value for `key` exists.\n\t *\n\t * @private\n\t * @name has\n\t * @memberOf ListCache\n\t * @param {string} key The key of the entry to check.\n\t * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t */\n\tfunction listCacheHas(key) {\n\t  return assocIndexOf(this.__data__, key) > -1;\n\t}\n\n\t/**\n\t * Sets the list cache `key` to `value`.\n\t *\n\t * @private\n\t * @name set\n\t * @memberOf ListCache\n\t * @param {string} key The key of the value to set.\n\t * @param {*} value The value to set.\n\t * @returns {Object} Returns the list cache instance.\n\t */\n\tfunction listCacheSet(key, value) {\n\t  var data = this.__data__,\n\t      index = assocIndexOf(data, key);\n\n\t  if (index < 0) {\n\t    data.push([key, value]);\n\t  } else {\n\t    data[index][1] = value;\n\t  }\n\t  return this;\n\t}\n\n\t// Add methods to `ListCache`.\n\tListCache.prototype.clear = listCacheClear;\n\tListCache.prototype['delete'] = listCacheDelete;\n\tListCache.prototype.get = listCacheGet;\n\tListCache.prototype.has = listCacheHas;\n\tListCache.prototype.set = listCacheSet;\n\n\t/**\n\t * Creates a map cache object to store key-value pairs.\n\t *\n\t * @private\n\t * @constructor\n\t * @param {Array} [entries] The key-value pairs to cache.\n\t */\n\tfunction MapCache(entries) {\n\t  var index = -1,\n\t      length = entries ? entries.length : 0;\n\n\t  this.clear();\n\t  while (++index < length) {\n\t    var entry = entries[index];\n\t    this.set(entry[0], entry[1]);\n\t  }\n\t}\n\n\t/**\n\t * Removes all key-value entries from the map.\n\t *\n\t * @private\n\t * @name clear\n\t * @memberOf MapCache\n\t */\n\tfunction mapCacheClear() {\n\t  this.__data__ = {\n\t    'hash': new Hash,\n\t    'map': new (Map || ListCache),\n\t    'string': new Hash\n\t  };\n\t}\n\n\t/**\n\t * Removes `key` and its value from the map.\n\t *\n\t * @private\n\t * @name delete\n\t * @memberOf MapCache\n\t * @param {string} key The key of the value to remove.\n\t * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t */\n\tfunction mapCacheDelete(key) {\n\t  return getMapData(this, key)['delete'](key);\n\t}\n\n\t/**\n\t * Gets the map value for `key`.\n\t *\n\t * @private\n\t * @name get\n\t * @memberOf MapCache\n\t * @param {string} key The key of the value to get.\n\t * @returns {*} Returns the entry value.\n\t */\n\tfunction mapCacheGet(key) {\n\t  return getMapData(this, key).get(key);\n\t}\n\n\t/**\n\t * Checks if a map value for `key` exists.\n\t *\n\t * @private\n\t * @name has\n\t * @memberOf MapCache\n\t * @param {string} key The key of the entry to check.\n\t * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t */\n\tfunction mapCacheHas(key) {\n\t  return getMapData(this, key).has(key);\n\t}\n\n\t/**\n\t * Sets the map `key` to `value`.\n\t *\n\t * @private\n\t * @name set\n\t * @memberOf MapCache\n\t * @param {string} key The key of the value to set.\n\t * @param {*} value The value to set.\n\t * @returns {Object} Returns the map cache instance.\n\t */\n\tfunction mapCacheSet(key, value) {\n\t  getMapData(this, key).set(key, value);\n\t  return this;\n\t}\n\n\t// Add methods to `MapCache`.\n\tMapCache.prototype.clear = mapCacheClear;\n\tMapCache.prototype['delete'] = mapCacheDelete;\n\tMapCache.prototype.get = mapCacheGet;\n\tMapCache.prototype.has = mapCacheHas;\n\tMapCache.prototype.set = mapCacheSet;\n\n\t/**\n\t * Gets the index at which the `key` is found in `array` of key-value pairs.\n\t *\n\t * @private\n\t * @param {Array} array The array to inspect.\n\t * @param {*} key The key to search for.\n\t * @returns {number} Returns the index of the matched value, else `-1`.\n\t */\n\tfunction assocIndexOf(array, key) {\n\t  var length = array.length;\n\t  while (length--) {\n\t    if (eq(array[length][0], key)) {\n\t      return length;\n\t    }\n\t  }\n\t  return -1;\n\t}\n\n\t/**\n\t * The base implementation of `_.get` without support for default values.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {Array|string} path The path of the property to get.\n\t * @returns {*} Returns the resolved value.\n\t */\n\tfunction baseGet(object, path) {\n\t  path = isKey(path, object) ? [path] : castPath(path);\n\n\t  var index = 0,\n\t      length = path.length;\n\n\t  while (object != null && index < length) {\n\t    object = object[toKey(path[index++])];\n\t  }\n\t  return (index && index == length) ? object : undefined;\n\t}\n\n\t/**\n\t * The base implementation of `_.isNative` without bad shim checks.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a native function,\n\t *  else `false`.\n\t */\n\tfunction baseIsNative(value) {\n\t  if (!isObject(value) || isMasked(value)) {\n\t    return false;\n\t  }\n\t  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n\t  return pattern.test(toSource(value));\n\t}\n\n\t/**\n\t * The base implementation of `_.toString` which doesn't convert nullish\n\t * values to empty strings.\n\t *\n\t * @private\n\t * @param {*} value The value to process.\n\t * @returns {string} Returns the string.\n\t */\n\tfunction baseToString(value) {\n\t  // Exit early for strings to avoid a performance hit in some environments.\n\t  if (typeof value == 'string') {\n\t    return value;\n\t  }\n\t  if (isSymbol(value)) {\n\t    return symbolToString ? symbolToString.call(value) : '';\n\t  }\n\t  var result = (value + '');\n\t  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n\t}\n\n\t/**\n\t * Casts `value` to a path array if it's not one.\n\t *\n\t * @private\n\t * @param {*} value The value to inspect.\n\t * @returns {Array} Returns the cast property path array.\n\t */\n\tfunction castPath(value) {\n\t  return isArray(value) ? value : stringToPath(value);\n\t}\n\n\t/**\n\t * Gets the data for `map`.\n\t *\n\t * @private\n\t * @param {Object} map The map to query.\n\t * @param {string} key The reference key.\n\t * @returns {*} Returns the map data.\n\t */\n\tfunction getMapData(map, key) {\n\t  var data = map.__data__;\n\t  return isKeyable(key)\n\t    ? data[typeof key == 'string' ? 'string' : 'hash']\n\t    : data.map;\n\t}\n\n\t/**\n\t * Gets the native function at `key` of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {string} key The key of the method to get.\n\t * @returns {*} Returns the function if it's native, else `undefined`.\n\t */\n\tfunction getNative(object, key) {\n\t  var value = getValue(object, key);\n\t  return baseIsNative(value) ? value : undefined;\n\t}\n\n\t/**\n\t * Checks if `value` is a property name and not a property path.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @param {Object} [object] The object to query keys on.\n\t * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n\t */\n\tfunction isKey(value, object) {\n\t  if (isArray(value)) {\n\t    return false;\n\t  }\n\t  var type = typeof value;\n\t  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n\t      value == null || isSymbol(value)) {\n\t    return true;\n\t  }\n\t  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n\t    (object != null && value in Object(object));\n\t}\n\n\t/**\n\t * Checks if `value` is suitable for use as unique object key.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n\t */\n\tfunction isKeyable(value) {\n\t  var type = typeof value;\n\t  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n\t    ? (value !== '__proto__')\n\t    : (value === null);\n\t}\n\n\t/**\n\t * Checks if `func` has its source masked.\n\t *\n\t * @private\n\t * @param {Function} func The function to check.\n\t * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n\t */\n\tfunction isMasked(func) {\n\t  return !!maskSrcKey && (maskSrcKey in func);\n\t}\n\n\t/**\n\t * Converts `string` to a property path array.\n\t *\n\t * @private\n\t * @param {string} string The string to convert.\n\t * @returns {Array} Returns the property path array.\n\t */\n\tvar stringToPath = memoize(function(string) {\n\t  string = toString(string);\n\n\t  var result = [];\n\t  if (reLeadingDot.test(string)) {\n\t    result.push('');\n\t  }\n\t  string.replace(rePropName, function(match, number, quote, string) {\n\t    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n\t  });\n\t  return result;\n\t});\n\n\t/**\n\t * Converts `value` to a string key if it's not a string or symbol.\n\t *\n\t * @private\n\t * @param {*} value The value to inspect.\n\t * @returns {string|symbol} Returns the key.\n\t */\n\tfunction toKey(value) {\n\t  if (typeof value == 'string' || isSymbol(value)) {\n\t    return value;\n\t  }\n\t  var result = (value + '');\n\t  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n\t}\n\n\t/**\n\t * Converts `func` to its source code.\n\t *\n\t * @private\n\t * @param {Function} func The function to process.\n\t * @returns {string} Returns the source code.\n\t */\n\tfunction toSource(func) {\n\t  if (func != null) {\n\t    try {\n\t      return funcToString.call(func);\n\t    } catch (e) {}\n\t    try {\n\t      return (func + '');\n\t    } catch (e) {}\n\t  }\n\t  return '';\n\t}\n\n\t/**\n\t * Creates a function that memoizes the result of `func`. If `resolver` is\n\t * provided, it determines the cache key for storing the result based on the\n\t * arguments provided to the memoized function. By default, the first argument\n\t * provided to the memoized function is used as the map cache key. The `func`\n\t * is invoked with the `this` binding of the memoized function.\n\t *\n\t * **Note:** The cache is exposed as the `cache` property on the memoized\n\t * function. Its creation may be customized by replacing the `_.memoize.Cache`\n\t * constructor with one whose instances implement the\n\t * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n\t * method interface of `delete`, `get`, `has`, and `set`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Function\n\t * @param {Function} func The function to have its output memoized.\n\t * @param {Function} [resolver] The function to resolve the cache key.\n\t * @returns {Function} Returns the new memoized function.\n\t * @example\n\t *\n\t * var object = { 'a': 1, 'b': 2 };\n\t * var other = { 'c': 3, 'd': 4 };\n\t *\n\t * var values = _.memoize(_.values);\n\t * values(object);\n\t * // => [1, 2]\n\t *\n\t * values(other);\n\t * // => [3, 4]\n\t *\n\t * object.a = 2;\n\t * values(object);\n\t * // => [1, 2]\n\t *\n\t * // Modify the result cache.\n\t * values.cache.set(object, ['a', 'b']);\n\t * values(object);\n\t * // => ['a', 'b']\n\t *\n\t * // Replace `_.memoize.Cache`.\n\t * _.memoize.Cache = WeakMap;\n\t */\n\tfunction memoize(func, resolver) {\n\t  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n\t    throw new TypeError(FUNC_ERROR_TEXT);\n\t  }\n\t  var memoized = function() {\n\t    var args = arguments,\n\t        key = resolver ? resolver.apply(this, args) : args[0],\n\t        cache = memoized.cache;\n\n\t    if (cache.has(key)) {\n\t      return cache.get(key);\n\t    }\n\t    var result = func.apply(this, args);\n\t    memoized.cache = cache.set(key, result);\n\t    return result;\n\t  };\n\t  memoized.cache = new (memoize.Cache || MapCache);\n\t  return memoized;\n\t}\n\n\t// Assign cache to `_.memoize`.\n\tmemoize.Cache = MapCache;\n\n\t/**\n\t * Performs a\n\t * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n\t * comparison between two values to determine if they are equivalent.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to compare.\n\t * @param {*} other The other value to compare.\n\t * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n\t * @example\n\t *\n\t * var object = { 'a': 1 };\n\t * var other = { 'a': 1 };\n\t *\n\t * _.eq(object, object);\n\t * // => true\n\t *\n\t * _.eq(object, other);\n\t * // => false\n\t *\n\t * _.eq('a', 'a');\n\t * // => true\n\t *\n\t * _.eq('a', Object('a'));\n\t * // => false\n\t *\n\t * _.eq(NaN, NaN);\n\t * // => true\n\t */\n\tfunction eq(value, other) {\n\t  return value === other || (value !== value && other !== other);\n\t}\n\n\t/**\n\t * Checks if `value` is classified as an `Array` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n\t * @example\n\t *\n\t * _.isArray([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArray(document.body.children);\n\t * // => false\n\t *\n\t * _.isArray('abc');\n\t * // => false\n\t *\n\t * _.isArray(_.noop);\n\t * // => false\n\t */\n\tvar isArray = Array.isArray;\n\n\t/**\n\t * Checks if `value` is classified as a `Function` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n\t * @example\n\t *\n\t * _.isFunction(_);\n\t * // => true\n\t *\n\t * _.isFunction(/abc/);\n\t * // => false\n\t */\n\tfunction isFunction(value) {\n\t  // The use of `Object#toString` avoids issues with the `typeof` operator\n\t  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n\t  var tag = isObject(value) ? objectToString.call(value) : '';\n\t  return tag == funcTag || tag == genTag;\n\t}\n\n\t/**\n\t * Checks if `value` is the\n\t * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n\t * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(_.noop);\n\t * // => true\n\t *\n\t * _.isObject(null);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\n\t/**\n\t * Checks if `value` is object-like. A value is object-like if it's not `null`\n\t * and has a `typeof` result of \"object\".\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t * @example\n\t *\n\t * _.isObjectLike({});\n\t * // => true\n\t *\n\t * _.isObjectLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObjectLike(_.noop);\n\t * // => false\n\t *\n\t * _.isObjectLike(null);\n\t * // => false\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\n\t/**\n\t * Checks if `value` is classified as a `Symbol` primitive or object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n\t * @example\n\t *\n\t * _.isSymbol(Symbol.iterator);\n\t * // => true\n\t *\n\t * _.isSymbol('abc');\n\t * // => false\n\t */\n\tfunction isSymbol(value) {\n\t  return typeof value == 'symbol' ||\n\t    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n\t}\n\n\t/**\n\t * Converts `value` to a string. An empty string is returned for `null`\n\t * and `undefined` values. The sign of `-0` is preserved.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to process.\n\t * @returns {string} Returns the string.\n\t * @example\n\t *\n\t * _.toString(null);\n\t * // => ''\n\t *\n\t * _.toString(-0);\n\t * // => '-0'\n\t *\n\t * _.toString([1, 2, 3]);\n\t * // => '1,2,3'\n\t */\n\tfunction toString(value) {\n\t  return value == null ? '' : baseToString(value);\n\t}\n\n\t/**\n\t * Gets the value at `path` of `object`. If the resolved value is\n\t * `undefined`, the `defaultValue` is returned in its place.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 3.7.0\n\t * @category Object\n\t * @param {Object} object The object to query.\n\t * @param {Array|string} path The path of the property to get.\n\t * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n\t * @returns {*} Returns the resolved value.\n\t * @example\n\t *\n\t * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\t *\n\t * _.get(object, 'a[0].b.c');\n\t * // => 3\n\t *\n\t * _.get(object, ['a', '0', 'b', 'c']);\n\t * // => 3\n\t *\n\t * _.get(object, 'a.b.c', 'default');\n\t * // => 'default'\n\t */\n\tfunction get(object, path, defaultValue) {\n\t  var result = object == null ? undefined : baseGet(object, path);\n\t  return result === undefined ? defaultValue : result;\n\t}\n\n\tmodule.exports = get;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * lodash (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modularize exports=\"npm\" -o ./`\n\t * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n\t * Released under MIT license <https://lodash.com/license>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t */\n\n\t/** Used as references for various `Number` constants. */\n\tvar INFINITY = 1 / 0;\n\n\t/** `Object#toString` result references. */\n\tvar symbolTag = '[object Symbol]';\n\n\t/** Used to match leading and trailing whitespace. */\n\tvar reTrimEnd = /\\s+$/;\n\n\t/** Used to compose unicode character classes. */\n\tvar rsAstralRange = '\\\\ud800-\\\\udfff',\n\t    rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n\t    rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n\t    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n\t/** Used to compose unicode capture groups. */\n\tvar rsAstral = '[' + rsAstralRange + ']',\n\t    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n\t    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n\t    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n\t    rsNonAstral = '[^' + rsAstralRange + ']',\n\t    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n\t    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n\t    rsZWJ = '\\\\u200d';\n\n\t/** Used to compose unicode regexes. */\n\tvar reOptMod = rsModifier + '?',\n\t    rsOptVar = '[' + rsVarRange + ']?',\n\t    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n\t    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n\t    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n\t/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n\tvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n\t/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n\tvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n\t/** Detect free variable `global` from Node.js. */\n\tvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n\t/** Detect free variable `self`. */\n\tvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n\t/** Used as a reference to the global object. */\n\tvar root = freeGlobal || freeSelf || Function('return this')();\n\n\t/**\n\t * Converts an ASCII `string` to an array.\n\t *\n\t * @private\n\t * @param {string} string The string to convert.\n\t * @returns {Array} Returns the converted array.\n\t */\n\tfunction asciiToArray(string) {\n\t  return string.split('');\n\t}\n\n\t/**\n\t * The base implementation of `_.findIndex` and `_.findLastIndex` without\n\t * support for iteratee shorthands.\n\t *\n\t * @private\n\t * @param {Array} array The array to inspect.\n\t * @param {Function} predicate The function invoked per iteration.\n\t * @param {number} fromIndex The index to search from.\n\t * @param {boolean} [fromRight] Specify iterating from right to left.\n\t * @returns {number} Returns the index of the matched value, else `-1`.\n\t */\n\tfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n\t  var length = array.length,\n\t      index = fromIndex + (fromRight ? 1 : -1);\n\n\t  while ((fromRight ? index-- : ++index < length)) {\n\t    if (predicate(array[index], index, array)) {\n\t      return index;\n\t    }\n\t  }\n\t  return -1;\n\t}\n\n\t/**\n\t * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n\t *\n\t * @private\n\t * @param {Array} array The array to inspect.\n\t * @param {*} value The value to search for.\n\t * @param {number} fromIndex The index to search from.\n\t * @returns {number} Returns the index of the matched value, else `-1`.\n\t */\n\tfunction baseIndexOf(array, value, fromIndex) {\n\t  if (value !== value) {\n\t    return baseFindIndex(array, baseIsNaN, fromIndex);\n\t  }\n\t  var index = fromIndex - 1,\n\t      length = array.length;\n\n\t  while (++index < length) {\n\t    if (array[index] === value) {\n\t      return index;\n\t    }\n\t  }\n\t  return -1;\n\t}\n\n\t/**\n\t * The base implementation of `_.isNaN` without support for number objects.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n\t */\n\tfunction baseIsNaN(value) {\n\t  return value !== value;\n\t}\n\n\t/**\n\t * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n\t * that is not found in the character symbols.\n\t *\n\t * @private\n\t * @param {Array} strSymbols The string symbols to inspect.\n\t * @param {Array} chrSymbols The character symbols to find.\n\t * @returns {number} Returns the index of the last unmatched string symbol.\n\t */\n\tfunction charsEndIndex(strSymbols, chrSymbols) {\n\t  var index = strSymbols.length;\n\n\t  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n\t  return index;\n\t}\n\n\t/**\n\t * Checks if `string` contains Unicode symbols.\n\t *\n\t * @private\n\t * @param {string} string The string to inspect.\n\t * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n\t */\n\tfunction hasUnicode(string) {\n\t  return reHasUnicode.test(string);\n\t}\n\n\t/**\n\t * Converts `string` to an array.\n\t *\n\t * @private\n\t * @param {string} string The string to convert.\n\t * @returns {Array} Returns the converted array.\n\t */\n\tfunction stringToArray(string) {\n\t  return hasUnicode(string)\n\t    ? unicodeToArray(string)\n\t    : asciiToArray(string);\n\t}\n\n\t/**\n\t * Converts a Unicode `string` to an array.\n\t *\n\t * @private\n\t * @param {string} string The string to convert.\n\t * @returns {Array} Returns the converted array.\n\t */\n\tfunction unicodeToArray(string) {\n\t  return string.match(reUnicode) || [];\n\t}\n\n\t/** Used for built-in method references. */\n\tvar objectProto = Object.prototype;\n\n\t/**\n\t * Used to resolve the\n\t * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objectToString = objectProto.toString;\n\n\t/** Built-in value references. */\n\tvar Symbol = root.Symbol;\n\n\t/** Used to convert symbols to primitives and strings. */\n\tvar symbolProto = Symbol ? Symbol.prototype : undefined,\n\t    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n\t/**\n\t * The base implementation of `_.slice` without an iteratee call guard.\n\t *\n\t * @private\n\t * @param {Array} array The array to slice.\n\t * @param {number} [start=0] The start position.\n\t * @param {number} [end=array.length] The end position.\n\t * @returns {Array} Returns the slice of `array`.\n\t */\n\tfunction baseSlice(array, start, end) {\n\t  var index = -1,\n\t      length = array.length;\n\n\t  if (start < 0) {\n\t    start = -start > length ? 0 : (length + start);\n\t  }\n\t  end = end > length ? length : end;\n\t  if (end < 0) {\n\t    end += length;\n\t  }\n\t  length = start > end ? 0 : ((end - start) >>> 0);\n\t  start >>>= 0;\n\n\t  var result = Array(length);\n\t  while (++index < length) {\n\t    result[index] = array[index + start];\n\t  }\n\t  return result;\n\t}\n\n\t/**\n\t * The base implementation of `_.toString` which doesn't convert nullish\n\t * values to empty strings.\n\t *\n\t * @private\n\t * @param {*} value The value to process.\n\t * @returns {string} Returns the string.\n\t */\n\tfunction baseToString(value) {\n\t  // Exit early for strings to avoid a performance hit in some environments.\n\t  if (typeof value == 'string') {\n\t    return value;\n\t  }\n\t  if (isSymbol(value)) {\n\t    return symbolToString ? symbolToString.call(value) : '';\n\t  }\n\t  var result = (value + '');\n\t  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n\t}\n\n\t/**\n\t * Casts `array` to a slice if it's needed.\n\t *\n\t * @private\n\t * @param {Array} array The array to inspect.\n\t * @param {number} start The start position.\n\t * @param {number} [end=array.length] The end position.\n\t * @returns {Array} Returns the cast slice.\n\t */\n\tfunction castSlice(array, start, end) {\n\t  var length = array.length;\n\t  end = end === undefined ? length : end;\n\t  return (!start && end >= length) ? array : baseSlice(array, start, end);\n\t}\n\n\t/**\n\t * Checks if `value` is object-like. A value is object-like if it's not `null`\n\t * and has a `typeof` result of \"object\".\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t * @example\n\t *\n\t * _.isObjectLike({});\n\t * // => true\n\t *\n\t * _.isObjectLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObjectLike(_.noop);\n\t * // => false\n\t *\n\t * _.isObjectLike(null);\n\t * // => false\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\n\t/**\n\t * Checks if `value` is classified as a `Symbol` primitive or object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n\t * @example\n\t *\n\t * _.isSymbol(Symbol.iterator);\n\t * // => true\n\t *\n\t * _.isSymbol('abc');\n\t * // => false\n\t */\n\tfunction isSymbol(value) {\n\t  return typeof value == 'symbol' ||\n\t    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n\t}\n\n\t/**\n\t * Converts `value` to a string. An empty string is returned for `null`\n\t * and `undefined` values. The sign of `-0` is preserved.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to process.\n\t * @returns {string} Returns the string.\n\t * @example\n\t *\n\t * _.toString(null);\n\t * // => ''\n\t *\n\t * _.toString(-0);\n\t * // => '-0'\n\t *\n\t * _.toString([1, 2, 3]);\n\t * // => '1,2,3'\n\t */\n\tfunction toString(value) {\n\t  return value == null ? '' : baseToString(value);\n\t}\n\n\t/**\n\t * Removes trailing whitespace or specified characters from `string`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category String\n\t * @param {string} [string=''] The string to trim.\n\t * @param {string} [chars=whitespace] The characters to trim.\n\t * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n\t * @returns {string} Returns the trimmed string.\n\t * @example\n\t *\n\t * _.trimEnd('  abc  ');\n\t * // => '  abc'\n\t *\n\t * _.trimEnd('-_-abc-_-', '_-');\n\t * // => '-_-abc'\n\t */\n\tfunction trimEnd(string, chars, guard) {\n\t  string = toString(string);\n\t  if (string && (guard || chars === undefined)) {\n\t    return string.replace(reTrimEnd, '');\n\t  }\n\t  if (!string || !(chars = baseToString(chars))) {\n\t    return string;\n\t  }\n\t  var strSymbols = stringToArray(string),\n\t      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n\t  return castSlice(strSymbols, 0, end).join('');\n\t}\n\n\tmodule.exports = trimEnd;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar _ = __webpack_require__(4);\n\tvar errors = module.exports;\n\n\tvar canCapture = (typeof Error.captureStackTrace === 'function');\n\tvar canStack = !!(new Error()).stack;\n\n\tfunction ErrorAbstract(msg, constructor, metadata) {\n\t  this.message = msg;\n\n\t  Error.call(this, this.message);\n\n\t  if (canCapture) {\n\t    Error.captureStackTrace(this, constructor);\n\t  }\n\t  else if (canStack) {\n\t    this.stack = (new Error()).stack;\n\t  }\n\t  else {\n\t    this.stack = '';\n\t  }\n\n\t  if (metadata) {\n\t    _.assign(this, metadata);\n\n\t    this.toString = function () {\n\t      return msg + ' :: ' + JSON.stringify(metadata);\n\t    };\n\n\t    this.toJSON = function () {\n\t      return _.assign({\n\t        msg: msg\n\t      }, metadata);\n\t    };\n\t  }\n\t}\n\terrors._Abstract = ErrorAbstract;\n\t_.inherits(ErrorAbstract, Error);\n\n\t/**\n\t * Connection Error\n\t * @param {String} [msg] - An error message that will probably end up in a log.\n\t */\n\terrors.ConnectionFault = function ConnectionFault(msg) {\n\t  ErrorAbstract.call(this, msg || 'Connection Failure', errors.ConnectionFault);\n\t};\n\t_.inherits(errors.ConnectionFault, ErrorAbstract);\n\n\t/**\n\t * No Living Connections\n\t * @param {String} [msg] - An error message that will probably end up in a log.\n\t */\n\terrors.NoConnections = function NoConnections(msg) {\n\t  ErrorAbstract.call(this, msg || 'No Living connections', errors.NoConnections);\n\t};\n\t_.inherits(errors.NoConnections, ErrorAbstract);\n\n\t/**\n\t * Generic Error\n\t * @param {String} [msg] - An error message that will probably end up in a log.\n\t */\n\terrors.Generic = function Generic(msg, metadata) {\n\t  ErrorAbstract.call(this, msg || 'Generic Error', errors.Generic, metadata);\n\t};\n\t_.inherits(errors.Generic, ErrorAbstract);\n\n\t/**\n\t * Request Timeout Error\n\t * @param {String} [msg] - An error message that will probably end up in a log.\n\t */\n\terrors.RequestTimeout = function RequestTimeout(msg) {\n\t  ErrorAbstract.call(this, msg || 'Request Timeout', errors.RequestTimeout);\n\t};\n\t_.inherits(errors.RequestTimeout, ErrorAbstract);\n\n\n\t/**\n\t * Request Body could not be parsed\n\t * @param {String} [msg] - An error message that will probably end up in a log.\n\t */\n\terrors.Serialization = function Serialization(msg) {\n\t  ErrorAbstract.call(this, msg || 'Unable to parse/serialize body', errors.Serialization);\n\t};\n\t_.inherits(errors.Serialization, ErrorAbstract);\n\n\n\t/**\n\t * Thrown when a browser compatability issue is detected (cough, IE, cough)\n\t */\n\terrors.RequestTypeError = function RequestTypeError(feature) {\n\t  ErrorAbstract.call(this, 'Cross-domain AJAX requests ' + feature + ' are not supported', errors.RequestTypeError);\n\t};\n\t_.inherits(errors.RequestTypeError, ErrorAbstract);\n\n\tvar statusCodes = [\n\t  [300, 'Multiple Choices'],\n\t  [301, 'Moved Permanently'],\n\t  [302, 'Found'],\n\t  [303, 'See Other'],\n\t  [304, 'Not Modified'],\n\t  [305, 'Use Proxy'],\n\t  [307, 'Temporary Redirect'],\n\t  [308, 'Permanent Redirect'],\n\t  [400, 'Bad Request'],\n\t  [401, 'Authentication Exception'],\n\t  [402, 'Payment Required'],\n\t  [403, ['Authorization Exception', 'Forbidden']],\n\t  [404, 'Not Found'],\n\t  [405, 'Method Not Allowed'],\n\t  [406, 'Not Acceptable'],\n\t  [407, 'Proxy Authentication Required'],\n\t  [408, 'Request Timeout'],\n\t  [409, 'Conflict'],\n\t  [410, 'Gone'],\n\t  [411, 'Length Required'],\n\t  [412, 'Precondition Failed'],\n\t  [413, 'Request Entity Too Large'],\n\t  [414, 'Request URIToo Long'],\n\t  [415, 'Unsupported Media Type'],\n\t  [416, 'Requested Range Not Satisfiable'],\n\t  [417, 'Expectation Failed'],\n\t  [418, 'Im ATeapot'],\n\t  [421, 'Too Many Connections From This IP'],\n\t  [426, 'Upgrade Required'],\n\t  [429, 'Too Many Requests'],\n\t  [450, 'Blocked By Windows Parental Controls'],\n\t  [494, 'Request Header Too Large'],\n\t  [497, 'HTTPTo HTTPS'],\n\t  [499, 'Client Closed Request'],\n\t  [500, 'Internal Server Error'],\n\t  [501, 'Not Implemented'],\n\t  [502, 'Bad Gateway'],\n\t  [503, 'Service Unavailable'],\n\t  [504, 'Gateway Timeout'],\n\t  [505, 'HTTPVersion Not Supported'],\n\t  [506, 'Variant Also Negotiates'],\n\t  [510, 'Not Extended']\n\t];\n\n\t_.each(statusCodes, function createStatusCodeError(tuple) {\n\t  var status = tuple[0];\n\t  var names = tuple[1];\n\t  var allNames = [].concat(names, status);\n\t  var primaryName = allNames[0];\n\t  var className = _.studlyCase(primaryName);\n\t  allNames = _.uniq(allNames.concat(className));\n\n\t  function StatusCodeError(msg, metadata) {\n\t    this.status = status;\n\t    this.displayName = className;\n\n\t    var esErrObject = null;\n\t    if (_.isPlainObject(msg)) {\n\t      esErrObject = msg;\n\t      msg = null;\n\t    }\n\n\t    if (!esErrObject) {\n\t      // errors from es now come in two forms, an error string < 2.0 and\n\t      // an object >= 2.0\n\t      // TODO: remove after dropping support for < 2.0\n\t      ErrorAbstract.call(this, msg || primaryName, StatusCodeError, metadata);\n\t      return this;\n\t    }\n\n\t    msg = [].concat(esErrObject.root_cause || []).reduce(function (memo, cause) {\n\t      if (memo) memo += ' (and) ';\n\n\t      memo += '[' + cause.type + '] ' + cause.reason;\n\n\t      var extraData = _.omit(cause, ['type', 'reason']);\n\t      if (_.size(extraData)) {\n\t        memo += ', with ' + prettyPrint(extraData);\n\t      }\n\n\t      return memo;\n\t    }, '');\n\n\t    if (!msg) {\n\t      if (esErrObject.type) msg += '[' + esErrObject.type + '] ';\n\t      if (esErrObject.reason) msg += esErrObject.reason;\n\t    }\n\n\t    ErrorAbstract.call(this, msg || primaryName, StatusCodeError, metadata);\n\t    return this;\n\t  }\n\t  _.inherits(StatusCodeError, ErrorAbstract);\n\n\t  allNames.forEach(function (name) {\n\t    errors[name] = StatusCodeError;\n\t  });\n\t});\n\n\n\tfunction prettyPrint(data) {\n\t  const path = []\n\t  return (function print(v) {\n\t    if (typeof v === 'object') {\n\t      if (path.indexOf(v) > -1) return '[circular]'\n\t      path.push(v)\n\t      try {\n\t        return '{ ' + _.map(v, function (subv, name) {\n\t          return name + '=' + print(subv)\n\t        }).join(' & ') + ' }'\n\t      } finally {\n\t        path.pop()\n\t      }\n\t    } else {\n\t      return JSON.stringify(v)\n\t    }\n\t  }(data))\n\t}\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {/**\n\t * Class to wrap URLS, formatting them and maintaining their separate details\n\t * @type {[type]}\n\t */\n\tmodule.exports = Host;\n\n\tvar url = __webpack_require__(19);\n\tvar qs = __webpack_require__(22);\n\tvar _ = __webpack_require__(4);\n\n\tvar startsWithProtocolRE = /^([a-z]+:)?\\/\\//;\n\tvar defaultProto = 'http:';\n\tvar btoa;\n\n\tif (typeof window !== 'undefined' && typeof window.location !== 'undefined') {\n\t  defaultProto = window.location.protocol;\n\t  btoa = window.btoa;\n\t}\n\n\tbtoa = btoa || function (data) {\n\t  return (new Buffer(data, 'utf8')).toString('base64');\n\t};\n\n\tvar urlParseFields = [\n\t  'protocol', 'hostname', 'pathname', 'port', 'auth', 'query'\n\t];\n\n\tvar simplify = ['host', 'path'];\n\n\tvar sslDefaults = {\n\t  pfx: null,\n\t  key: null,\n\t  passphrase: null,\n\t  cert: null,\n\t  ca: null,\n\t  ciphers: null,\n\t  rejectUnauthorized: false,\n\t  secureProtocol: null\n\t};\n\n\t// simple reference used when formatting as a url\n\t// and defines when parsing from a string\n\tHost.defaultPorts = {\n\t  http: 80,\n\t  https: 443\n\t};\n\n\tfunction Host(config, globalConfig) {\n\t  config = _.clone(config || {});\n\t  globalConfig = globalConfig || {};\n\n\t  // defaults\n\t  this.protocol = 'http';\n\t  this.host = 'localhost';\n\t  this.path = '';\n\t  this.port = 9200;\n\t  this.query = null;\n\t  this.headers = null;\n\t  this.suggestCompression = !!globalConfig.suggestCompression;\n\n\t  this.ssl = _.defaults({}, config.ssl || {}, globalConfig.ssl || {}, sslDefaults);\n\n\t  if (typeof config === 'string') {\n\t    var firstColon = config.indexOf(':');\n\t    var firstSlash = config.indexOf('/');\n\t    var noSlash = firstSlash === -1;\n\t    var portNoPath = firstColon > -1 && noSlash;\n\t    var portWithPath = !portNoPath && firstColon < firstSlash;\n\t    if ((noSlash || portNoPath || portWithPath) && !startsWithProtocolRE.test(config)) {\n\t      config = defaultProto + '//' + config;\n\t    }\n\t    config = _.pick(url.parse(config, false, true), urlParseFields);\n\t    // default logic for the port is to use 9200 for the default. When a string is specified though,\n\t    // we will use the default from the protocol of the string.\n\t    if (!config.port) {\n\t      var proto = config.protocol || 'http';\n\t      if (proto.charAt(proto.length - 1) === ':') {\n\t        proto = proto.substring(0, proto.length - 1);\n\t      }\n\t      if (Host.defaultPorts[proto]) {\n\t        config.port = Host.defaultPorts[proto];\n\t      }\n\t    }\n\t  }\n\n\t  if (_.isObject(config)) {\n\t    // move hostname/portname to host/port semi-intelligently.\n\t    _.each(simplify, function (to) {\n\t      var from = to + 'name';\n\t      if (config[from] && config[to]) {\n\t        if (config[to].indexOf(config[from]) === 0) {\n\t          config[to] = config[from];\n\t        }\n\t      } else if (config[from]) {\n\t        config[to] = config[from];\n\t      }\n\t      delete config[from];\n\t    });\n\t  } else {\n\t    config = {};\n\t  }\n\n\t  if (!config.auth && globalConfig.httpAuth) {\n\t    config.auth = globalConfig.httpAuth\n\t  }\n\n\t  if (config.auth) {\n\t    config.headers = config.headers || {};\n\t    config.headers.Authorization = 'Basic ' + btoa(config.auth);\n\t    delete config.auth;\n\t  }\n\n\t  _.forOwn(config, _.bind(function (val, prop) {\n\t    if (val != null) this[prop] = _.clone(val);\n\t  }, this));\n\n\t  // make sure the query string is parsed\n\t  if (this.query === null) {\n\t    // majority case\n\t    this.query = {};\n\t  } else if (!_.isPlainObject(this.query)) {\n\t    this.query = qs.parse(this.query);\n\t  }\n\n\t  // make sure that the port is a number\n\t  if (_.isNumeric(this.port)) {\n\t    this.port = parseInt(this.port, 10);\n\t  } else {\n\t    this.port = 9200;\n\t  }\n\n\t  // make sure the path starts with a leading slash\n\t  if (this.path === '/') {\n\t    this.path = '';\n\t  } else if (this.path && this.path.charAt(0) !== '/') {\n\t    this.path = '/' + (this.path || '');\n\t  }\n\n\t  // strip trailing ':' on the protocol (when config comes from url.parse)\n\t  if (this.protocol.substr(-1) === ':') {\n\t    this.protocol = this.protocol.substring(0, this.protocol.length - 1);\n\t  }\n\t}\n\n\tHost.prototype.makeUrl = function (params) {\n\t  params = params || {};\n\t  // build the port\n\t  var port = '';\n\t  if (this.port !== Host.defaultPorts[this.protocol]) {\n\t    // add an actual port\n\t    port = ':' + this.port;\n\t  }\n\n\t  // build the path\n\t  var path = '' + (this.path || '') + (params.path || '');\n\n\t  // if path doesn't start with '/' add it.\n\t  if (path.charAt(0) !== '/') {\n\t    path = '/' + path;\n\t  }\n\n\t  // build the query string\n\t  var query = qs.stringify(this.getQuery(params.query));\n\n\t  if (this.host) {\n\t    return this.protocol + '://' + this.host + port + path + (query ? '?' + query : '');\n\t  } else {\n\t    return path + (query ? '?' + query : '');\n\t  }\n\t};\n\n\tfunction objectPropertyGetter(prop, preOverride) {\n\t  return function (overrides) {\n\t    if (preOverride) {\n\t      overrides = preOverride.call(this, overrides);\n\t    }\n\n\t    var obj = this[prop];\n\t    if (!obj && !overrides) {\n\t      return null;\n\t    }\n\n\t    if (overrides) {\n\t      obj = _.assign({}, obj, overrides);\n\t    }\n\n\t    return _.size(obj) ? obj : null;\n\t  };\n\t}\n\n\tHost.prototype.getHeaders = objectPropertyGetter('headers', function (overrides) {\n\t  if (!this.suggestCompression) {\n\t    return overrides;\n\t  }\n\n\t  return _.defaults(overrides || {}, {\n\t    'Accept-Encoding': 'gzip,deflate'\n\t  });\n\t});\n\n\tHost.prototype.getQuery = objectPropertyGetter('query', function (query) {\n\t  return typeof query === 'string' ? qs.parse(query) : query;\n\t});\n\n\tHost.prototype.toString = function () {\n\t  return this.makeUrl();\n\t};\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\t'use strict';\n\n\tvar punycode = __webpack_require__(20);\n\tvar util = __webpack_require__(21);\n\n\texports.parse = urlParse;\n\texports.resolve = urlResolve;\n\texports.resolveObject = urlResolveObject;\n\texports.format = urlFormat;\n\n\texports.Url = Url;\n\n\tfunction Url() {\n\t  this.protocol = null;\n\t  this.slashes = null;\n\t  this.auth = null;\n\t  this.host = null;\n\t  this.port = null;\n\t  this.hostname = null;\n\t  this.hash = null;\n\t  this.search = null;\n\t  this.query = null;\n\t  this.pathname = null;\n\t  this.path = null;\n\t  this.href = null;\n\t}\n\n\t// Reference: RFC 3986, RFC 1808, RFC 2396\n\n\t// define these here so at least they only have to be\n\t// compiled once on the first module load.\n\tvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n\t    portPattern = /:[0-9]*$/,\n\n\t    // Special case for a simple path URL\n\t    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n\t    // RFC 2396: characters reserved for delimiting URLs.\n\t    // We actually just auto-escape these.\n\t    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n\t    // RFC 2396: characters not allowed for various reasons.\n\t    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n\t    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n\t    autoEscape = ['\\''].concat(unwise),\n\t    // Characters that are never ever allowed in a hostname.\n\t    // Note that any invalid chars are also handled, but these\n\t    // are the ones that are *expected* to be seen, so we fast-path\n\t    // them.\n\t    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n\t    hostEndingChars = ['/', '?', '#'],\n\t    hostnameMaxLen = 255,\n\t    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n\t    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n\t    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n\t    unsafeProtocol = {\n\t      'javascript': true,\n\t      'javascript:': true\n\t    },\n\t    // protocols that never have a hostname.\n\t    hostlessProtocol = {\n\t      'javascript': true,\n\t      'javascript:': true\n\t    },\n\t    // protocols that always contain a // bit.\n\t    slashedProtocol = {\n\t      'http': true,\n\t      'https': true,\n\t      'ftp': true,\n\t      'gopher': true,\n\t      'file': true,\n\t      'http:': true,\n\t      'https:': true,\n\t      'ftp:': true,\n\t      'gopher:': true,\n\t      'file:': true\n\t    },\n\t    querystring = __webpack_require__(22);\n\n\tfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n\t  if (url && util.isObject(url) && url instanceof Url) return url;\n\n\t  var u = new Url;\n\t  u.parse(url, parseQueryString, slashesDenoteHost);\n\t  return u;\n\t}\n\n\tUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n\t  if (!util.isString(url)) {\n\t    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n\t  }\n\n\t  // Copy chrome, IE, opera backslash-handling behavior.\n\t  // Back slashes before the query string get converted to forward slashes\n\t  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n\t  var queryIndex = url.indexOf('?'),\n\t      splitter =\n\t          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n\t      uSplit = url.split(splitter),\n\t      slashRegex = /\\\\/g;\n\t  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n\t  url = uSplit.join(splitter);\n\n\t  var rest = url;\n\n\t  // trim before proceeding.\n\t  // This is to support parse stuff like \"  http://foo.com  \\n\"\n\t  rest = rest.trim();\n\n\t  if (!slashesDenoteHost && url.split('#').length === 1) {\n\t    // Try fast path regexp\n\t    var simplePath = simplePathPattern.exec(rest);\n\t    if (simplePath) {\n\t      this.path = rest;\n\t      this.href = rest;\n\t      this.pathname = simplePath[1];\n\t      if (simplePath[2]) {\n\t        this.search = simplePath[2];\n\t        if (parseQueryString) {\n\t          this.query = querystring.parse(this.search.substr(1));\n\t        } else {\n\t          this.query = this.search.substr(1);\n\t        }\n\t      } else if (parseQueryString) {\n\t        this.search = '';\n\t        this.query = {};\n\t      }\n\t      return this;\n\t    }\n\t  }\n\n\t  var proto = protocolPattern.exec(rest);\n\t  if (proto) {\n\t    proto = proto[0];\n\t    var lowerProto = proto.toLowerCase();\n\t    this.protocol = lowerProto;\n\t    rest = rest.substr(proto.length);\n\t  }\n\n\t  // figure out if it's got a host\n\t  // user@server is *always* interpreted as a hostname, and url\n\t  // resolution will treat //foo/bar as host=foo,path=bar because that's\n\t  // how the browser resolves relative URLs.\n\t  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n\t    var slashes = rest.substr(0, 2) === '//';\n\t    if (slashes && !(proto && hostlessProtocol[proto])) {\n\t      rest = rest.substr(2);\n\t      this.slashes = true;\n\t    }\n\t  }\n\n\t  if (!hostlessProtocol[proto] &&\n\t      (slashes || (proto && !slashedProtocol[proto]))) {\n\n\t    // there's a hostname.\n\t    // the first instance of /, ?, ;, or # ends the host.\n\t    //\n\t    // If there is an @ in the hostname, then non-host chars *are* allowed\n\t    // to the left of the last @ sign, unless some host-ending character\n\t    // comes *before* the @-sign.\n\t    // URLs are obnoxious.\n\t    //\n\t    // ex:\n\t    // http://a@b@c/ => user:a@b host:c\n\t    // http://a@b?@c => user:a host:c path:/?@c\n\n\t    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n\t    // Review our test case against browsers more comprehensively.\n\n\t    // find the first instance of any hostEndingChars\n\t    var hostEnd = -1;\n\t    for (var i = 0; i < hostEndingChars.length; i++) {\n\t      var hec = rest.indexOf(hostEndingChars[i]);\n\t      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n\t        hostEnd = hec;\n\t    }\n\n\t    // at this point, either we have an explicit point where the\n\t    // auth portion cannot go past, or the last @ char is the decider.\n\t    var auth, atSign;\n\t    if (hostEnd === -1) {\n\t      // atSign can be anywhere.\n\t      atSign = rest.lastIndexOf('@');\n\t    } else {\n\t      // atSign must be in auth portion.\n\t      // http://a@b/c@d => host:b auth:a path:/c@d\n\t      atSign = rest.lastIndexOf('@', hostEnd);\n\t    }\n\n\t    // Now we have a portion which is definitely the auth.\n\t    // Pull that off.\n\t    if (atSign !== -1) {\n\t      auth = rest.slice(0, atSign);\n\t      rest = rest.slice(atSign + 1);\n\t      this.auth = decodeURIComponent(auth);\n\t    }\n\n\t    // the host is the remaining to the left of the first non-host char\n\t    hostEnd = -1;\n\t    for (var i = 0; i < nonHostChars.length; i++) {\n\t      var hec = rest.indexOf(nonHostChars[i]);\n\t      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n\t        hostEnd = hec;\n\t    }\n\t    // if we still have not hit it, then the entire thing is a host.\n\t    if (hostEnd === -1)\n\t      hostEnd = rest.length;\n\n\t    this.host = rest.slice(0, hostEnd);\n\t    rest = rest.slice(hostEnd);\n\n\t    // pull out port.\n\t    this.parseHost();\n\n\t    // we've indicated that there is a hostname,\n\t    // so even if it's empty, it has to be present.\n\t    this.hostname = this.hostname || '';\n\n\t    // if hostname begins with [ and ends with ]\n\t    // assume that it's an IPv6 address.\n\t    var ipv6Hostname = this.hostname[0] === '[' &&\n\t        this.hostname[this.hostname.length - 1] === ']';\n\n\t    // validate a little.\n\t    if (!ipv6Hostname) {\n\t      var hostparts = this.hostname.split(/\\./);\n\t      for (var i = 0, l = hostparts.length; i < l; i++) {\n\t        var part = hostparts[i];\n\t        if (!part) continue;\n\t        if (!part.match(hostnamePartPattern)) {\n\t          var newpart = '';\n\t          for (var j = 0, k = part.length; j < k; j++) {\n\t            if (part.charCodeAt(j) > 127) {\n\t              // we replace non-ASCII char with a temporary placeholder\n\t              // we need this to make sure size of hostname is not\n\t              // broken by replacing non-ASCII by nothing\n\t              newpart += 'x';\n\t            } else {\n\t              newpart += part[j];\n\t            }\n\t          }\n\t          // we test again with ASCII char only\n\t          if (!newpart.match(hostnamePartPattern)) {\n\t            var validParts = hostparts.slice(0, i);\n\t            var notHost = hostparts.slice(i + 1);\n\t            var bit = part.match(hostnamePartStart);\n\t            if (bit) {\n\t              validParts.push(bit[1]);\n\t              notHost.unshift(bit[2]);\n\t            }\n\t            if (notHost.length) {\n\t              rest = '/' + notHost.join('.') + rest;\n\t            }\n\t            this.hostname = validParts.join('.');\n\t            break;\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    if (this.hostname.length > hostnameMaxLen) {\n\t      this.hostname = '';\n\t    } else {\n\t      // hostnames are always lower case.\n\t      this.hostname = this.hostname.toLowerCase();\n\t    }\n\n\t    if (!ipv6Hostname) {\n\t      // IDNA Support: Returns a punycoded representation of \"domain\".\n\t      // It only converts parts of the domain name that\n\t      // have non-ASCII characters, i.e. it doesn't matter if\n\t      // you call it with a domain that already is ASCII-only.\n\t      this.hostname = punycode.toASCII(this.hostname);\n\t    }\n\n\t    var p = this.port ? ':' + this.port : '';\n\t    var h = this.hostname || '';\n\t    this.host = h + p;\n\t    this.href += this.host;\n\n\t    // strip [ and ] from the hostname\n\t    // the host field still retains them, though\n\t    if (ipv6Hostname) {\n\t      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n\t      if (rest[0] !== '/') {\n\t        rest = '/' + rest;\n\t      }\n\t    }\n\t  }\n\n\t  // now rest is set to the post-host stuff.\n\t  // chop off any delim chars.\n\t  if (!unsafeProtocol[lowerProto]) {\n\n\t    // First, make 100% sure that any \"autoEscape\" chars get\n\t    // escaped, even if encodeURIComponent doesn't think they\n\t    // need to be.\n\t    for (var i = 0, l = autoEscape.length; i < l; i++) {\n\t      var ae = autoEscape[i];\n\t      if (rest.indexOf(ae) === -1)\n\t        continue;\n\t      var esc = encodeURIComponent(ae);\n\t      if (esc === ae) {\n\t        esc = escape(ae);\n\t      }\n\t      rest = rest.split(ae).join(esc);\n\t    }\n\t  }\n\n\n\t  // chop off from the tail first.\n\t  var hash = rest.indexOf('#');\n\t  if (hash !== -1) {\n\t    // got a fragment string.\n\t    this.hash = rest.substr(hash);\n\t    rest = rest.slice(0, hash);\n\t  }\n\t  var qm = rest.indexOf('?');\n\t  if (qm !== -1) {\n\t    this.search = rest.substr(qm);\n\t    this.query = rest.substr(qm + 1);\n\t    if (parseQueryString) {\n\t      this.query = querystring.parse(this.query);\n\t    }\n\t    rest = rest.slice(0, qm);\n\t  } else if (parseQueryString) {\n\t    // no query string, but parseQueryString still requested\n\t    this.search = '';\n\t    this.query = {};\n\t  }\n\t  if (rest) this.pathname = rest;\n\t  if (slashedProtocol[lowerProto] &&\n\t      this.hostname && !this.pathname) {\n\t    this.pathname = '/';\n\t  }\n\n\t  //to support http.request\n\t  if (this.pathname || this.search) {\n\t    var p = this.pathname || '';\n\t    var s = this.search || '';\n\t    this.path = p + s;\n\t  }\n\n\t  // finally, reconstruct the href based on what has been validated.\n\t  this.href = this.format();\n\t  return this;\n\t};\n\n\t// format a parsed object into a url string\n\tfunction urlFormat(obj) {\n\t  // ensure it's an object, and not a string url.\n\t  // If it's an obj, this is a no-op.\n\t  // this way, you can call url_format() on strings\n\t  // to clean up potentially wonky urls.\n\t  if (util.isString(obj)) obj = urlParse(obj);\n\t  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n\t  return obj.format();\n\t}\n\n\tUrl.prototype.format = function() {\n\t  var auth = this.auth || '';\n\t  if (auth) {\n\t    auth = encodeURIComponent(auth);\n\t    auth = auth.replace(/%3A/i, ':');\n\t    auth += '@';\n\t  }\n\n\t  var protocol = this.protocol || '',\n\t      pathname = this.pathname || '',\n\t      hash = this.hash || '',\n\t      host = false,\n\t      query = '';\n\n\t  if (this.host) {\n\t    host = auth + this.host;\n\t  } else if (this.hostname) {\n\t    host = auth + (this.hostname.indexOf(':') === -1 ?\n\t        this.hostname :\n\t        '[' + this.hostname + ']');\n\t    if (this.port) {\n\t      host += ':' + this.port;\n\t    }\n\t  }\n\n\t  if (this.query &&\n\t      util.isObject(this.query) &&\n\t      Object.keys(this.query).length) {\n\t    query = querystring.stringify(this.query);\n\t  }\n\n\t  var search = this.search || (query && ('?' + query)) || '';\n\n\t  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n\t  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n\t  // unless they had them to begin with.\n\t  if (this.slashes ||\n\t      (!protocol || slashedProtocol[protocol]) && host !== false) {\n\t    host = '//' + (host || '');\n\t    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n\t  } else if (!host) {\n\t    host = '';\n\t  }\n\n\t  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n\t  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n\t  pathname = pathname.replace(/[?#]/g, function(match) {\n\t    return encodeURIComponent(match);\n\t  });\n\t  search = search.replace('#', '%23');\n\n\t  return protocol + host + pathname + search + hash;\n\t};\n\n\tfunction urlResolve(source, relative) {\n\t  return urlParse(source, false, true).resolve(relative);\n\t}\n\n\tUrl.prototype.resolve = function(relative) {\n\t  return this.resolveObject(urlParse(relative, false, true)).format();\n\t};\n\n\tfunction urlResolveObject(source, relative) {\n\t  if (!source) return relative;\n\t  return urlParse(source, false, true).resolveObject(relative);\n\t}\n\n\tUrl.prototype.resolveObject = function(relative) {\n\t  if (util.isString(relative)) {\n\t    var rel = new Url();\n\t    rel.parse(relative, false, true);\n\t    relative = rel;\n\t  }\n\n\t  var result = new Url();\n\t  var tkeys = Object.keys(this);\n\t  for (var tk = 0; tk < tkeys.length; tk++) {\n\t    var tkey = tkeys[tk];\n\t    result[tkey] = this[tkey];\n\t  }\n\n\t  // hash is always overridden, no matter what.\n\t  // even href=\"\" will remove it.\n\t  result.hash = relative.hash;\n\n\t  // if the relative url is empty, then there's nothing left to do here.\n\t  if (relative.href === '') {\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\n\t  // hrefs like //foo/bar always cut to the protocol.\n\t  if (relative.slashes && !relative.protocol) {\n\t    // take everything except the protocol from relative\n\t    var rkeys = Object.keys(relative);\n\t    for (var rk = 0; rk < rkeys.length; rk++) {\n\t      var rkey = rkeys[rk];\n\t      if (rkey !== 'protocol')\n\t        result[rkey] = relative[rkey];\n\t    }\n\n\t    //urlParse appends trailing / to urls like http://www.example.com\n\t    if (slashedProtocol[result.protocol] &&\n\t        result.hostname && !result.pathname) {\n\t      result.path = result.pathname = '/';\n\t    }\n\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\n\t  if (relative.protocol && relative.protocol !== result.protocol) {\n\t    // if it's a known url protocol, then changing\n\t    // the protocol does weird things\n\t    // first, if it's not file:, then we MUST have a host,\n\t    // and if there was a path\n\t    // to begin with, then we MUST have a path.\n\t    // if it is file:, then the host is dropped,\n\t    // because that's known to be hostless.\n\t    // anything else is assumed to be absolute.\n\t    if (!slashedProtocol[relative.protocol]) {\n\t      var keys = Object.keys(relative);\n\t      for (var v = 0; v < keys.length; v++) {\n\t        var k = keys[v];\n\t        result[k] = relative[k];\n\t      }\n\t      result.href = result.format();\n\t      return result;\n\t    }\n\n\t    result.protocol = relative.protocol;\n\t    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n\t      var relPath = (relative.pathname || '').split('/');\n\t      while (relPath.length && !(relative.host = relPath.shift()));\n\t      if (!relative.host) relative.host = '';\n\t      if (!relative.hostname) relative.hostname = '';\n\t      if (relPath[0] !== '') relPath.unshift('');\n\t      if (relPath.length < 2) relPath.unshift('');\n\t      result.pathname = relPath.join('/');\n\t    } else {\n\t      result.pathname = relative.pathname;\n\t    }\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t    result.host = relative.host || '';\n\t    result.auth = relative.auth;\n\t    result.hostname = relative.hostname || relative.host;\n\t    result.port = relative.port;\n\t    // to support http.request\n\t    if (result.pathname || result.search) {\n\t      var p = result.pathname || '';\n\t      var s = result.search || '';\n\t      result.path = p + s;\n\t    }\n\t    result.slashes = result.slashes || relative.slashes;\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\n\t  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n\t      isRelAbs = (\n\t          relative.host ||\n\t          relative.pathname && relative.pathname.charAt(0) === '/'\n\t      ),\n\t      mustEndAbs = (isRelAbs || isSourceAbs ||\n\t                    (result.host && relative.pathname)),\n\t      removeAllDots = mustEndAbs,\n\t      srcPath = result.pathname && result.pathname.split('/') || [],\n\t      relPath = relative.pathname && relative.pathname.split('/') || [],\n\t      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n\t  // if the url is a non-slashed url, then relative\n\t  // links like ../.. should be able\n\t  // to crawl up to the hostname, as well.  This is strange.\n\t  // result.protocol has already been set by now.\n\t  // Later on, put the first path part into the host field.\n\t  if (psychotic) {\n\t    result.hostname = '';\n\t    result.port = null;\n\t    if (result.host) {\n\t      if (srcPath[0] === '') srcPath[0] = result.host;\n\t      else srcPath.unshift(result.host);\n\t    }\n\t    result.host = '';\n\t    if (relative.protocol) {\n\t      relative.hostname = null;\n\t      relative.port = null;\n\t      if (relative.host) {\n\t        if (relPath[0] === '') relPath[0] = relative.host;\n\t        else relPath.unshift(relative.host);\n\t      }\n\t      relative.host = null;\n\t    }\n\t    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n\t  }\n\n\t  if (isRelAbs) {\n\t    // it's absolute.\n\t    result.host = (relative.host || relative.host === '') ?\n\t                  relative.host : result.host;\n\t    result.hostname = (relative.hostname || relative.hostname === '') ?\n\t                      relative.hostname : result.hostname;\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t    srcPath = relPath;\n\t    // fall through to the dot-handling below.\n\t  } else if (relPath.length) {\n\t    // it's relative\n\t    // throw away the existing file, and take the new path instead.\n\t    if (!srcPath) srcPath = [];\n\t    srcPath.pop();\n\t    srcPath = srcPath.concat(relPath);\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t  } else if (!util.isNullOrUndefined(relative.search)) {\n\t    // just pull out the search.\n\t    // like href='?foo'.\n\t    // Put this after the other two cases because it simplifies the booleans\n\t    if (psychotic) {\n\t      result.hostname = result.host = srcPath.shift();\n\t      //occationaly the auth can get stuck only in host\n\t      //this especially happens in cases like\n\t      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\t      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n\t                       result.host.split('@') : false;\n\t      if (authInHost) {\n\t        result.auth = authInHost.shift();\n\t        result.host = result.hostname = authInHost.shift();\n\t      }\n\t    }\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t    //to support http.request\n\t    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n\t      result.path = (result.pathname ? result.pathname : '') +\n\t                    (result.search ? result.search : '');\n\t    }\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\n\t  if (!srcPath.length) {\n\t    // no path at all.  easy.\n\t    // we've already handled the other stuff above.\n\t    result.pathname = null;\n\t    //to support http.request\n\t    if (result.search) {\n\t      result.path = '/' + result.search;\n\t    } else {\n\t      result.path = null;\n\t    }\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\n\t  // if a url ENDs in . or .., then it must get a trailing slash.\n\t  // however, if it ends in anything else non-slashy,\n\t  // then it must NOT get a trailing slash.\n\t  var last = srcPath.slice(-1)[0];\n\t  var hasTrailingSlash = (\n\t      (result.host || relative.host || srcPath.length > 1) &&\n\t      (last === '.' || last === '..') || last === '');\n\n\t  // strip single dots, resolve double dots to parent dir\n\t  // if the path tries to go above the root, `up` ends up > 0\n\t  var up = 0;\n\t  for (var i = srcPath.length; i >= 0; i--) {\n\t    last = srcPath[i];\n\t    if (last === '.') {\n\t      srcPath.splice(i, 1);\n\t    } else if (last === '..') {\n\t      srcPath.splice(i, 1);\n\t      up++;\n\t    } else if (up) {\n\t      srcPath.splice(i, 1);\n\t      up--;\n\t    }\n\t  }\n\n\t  // if the path is allowed to go above the root, restore leading ..s\n\t  if (!mustEndAbs && !removeAllDots) {\n\t    for (; up--; up) {\n\t      srcPath.unshift('..');\n\t    }\n\t  }\n\n\t  if (mustEndAbs && srcPath[0] !== '' &&\n\t      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n\t    srcPath.unshift('');\n\t  }\n\n\t  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n\t    srcPath.push('');\n\t  }\n\n\t  var isAbsolute = srcPath[0] === '' ||\n\t      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n\t  // put the host back\n\t  if (psychotic) {\n\t    result.hostname = result.host = isAbsolute ? '' :\n\t                                    srcPath.length ? srcPath.shift() : '';\n\t    //occationaly the auth can get stuck only in host\n\t    //this especially happens in cases like\n\t    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\t    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n\t                     result.host.split('@') : false;\n\t    if (authInHost) {\n\t      result.auth = authInHost.shift();\n\t      result.host = result.hostname = authInHost.shift();\n\t    }\n\t  }\n\n\t  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n\t  if (mustEndAbs && !isAbsolute) {\n\t    srcPath.unshift('');\n\t  }\n\n\t  if (!srcPath.length) {\n\t    result.pathname = null;\n\t    result.path = null;\n\t  } else {\n\t    result.pathname = srcPath.join('/');\n\t  }\n\n\t  //to support request.http\n\t  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n\t    result.path = (result.pathname ? result.pathname : '') +\n\t                  (result.search ? result.search : '');\n\t  }\n\t  result.auth = relative.auth || result.auth;\n\t  result.slashes = result.slashes || relative.slashes;\n\t  result.href = result.format();\n\t  return result;\n\t};\n\n\tUrl.prototype.parseHost = function() {\n\t  var host = this.host;\n\t  var port = portPattern.exec(host);\n\t  if (port) {\n\t    port = port[0];\n\t    if (port !== ':') {\n\t      this.port = port.substr(1);\n\t    }\n\t    host = host.substr(0, host.length - port.length);\n\t  }\n\t  if (host) this.hostname = host;\n\t};\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */\n\t;(function(root) {\n\n\t\t/** Detect free variables */\n\t\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t\t!exports.nodeType && exports;\n\t\tvar freeModule = typeof module == 'object' && module &&\n\t\t\t!module.nodeType && module;\n\t\tvar freeGlobal = typeof global == 'object' && global;\n\t\tif (\n\t\t\tfreeGlobal.global === freeGlobal ||\n\t\t\tfreeGlobal.window === freeGlobal ||\n\t\t\tfreeGlobal.self === freeGlobal\n\t\t) {\n\t\t\troot = freeGlobal;\n\t\t}\n\n\t\t/**\n\t\t * The `punycode` object.\n\t\t * @name punycode\n\t\t * @type Object\n\t\t */\n\t\tvar punycode,\n\n\t\t/** Highest positive signed 32-bit float value */\n\t\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t\t/** Bootstring parameters */\n\t\tbase = 36,\n\t\ttMin = 1,\n\t\ttMax = 26,\n\t\tskew = 38,\n\t\tdamp = 700,\n\t\tinitialBias = 72,\n\t\tinitialN = 128, // 0x80\n\t\tdelimiter = '-', // '\\x2D'\n\n\t\t/** Regular expressions */\n\t\tregexPunycode = /^xn--/,\n\t\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\t\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t\t/** Error messages */\n\t\terrors = {\n\t\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t\t'invalid-input': 'Invalid input'\n\t\t},\n\n\t\t/** Convenience shortcuts */\n\t\tbaseMinusTMin = base - tMin,\n\t\tfloor = Math.floor,\n\t\tstringFromCharCode = String.fromCharCode,\n\n\t\t/** Temporary variable */\n\t\tkey;\n\n\t\t/*--------------------------------------------------------------------------*/\n\n\t\t/**\n\t\t * A generic error utility function.\n\t\t * @private\n\t\t * @param {String} type The error type.\n\t\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t\t */\n\t\tfunction error(type) {\n\t\t\tthrow RangeError(errors[type]);\n\t\t}\n\n\t\t/**\n\t\t * A generic `Array#map` utility function.\n\t\t * @private\n\t\t * @param {Array} array The array to iterate over.\n\t\t * @param {Function} callback The function that gets called for every array\n\t\t * item.\n\t\t * @returns {Array} A new array of values returned by the callback function.\n\t\t */\n\t\tfunction map(array, fn) {\n\t\t\tvar length = array.length;\n\t\t\tvar result = [];\n\t\t\twhile (length--) {\n\t\t\t\tresult[length] = fn(array[length]);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\t/**\n\t\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t\t * addresses.\n\t\t * @private\n\t\t * @param {String} domain The domain name or email address.\n\t\t * @param {Function} callback The function that gets called for every\n\t\t * character.\n\t\t * @returns {Array} A new string of characters returned by the callback\n\t\t * function.\n\t\t */\n\t\tfunction mapDomain(string, fn) {\n\t\t\tvar parts = string.split('@');\n\t\t\tvar result = '';\n\t\t\tif (parts.length > 1) {\n\t\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\t\tresult = parts[0] + '@';\n\t\t\t\tstring = parts[1];\n\t\t\t}\n\t\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\t\tvar labels = string.split('.');\n\t\t\tvar encoded = map(labels, fn).join('.');\n\t\t\treturn result + encoded;\n\t\t}\n\n\t\t/**\n\t\t * Creates an array containing the numeric code points of each Unicode\n\t\t * character in the string. While JavaScript uses UCS-2 internally,\n\t\t * this function will convert a pair of surrogate halves (each of which\n\t\t * UCS-2 exposes as separate characters) into a single code point,\n\t\t * matching UTF-16.\n\t\t * @see `punycode.ucs2.encode`\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode.ucs2\n\t\t * @name decode\n\t\t * @param {String} string The Unicode input string (UCS-2).\n\t\t * @returns {Array} The new array of code points.\n\t\t */\n\t\tfunction ucs2decode(string) {\n\t\t\tvar output = [],\n\t\t\t    counter = 0,\n\t\t\t    length = string.length,\n\t\t\t    value,\n\t\t\t    extra;\n\t\t\twhile (counter < length) {\n\t\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\t\toutput.push(value);\n\t\t\t\t\t\tcounter--;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\toutput.push(value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t\t * Creates a string based on an array of numeric code points.\n\t\t * @see `punycode.ucs2.decode`\n\t\t * @memberOf punycode.ucs2\n\t\t * @name encode\n\t\t * @param {Array} codePoints The array of numeric code points.\n\t\t * @returns {String} The new Unicode string (UCS-2).\n\t\t */\n\t\tfunction ucs2encode(array) {\n\t\t\treturn map(array, function(value) {\n\t\t\t\tvar output = '';\n\t\t\t\tif (value > 0xFFFF) {\n\t\t\t\t\tvalue -= 0x10000;\n\t\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t\t}\n\t\t\t\toutput += stringFromCharCode(value);\n\t\t\t\treturn output;\n\t\t\t}).join('');\n\t\t}\n\n\t\t/**\n\t\t * Converts a basic code point into a digit/integer.\n\t\t * @see `digitToBasic()`\n\t\t * @private\n\t\t * @param {Number} codePoint The basic numeric code point value.\n\t\t * @returns {Number} The numeric value of a basic code point (for use in\n\t\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t\t * the code point does not represent a value.\n\t\t */\n\t\tfunction basicToDigit(codePoint) {\n\t\t\tif (codePoint - 48 < 10) {\n\t\t\t\treturn codePoint - 22;\n\t\t\t}\n\t\t\tif (codePoint - 65 < 26) {\n\t\t\t\treturn codePoint - 65;\n\t\t\t}\n\t\t\tif (codePoint - 97 < 26) {\n\t\t\t\treturn codePoint - 97;\n\t\t\t}\n\t\t\treturn base;\n\t\t}\n\n\t\t/**\n\t\t * Converts a digit/integer into a basic code point.\n\t\t * @see `basicToDigit()`\n\t\t * @private\n\t\t * @param {Number} digit The numeric value of a basic code point.\n\t\t * @returns {Number} The basic code point whose value (when used for\n\t\t * representing integers) is `digit`, which needs to be in the range\n\t\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t\t * used; else, the lowercase form is used. The behavior is undefined\n\t\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t\t */\n\t\tfunction digitToBasic(digit, flag) {\n\t\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t\t// 26..35 map to ASCII 0..9\n\t\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t\t}\n\n\t\t/**\n\t\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t\t * @private\n\t\t */\n\t\tfunction adapt(delta, numPoints, firstTime) {\n\t\t\tvar k = 0;\n\t\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\t\tdelta += floor(delta / numPoints);\n\t\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t\t}\n\t\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t\t}\n\n\t\t/**\n\t\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t\t * symbols.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t\t * @returns {String} The resulting string of Unicode symbols.\n\t\t */\n\t\tfunction decode(input) {\n\t\t\t// Don't use UCS-2\n\t\t\tvar output = [],\n\t\t\t    inputLength = input.length,\n\t\t\t    out,\n\t\t\t    i = 0,\n\t\t\t    n = initialN,\n\t\t\t    bias = initialBias,\n\t\t\t    basic,\n\t\t\t    j,\n\t\t\t    index,\n\t\t\t    oldi,\n\t\t\t    w,\n\t\t\t    k,\n\t\t\t    digit,\n\t\t\t    t,\n\t\t\t    /** Cached calculation results */\n\t\t\t    baseMinusT;\n\n\t\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t\t// the first basic code points to the output.\n\n\t\t\tbasic = input.lastIndexOf(delimiter);\n\t\t\tif (basic < 0) {\n\t\t\t\tbasic = 0;\n\t\t\t}\n\n\t\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t\t// if it's not a basic code point\n\t\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\t\terror('not-basic');\n\t\t\t\t}\n\t\t\t\toutput.push(input.charCodeAt(j));\n\t\t\t}\n\n\t\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t\t// points were copied; start at the beginning otherwise.\n\n\t\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t\t// value at the end to obtain `delta`.\n\t\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\t\terror('invalid-input');\n\t\t\t\t\t}\n\n\t\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\t\terror('overflow');\n\t\t\t\t\t}\n\n\t\t\t\t\ti += digit * w;\n\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\t\tif (digit < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\t\terror('overflow');\n\t\t\t\t\t}\n\n\t\t\t\t\tw *= baseMinusT;\n\n\t\t\t\t}\n\n\t\t\t\tout = output.length + 1;\n\t\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tn += floor(i / out);\n\t\t\t\ti %= out;\n\n\t\t\t\t// Insert `n` at position `i` of the output\n\t\t\t\toutput.splice(i++, 0, n);\n\n\t\t\t}\n\n\t\t\treturn ucs2encode(output);\n\t\t}\n\n\t\t/**\n\t\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t\t * Punycode string of ASCII-only symbols.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The string of Unicode symbols.\n\t\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t\t */\n\t\tfunction encode(input) {\n\t\t\tvar n,\n\t\t\t    delta,\n\t\t\t    handledCPCount,\n\t\t\t    basicLength,\n\t\t\t    bias,\n\t\t\t    j,\n\t\t\t    m,\n\t\t\t    q,\n\t\t\t    k,\n\t\t\t    t,\n\t\t\t    currentValue,\n\t\t\t    output = [],\n\t\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t\t    inputLength,\n\t\t\t    /** Cached calculation results */\n\t\t\t    handledCPCountPlusOne,\n\t\t\t    baseMinusT,\n\t\t\t    qMinusT;\n\n\t\t\t// Convert the input in UCS-2 to Unicode\n\t\t\tinput = ucs2decode(input);\n\n\t\t\t// Cache the length\n\t\t\tinputLength = input.length;\n\n\t\t\t// Initialize the state\n\t\t\tn = initialN;\n\t\t\tdelta = 0;\n\t\t\tbias = initialBias;\n\n\t\t\t// Handle the basic code points\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue < 0x80) {\n\t\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thandledCPCount = basicLength = output.length;\n\n\t\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t\t// `basicLength` is the number of basic code points.\n\n\t\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\t\tif (basicLength) {\n\t\t\t\toutput.push(delimiter);\n\t\t\t}\n\n\t\t\t// Main encoding loop:\n\t\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t\t// larger one:\n\t\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\t\tcurrentValue = input[j];\n\t\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\t\tm = currentValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t\t// but guard against overflow\n\t\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\t\tn = m;\n\n\t\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\t\terror('overflow');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\t\tdelta = 0;\n\t\t\t\t\t\t++handledCPCount;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t++delta;\n\t\t\t\t++n;\n\n\t\t\t}\n\t\t\treturn output.join('');\n\t\t}\n\n\t\t/**\n\t\t * Converts a Punycode string representing a domain name or an email address\n\t\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t\t * it doesn't matter if you call it on a string that has already been\n\t\t * converted to Unicode.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The Punycoded domain name or email address to\n\t\t * convert to Unicode.\n\t\t * @returns {String} The Unicode representation of the given Punycode\n\t\t * string.\n\t\t */\n\t\tfunction toUnicode(input) {\n\t\t\treturn mapDomain(input, function(string) {\n\t\t\t\treturn regexPunycode.test(string)\n\t\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t\t: string;\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Converts a Unicode string representing a domain name or an email address to\n\t\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t\t * ASCII.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The domain name or email address to convert, as a\n\t\t * Unicode string.\n\t\t * @returns {String} The Punycode representation of the given domain name or\n\t\t * email address.\n\t\t */\n\t\tfunction toASCII(input) {\n\t\t\treturn mapDomain(input, function(string) {\n\t\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t\t: string;\n\t\t\t});\n\t\t}\n\n\t\t/*--------------------------------------------------------------------------*/\n\n\t\t/** Define the public API */\n\t\tpunycode = {\n\t\t\t/**\n\t\t\t * A string representing the current Punycode.js version number.\n\t\t\t * @memberOf punycode\n\t\t\t * @type String\n\t\t\t */\n\t\t\t'version': '1.3.2',\n\t\t\t/**\n\t\t\t * An object of methods to convert from JavaScript's internal character\n\t\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t\t * @memberOf punycode\n\t\t\t * @type Object\n\t\t\t */\n\t\t\t'ucs2': {\n\t\t\t\t'decode': ucs2decode,\n\t\t\t\t'encode': ucs2encode\n\t\t\t},\n\t\t\t'decode': decode,\n\t\t\t'encode': encode,\n\t\t\t'toASCII': toASCII,\n\t\t\t'toUnicode': toUnicode\n\t\t};\n\n\t\t/** Expose `punycode` */\n\t\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t\t// like the following:\n\t\tif (\n\t\t\ttrue\n\t\t) {\n\t\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\t\treturn punycode;\n\t\t\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t} else if (freeExports && freeModule) {\n\t\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\t\tfreeModule.exports = punycode;\n\t\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\t\tfor (key in punycode) {\n\t\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else { // in Rhino or a web browser\n\t\t\troot.punycode = punycode;\n\t\t}\n\n\t}(this));\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)(module), (function() { return this; }())))\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\n\tmodule.exports = {\n\t  isString: function(arg) {\n\t    return typeof(arg) === 'string';\n\t  },\n\t  isObject: function(arg) {\n\t    return typeof(arg) === 'object' && arg !== null;\n\t  },\n\t  isNull: function(arg) {\n\t    return arg === null;\n\t  },\n\t  isNullOrUndefined: function(arg) {\n\t    return arg == null;\n\t  }\n\t};\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.decode = exports.parse = __webpack_require__(23);\n\texports.encode = exports.stringify = __webpack_require__(24);\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\t'use strict';\n\n\t// If obj.hasOwnProperty has been overridden, then calling\n\t// obj.hasOwnProperty(prop) will break.\n\t// See: https://github.com/joyent/node/issues/1707\n\tfunction hasOwnProperty(obj, prop) {\n\t  return Object.prototype.hasOwnProperty.call(obj, prop);\n\t}\n\n\tmodule.exports = function(qs, sep, eq, options) {\n\t  sep = sep || '&';\n\t  eq = eq || '=';\n\t  var obj = {};\n\n\t  if (typeof qs !== 'string' || qs.length === 0) {\n\t    return obj;\n\t  }\n\n\t  var regexp = /\\+/g;\n\t  qs = qs.split(sep);\n\n\t  var maxKeys = 1000;\n\t  if (options && typeof options.maxKeys === 'number') {\n\t    maxKeys = options.maxKeys;\n\t  }\n\n\t  var len = qs.length;\n\t  // maxKeys <= 0 means that we should not limit keys count\n\t  if (maxKeys > 0 && len > maxKeys) {\n\t    len = maxKeys;\n\t  }\n\n\t  for (var i = 0; i < len; ++i) {\n\t    var x = qs[i].replace(regexp, '%20'),\n\t        idx = x.indexOf(eq),\n\t        kstr, vstr, k, v;\n\n\t    if (idx >= 0) {\n\t      kstr = x.substr(0, idx);\n\t      vstr = x.substr(idx + 1);\n\t    } else {\n\t      kstr = x;\n\t      vstr = '';\n\t    }\n\n\t    k = decodeURIComponent(kstr);\n\t    v = decodeURIComponent(vstr);\n\n\t    if (!hasOwnProperty(obj, k)) {\n\t      obj[k] = v;\n\t    } else if (Array.isArray(obj[k])) {\n\t      obj[k].push(v);\n\t    } else {\n\t      obj[k] = [obj[k], v];\n\t    }\n\t  }\n\n\t  return obj;\n\t};\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\t'use strict';\n\n\tvar stringifyPrimitive = function(v) {\n\t  switch (typeof v) {\n\t    case 'string':\n\t      return v;\n\n\t    case 'boolean':\n\t      return v ? 'true' : 'false';\n\n\t    case 'number':\n\t      return isFinite(v) ? v : '';\n\n\t    default:\n\t      return '';\n\t  }\n\t};\n\n\tmodule.exports = function(obj, sep, eq, name) {\n\t  sep = sep || '&';\n\t  eq = eq || '=';\n\t  if (obj === null) {\n\t    obj = undefined;\n\t  }\n\n\t  if (typeof obj === 'object') {\n\t    return Object.keys(obj).map(function(k) {\n\t      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n\t      if (Array.isArray(obj[k])) {\n\t        return obj[k].map(function(v) {\n\t          return ks + encodeURIComponent(stringifyPrimitive(v));\n\t        }).join(sep);\n\t      } else {\n\t        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n\t      }\n\t    }).join(sep);\n\n\t  }\n\n\t  if (!name) return '';\n\t  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n\t         encodeURIComponent(stringifyPrimitive(obj));\n\t};\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar _ = __webpack_require__(4);\n\n\n\t/**\n\t * Patch the transport's connection pool to schedule a sniff after a connection fails.\n\t * When a connection fails for the first time it will schedule a sniff 1 second in the\n\t * future, and increase the timeout based on the deadTimeout algorithm chosen by the\n\t * connectionPool, and the number of times the sniff has failed.\n\t *\n\t * @param  {Transport} transport - the transport that will be using this behavior\n\t * @return {undefined}\n\t */\n\tmodule.exports = function setupSniffOnConnectionFault(transport) {\n\t  var failures = 0;\n\t  var pool = transport.connectionPool;\n\t  var originalOnDied = pool._onConnectionDied;\n\n\t  // do the actual sniff, if the sniff is unable to\n\t  // connect to a node this function will be called again by the connectionPool\n\t  var work = function () {\n\t    work.timerId = transport._timeout(work.timerId);\n\t    transport.sniff();\n\t  };\n\n\t  // create a function that will count down to a\n\t  // point n milliseconds into the future\n\t  var countdownTo = function (ms) {\n\t    var start = _.now();\n\t    return function () {\n\t      return start - ms;\n\t    };\n\t  };\n\n\t  // overwrite the function, but still call it\n\t  pool._onConnectionDied = function (connection, wasAlreadyDead) {\n\t    var ret = originalOnDied.call(pool, connection, wasAlreadyDead);\n\n\t    // clear the failures if this is the first failure we have seen\n\t    failures = work.timerId ? failures + 1 : 0;\n\n\t    var ms = pool.calcDeadTimeout(failures, 1000);\n\n\t    if (work.timerId && ms < work.timerId && work.countdown()) {\n\t      // clear the timer\n\t      work.timerId = transport._timeout(work.timerId);\n\t    }\n\n\t    if (!work.timerId) {\n\t      work.timerId = transport._timeout(work, ms);\n\t      work.countdown = countdownTo(ms);\n\t    }\n\n\t    return ret;\n\t  };\n\n\t  pool._onConnectionDied.restore = function () {\n\t    pool._onConnectionDied = originalOnDied;\n\t  };\n\t};\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar isEmpty = __webpack_require__(27);\n\n\tmodule.exports = function (hosts) {\n\t  if (isEmpty(hosts)) return false;\n\n\t  var commonProtocol = hosts.shift().protocol;\n\t  for (var i = 0; i < hosts.length; i++) {\n\t    if (commonProtocol !== hosts[i].protocol) {\n\t      return false;\n\t    }\n\t  }\n\n\t  return commonProtocol;\n\t}\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global, module) {/**\n\t * lodash (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modularize exports=\"npm\" -o ./`\n\t * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n\t * Released under MIT license <https://lodash.com/license>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t */\n\n\t/** Used as references for various `Number` constants. */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\n\t/** `Object#toString` result references. */\n\tvar argsTag = '[object Arguments]',\n\t    funcTag = '[object Function]',\n\t    genTag = '[object GeneratorFunction]',\n\t    mapTag = '[object Map]',\n\t    objectTag = '[object Object]',\n\t    promiseTag = '[object Promise]',\n\t    setTag = '[object Set]',\n\t    weakMapTag = '[object WeakMap]';\n\n\tvar dataViewTag = '[object DataView]';\n\n\t/**\n\t * Used to match `RegExp`\n\t * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n\t */\n\tvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n\t/** Used to detect host constructors (Safari). */\n\tvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n\t/** Detect free variable `global` from Node.js. */\n\tvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n\t/** Detect free variable `self`. */\n\tvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n\t/** Used as a reference to the global object. */\n\tvar root = freeGlobal || freeSelf || Function('return this')();\n\n\t/** Detect free variable `exports`. */\n\tvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n\t/** Detect free variable `module`. */\n\tvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n\t/** Detect the popular CommonJS extension `module.exports`. */\n\tvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n\t/**\n\t * Gets the value at `key` of `object`.\n\t *\n\t * @private\n\t * @param {Object} [object] The object to query.\n\t * @param {string} key The key of the property to get.\n\t * @returns {*} Returns the property value.\n\t */\n\tfunction getValue(object, key) {\n\t  return object == null ? undefined : object[key];\n\t}\n\n\t/**\n\t * Checks if `value` is a host object in IE < 9.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n\t */\n\tfunction isHostObject(value) {\n\t  // Many host objects are `Object` objects that can coerce to strings\n\t  // despite having improperly defined `toString` methods.\n\t  var result = false;\n\t  if (value != null && typeof value.toString != 'function') {\n\t    try {\n\t      result = !!(value + '');\n\t    } catch (e) {}\n\t  }\n\t  return result;\n\t}\n\n\t/**\n\t * Creates a unary function that invokes `func` with its argument transformed.\n\t *\n\t * @private\n\t * @param {Function} func The function to wrap.\n\t * @param {Function} transform The argument transform.\n\t * @returns {Function} Returns the new function.\n\t */\n\tfunction overArg(func, transform) {\n\t  return function(arg) {\n\t    return func(transform(arg));\n\t  };\n\t}\n\n\t/** Used for built-in method references. */\n\tvar funcProto = Function.prototype,\n\t    objectProto = Object.prototype;\n\n\t/** Used to detect overreaching core-js shims. */\n\tvar coreJsData = root['__core-js_shared__'];\n\n\t/** Used to detect methods masquerading as native. */\n\tvar maskSrcKey = (function() {\n\t  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n\t  return uid ? ('Symbol(src)_1.' + uid) : '';\n\t}());\n\n\t/** Used to resolve the decompiled source of functions. */\n\tvar funcToString = funcProto.toString;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\n\t/**\n\t * Used to resolve the\n\t * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objectToString = objectProto.toString;\n\n\t/** Used to detect if a method is native. */\n\tvar reIsNative = RegExp('^' +\n\t  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n\t  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n\t);\n\n\t/** Built-in value references. */\n\tvar Buffer = moduleExports ? root.Buffer : undefined,\n\t    propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n\t/* Built-in method references for those with the same name as other `lodash` methods. */\n\tvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n\t    nativeKeys = overArg(Object.keys, Object);\n\n\t/* Built-in method references that are verified to be native. */\n\tvar DataView = getNative(root, 'DataView'),\n\t    Map = getNative(root, 'Map'),\n\t    Promise = getNative(root, 'Promise'),\n\t    Set = getNative(root, 'Set'),\n\t    WeakMap = getNative(root, 'WeakMap');\n\n\t/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\n\tvar nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\n\n\t/** Used to detect maps, sets, and weakmaps. */\n\tvar dataViewCtorString = toSource(DataView),\n\t    mapCtorString = toSource(Map),\n\t    promiseCtorString = toSource(Promise),\n\t    setCtorString = toSource(Set),\n\t    weakMapCtorString = toSource(WeakMap);\n\n\t/**\n\t * The base implementation of `getTag`.\n\t *\n\t * @private\n\t * @param {*} value The value to query.\n\t * @returns {string} Returns the `toStringTag`.\n\t */\n\tfunction baseGetTag(value) {\n\t  return objectToString.call(value);\n\t}\n\n\t/**\n\t * The base implementation of `_.isNative` without bad shim checks.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a native function,\n\t *  else `false`.\n\t */\n\tfunction baseIsNative(value) {\n\t  if (!isObject(value) || isMasked(value)) {\n\t    return false;\n\t  }\n\t  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n\t  return pattern.test(toSource(value));\n\t}\n\n\t/**\n\t * Gets the native function at `key` of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {string} key The key of the method to get.\n\t * @returns {*} Returns the function if it's native, else `undefined`.\n\t */\n\tfunction getNative(object, key) {\n\t  var value = getValue(object, key);\n\t  return baseIsNative(value) ? value : undefined;\n\t}\n\n\t/**\n\t * Gets the `toStringTag` of `value`.\n\t *\n\t * @private\n\t * @param {*} value The value to query.\n\t * @returns {string} Returns the `toStringTag`.\n\t */\n\tvar getTag = baseGetTag;\n\n\t// Fallback for data views, maps, sets, and weak maps in IE 11,\n\t// for data views in Edge < 14, and promises in Node.js.\n\tif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n\t    (Map && getTag(new Map) != mapTag) ||\n\t    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n\t    (Set && getTag(new Set) != setTag) ||\n\t    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n\t  getTag = function(value) {\n\t    var result = objectToString.call(value),\n\t        Ctor = result == objectTag ? value.constructor : undefined,\n\t        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n\t    if (ctorString) {\n\t      switch (ctorString) {\n\t        case dataViewCtorString: return dataViewTag;\n\t        case mapCtorString: return mapTag;\n\t        case promiseCtorString: return promiseTag;\n\t        case setCtorString: return setTag;\n\t        case weakMapCtorString: return weakMapTag;\n\t      }\n\t    }\n\t    return result;\n\t  };\n\t}\n\n\t/**\n\t * Checks if `func` has its source masked.\n\t *\n\t * @private\n\t * @param {Function} func The function to check.\n\t * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n\t */\n\tfunction isMasked(func) {\n\t  return !!maskSrcKey && (maskSrcKey in func);\n\t}\n\n\t/**\n\t * Checks if `value` is likely a prototype object.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n\t */\n\tfunction isPrototype(value) {\n\t  var Ctor = value && value.constructor,\n\t      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n\t  return value === proto;\n\t}\n\n\t/**\n\t * Converts `func` to its source code.\n\t *\n\t * @private\n\t * @param {Function} func The function to process.\n\t * @returns {string} Returns the source code.\n\t */\n\tfunction toSource(func) {\n\t  if (func != null) {\n\t    try {\n\t      return funcToString.call(func);\n\t    } catch (e) {}\n\t    try {\n\t      return (func + '');\n\t    } catch (e) {}\n\t  }\n\t  return '';\n\t}\n\n\t/**\n\t * Checks if `value` is likely an `arguments` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n\t *  else `false`.\n\t * @example\n\t *\n\t * _.isArguments(function() { return arguments; }());\n\t * // => true\n\t *\n\t * _.isArguments([1, 2, 3]);\n\t * // => false\n\t */\n\tfunction isArguments(value) {\n\t  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n\t  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n\t    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n\t}\n\n\t/**\n\t * Checks if `value` is classified as an `Array` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n\t * @example\n\t *\n\t * _.isArray([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArray(document.body.children);\n\t * // => false\n\t *\n\t * _.isArray('abc');\n\t * // => false\n\t *\n\t * _.isArray(_.noop);\n\t * // => false\n\t */\n\tvar isArray = Array.isArray;\n\n\t/**\n\t * Checks if `value` is array-like. A value is considered array-like if it's\n\t * not a function and has a `value.length` that's an integer greater than or\n\t * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t * @example\n\t *\n\t * _.isArrayLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArrayLike(document.body.children);\n\t * // => true\n\t *\n\t * _.isArrayLike('abc');\n\t * // => true\n\t *\n\t * _.isArrayLike(_.noop);\n\t * // => false\n\t */\n\tfunction isArrayLike(value) {\n\t  return value != null && isLength(value.length) && !isFunction(value);\n\t}\n\n\t/**\n\t * This method is like `_.isArrayLike` except that it also checks if `value`\n\t * is an object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an array-like object,\n\t *  else `false`.\n\t * @example\n\t *\n\t * _.isArrayLikeObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArrayLikeObject(document.body.children);\n\t * // => true\n\t *\n\t * _.isArrayLikeObject('abc');\n\t * // => false\n\t *\n\t * _.isArrayLikeObject(_.noop);\n\t * // => false\n\t */\n\tfunction isArrayLikeObject(value) {\n\t  return isObjectLike(value) && isArrayLike(value);\n\t}\n\n\t/**\n\t * Checks if `value` is a buffer.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.3.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n\t * @example\n\t *\n\t * _.isBuffer(new Buffer(2));\n\t * // => true\n\t *\n\t * _.isBuffer(new Uint8Array(2));\n\t * // => false\n\t */\n\tvar isBuffer = nativeIsBuffer || stubFalse;\n\n\t/**\n\t * Checks if `value` is an empty object, collection, map, or set.\n\t *\n\t * Objects are considered empty if they have no own enumerable string keyed\n\t * properties.\n\t *\n\t * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n\t * jQuery-like collections are considered empty if they have a `length` of `0`.\n\t * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n\t * @example\n\t *\n\t * _.isEmpty(null);\n\t * // => true\n\t *\n\t * _.isEmpty(true);\n\t * // => true\n\t *\n\t * _.isEmpty(1);\n\t * // => true\n\t *\n\t * _.isEmpty([1, 2, 3]);\n\t * // => false\n\t *\n\t * _.isEmpty({ 'a': 1 });\n\t * // => false\n\t */\n\tfunction isEmpty(value) {\n\t  if (isArrayLike(value) &&\n\t      (isArray(value) || typeof value == 'string' ||\n\t        typeof value.splice == 'function' || isBuffer(value) || isArguments(value))) {\n\t    return !value.length;\n\t  }\n\t  var tag = getTag(value);\n\t  if (tag == mapTag || tag == setTag) {\n\t    return !value.size;\n\t  }\n\t  if (nonEnumShadows || isPrototype(value)) {\n\t    return !nativeKeys(value).length;\n\t  }\n\t  for (var key in value) {\n\t    if (hasOwnProperty.call(value, key)) {\n\t      return false;\n\t    }\n\t  }\n\t  return true;\n\t}\n\n\t/**\n\t * Checks if `value` is classified as a `Function` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n\t * @example\n\t *\n\t * _.isFunction(_);\n\t * // => true\n\t *\n\t * _.isFunction(/abc/);\n\t * // => false\n\t */\n\tfunction isFunction(value) {\n\t  // The use of `Object#toString` avoids issues with the `typeof` operator\n\t  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n\t  var tag = isObject(value) ? objectToString.call(value) : '';\n\t  return tag == funcTag || tag == genTag;\n\t}\n\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This method is loosely based on\n\t * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t * @example\n\t *\n\t * _.isLength(3);\n\t * // => true\n\t *\n\t * _.isLength(Number.MIN_VALUE);\n\t * // => false\n\t *\n\t * _.isLength(Infinity);\n\t * // => false\n\t *\n\t * _.isLength('3');\n\t * // => false\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' &&\n\t    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\n\t/**\n\t * Checks if `value` is the\n\t * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n\t * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(_.noop);\n\t * // => true\n\t *\n\t * _.isObject(null);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\n\t/**\n\t * Checks if `value` is object-like. A value is object-like if it's not `null`\n\t * and has a `typeof` result of \"object\".\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t * @example\n\t *\n\t * _.isObjectLike({});\n\t * // => true\n\t *\n\t * _.isObjectLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObjectLike(_.noop);\n\t * // => false\n\t *\n\t * _.isObjectLike(null);\n\t * // => false\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\n\t/**\n\t * This method returns `false`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.13.0\n\t * @category Util\n\t * @returns {boolean} Returns `false`.\n\t * @example\n\t *\n\t * _.times(2, _.stubFalse);\n\t * // => [false, false]\n\t */\n\tfunction stubFalse() {\n\t  return false;\n\t}\n\n\tmodule.exports = isEmpty;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(14)(module)))\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {var _ = __webpack_require__(4);\n\tvar url = __webpack_require__(19);\n\tvar EventEmitter = __webpack_require__(29).EventEmitter;\n\n\t/**\n\t * Log bridge, which is an [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter)\n\t * that sends events to one or more outputs/loggers. Setup these loggers by\n\t * specifying their config as the first argument, or by passing it to addOutput().\n\t *\n\t * @class Log\n\t * @uses Loggers.Stdio\n\t * @constructor\n\t * @param {object} config\n\t * @param {string|Object|ArrayOfStrings|ArrayOfObjects} config.log - Either the level\n\t *  to setup a single logger, a full config object for a logger, or an array of\n\t *  config objects to use for creating log outputs.\n\t * @param {string|array} config.log.level|config.log.levels - One or more keys in Log.levels (error, warning, etc.)\n\t * @param {string} config.log.type - The name of the logger to use for this output\n\t */\n\tfunction Log(config) {\n\t  config = config || {};\n\t  if (!config.log) return;\n\n\t  var i;\n\t  var outputs;\n\n\t  if (_.isArrayOfStrings(config.log)) {\n\t    outputs = [{\n\t      levels: config.log\n\t    }];\n\t  } else {\n\t    outputs = _.createArray(config.log, function (val) {\n\t      if (_.isPlainObject(val)) {\n\t        return val;\n\t      }\n\t      if (typeof val === 'string') {\n\t        return {\n\t          level: val\n\t        };\n\t      }\n\t    });\n\t  }\n\n\t  if (!outputs) {\n\t    throw new TypeError('Invalid logging output config. Expected either a log level, array of log levels, ' +\n\t      'a logger config object, or an array of logger config objects.');\n\t  }\n\n\t  for (i = 0; i < outputs.length; i++) {\n\t    this.addOutput(outputs[i]);\n\t  }\n\t}\n\t_.inherits(Log, EventEmitter);\n\n\tLog.loggers = __webpack_require__(30);\n\n\tLog.prototype.close = function () {\n\t  this.emit('closing');\n\t  if (this.listenerCount()) {\n\t    console.error('Something is still listening for log events, but the logger is closing.'); // eslint-disable-line no-console\n\t    this.clearAllListeners();\n\t  }\n\t};\n\n\tif (EventEmitter.prototype.listenerCount) {\n\t  // If the event emitter implements it's own listenerCount method\n\t  // we don't need to (newer nodes do this).\n\t  Log.prototype.listenerCount = EventEmitter.prototype.listenerCount;\n\t}\n\telse if (EventEmitter.listenerCount) {\n\t  // some versions of node expose EventEmitter::listenerCount\n\t  // which is more efficient the getting all listeners of a\n\t  // specific type\n\t  Log.prototype.listenerCount = function (event) {\n\t    return EventEmitter.listenerCount(this, event);\n\t  };\n\t}\n\telse {\n\t  // all other versions of node expose a #listeners() method, which returns\n\t  // and array we have to count\n\t  Log.prototype.listenerCount = function (event) {\n\t    return this.listeners(event).length;\n\t  };\n\t}\n\n\t/**\n\t * Levels observed by the loggers, ordered by rank\n\t *\n\t * @property levels\n\t * @type Array\n\t * @static\n\t */\n\tLog.levels = [\n\t  /**\n\t   * Event fired for error level log entries\n\t   * @event error\n\t   * @param {Error} error - The error object to log\n\t   */\n\t  'error',\n\t  /**\n\t   * Event fired for \"warning\" level log entries, which usually represent things\n\t   * like correctly formatted error responses from ES (400, ...) and recoverable\n\t   * errors (one node unresponsive)\n\t   *\n\t   * @event warning\n\t   * @param {String} message - A message to be logged\n\t   */\n\t  'warning',\n\t  /**\n\t   * Event fired for \"info\" level log entries, which usually describe what a\n\t   * client is doing (sniffing etc)\n\t   *\n\t   * @event info\n\t   * @param {String} message - A message to be logged\n\t   */\n\t  'info',\n\t  /**\n\t   * Event fired for \"debug\" level log entries, which will describe requests sent,\n\t   * including their url (no data, response codes, or exec times)\n\t   *\n\t   * @event debug\n\t   * @param {String} message - A message to be logged\n\t   */\n\t  'debug',\n\t  /**\n\t   * Event fired for \"trace\" level log entries, which provide detailed information\n\t   * about each request made from a client, including reponse codes, execution times,\n\t   * and a full curl command that can be copied and pasted into a terminal\n\t   *\n\t   * @event trace\n\t   * @param {String} method method, , body, responseStatus, responseBody\n\t   * @param {String} url - The url the request was made to\n\t   * @param {String} body - The body of the request\n\t   * @param {Integer} responseStatus - The status code returned from the response\n\t   * @param {String} responseBody - The body of the response\n\t   */\n\t  'trace'\n\t];\n\n\t/**\n\t * Converts a log config value (string or array) to an array of level names which\n\t * it represents\n\t *\n\t * @method parseLevels\n\t * @static\n\t * @private\n\t * @param  {String|ArrayOfStrings} input - Cound be a string to specify the max\n\t *   level, or an array of exact levels\n\t * @return {Array} -\n\t */\n\tLog.parseLevels = function (input) {\n\t  switch (typeof input) {\n\t    case 'string':\n\t      var i = _.indexOf(Log.levels, input);\n\t      if (i >= 0) {\n\t        return Log.levels.slice(0, i + 1);\n\t      }\n\t    /* fall through */\n\t    case 'object':\n\t      if (_.isArray(input)) {\n\t        var valid = _.intersection(input, Log.levels);\n\t        if (valid.length === input.length) {\n\t          return valid;\n\t        }\n\t      }\n\t    /* fall through */\n\t    default:\n\t      throw new TypeError('invalid logging level ' + input + '. Expected zero or more of these options: ' +\n\t      Log.levels.join(', '));\n\t  }\n\t};\n\n\t/**\n\t * Combine the array-like param into a simple string\n\t *\n\t * @method join\n\t * @static\n\t * @private\n\t * @param  {*} arrayish - An array like object that can be itterated by _.each\n\t * @return {String} - The final string.\n\t */\n\tLog.join = function (arrayish) {\n\t  return _.map(arrayish, function (item) {\n\t    if (_.isPlainObject(item)) {\n\t      return JSON.stringify(item, null, 2) + '\\n';\n\t    } else {\n\t      return item.toString();\n\t    }\n\t  }).join(' ');\n\t};\n\n\t/**\n\t * Create a new logger, based on the config.\n\t *\n\t * @method addOutput\n\t * @param {object} config - An object with config options for the logger.\n\t * @param {String} [config.type=stdio] - The name of an output/logger. Options\n\t *   can be found in the `src/loggers` directory.\n\t * @param {String|ArrayOfStrings} [config.level|config.levels=warning] - The levels to output\n\t *   to this logger, when an array is specified no levels other than the ones\n\t *   specified will be listened to. When a string is specified, that and all lower\n\t *   levels will be logged.\n\t * @return {Logger}\n\t */\n\tLog.prototype.addOutput = function (config) {\n\t  config = config || {};\n\n\t  // force \"levels\" key\n\t  config.levels = Log.parseLevels(config.levels || config.level || 'warning');\n\t  delete config.level;\n\n\t  var Logger = _.funcEnum(config, 'type', Log.loggers, process.browser ? 'console' : 'stdio');\n\t  return new Logger(this, config);\n\t};\n\n\t/**\n\t * Log an error\n\t *\n\t * @method error\n\t * @param  {Error|String} error  The Error to log\n\t * @return {Boolean} - True if any outputs accepted the message\n\t */\n\tLog.prototype.error = function (e) {\n\t  if (this.listenerCount('error')) {\n\t    return this.emit('error', e instanceof Error ? e : new Error(e));\n\t  }\n\t};\n\n\n\t/**\n\t * Log a warning message\n\t *\n\t * @method warning\n\t * @param  {*} msg* - Any amount of messages that will be joined before logged\n\t * @return {Boolean} - True if any outputs accepted the message\n\t */\n\tLog.prototype.warning = function (/* ...msg */) {\n\t  if (this.listenerCount('warning')) {\n\t    return this.emit('warning', Log.join(arguments));\n\t  }\n\t};\n\n\n\t/**\n\t * Log useful info about what's going on\n\t *\n\t * @method info\n\t * @param  {*} msg* - Any amount of messages that will be joined before logged\n\t * @return {Boolean} - True if any outputs accepted the message\n\t */\n\tLog.prototype.info = function (/* ...msg */) {\n\t  if (this.listenerCount('info')) {\n\t    return this.emit('info', Log.join(arguments));\n\t  }\n\t};\n\n\t/**\n\t * Log a debug level message\n\t *\n\t * @method debug\n\t * @param  {*} msg* - Any amount of messages that will be joined before logged\n\t * @return {Boolean} - True if any outputs accepted the message\n\t */\n\tLog.prototype.debug = function (/* ...msg */) {\n\t  if (this.listenerCount('debug')) {\n\t    return this.emit('debug', Log.join(arguments));\n\t  }\n\t};\n\n\t/**\n\t * Log a trace level message\n\t *\n\t * @method trace\n\t * @param {String} method - HTTP request method\n\t * @param {String|Object} requestUrl - URL requested. If the value is an object,\n\t *   it is expected to be the return value of Node's url.parse()\n\t * @param {String} body - The request's body\n\t * @param {String} responseBody - body returned from ES\n\t * @param {String} responseStatus - HTTP status code\n\t * @return {Boolean} - True if any outputs accepted the message\n\t */\n\tLog.prototype.trace = function (method, requestUrl, body, responseBody, responseStatus) {\n\t  if (this.listenerCount('trace')) {\n\t    return this.emit('trace', Log.normalizeTraceArgs(method, requestUrl, body, responseBody, responseStatus));\n\t  }\n\t};\n\n\tLog.normalizeTraceArgs = function (method, requestUrl, body, responseBody, responseStatus) {\n\t  if (typeof requestUrl === 'string') {\n\t    requestUrl = url.parse(requestUrl, true, true);\n\t  } else {\n\t    requestUrl = _.clone(requestUrl);\n\t    if (requestUrl.path) {\n\t      requestUrl.query = url.parse(requestUrl.path, true, false).query;\n\t    }\n\t    if (!requestUrl.pathname && requestUrl.path) {\n\t      requestUrl.pathname = requestUrl.path.split('?').shift();\n\t    }\n\t  }\n\n\t  delete requestUrl.auth;\n\n\t  return {\n\t    method: method,\n\t    url: url.format(requestUrl),\n\t    body: body,\n\t    status: responseStatus,\n\t    response: responseBody\n\t  };\n\t};\n\n\tmodule.exports = Log;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\tfunction EventEmitter() {\n\t  this._events = this._events || {};\n\t  this._maxListeners = this._maxListeners || undefined;\n\t}\n\tmodule.exports = EventEmitter;\n\n\t// Backwards-compat with node 0.10.x\n\tEventEmitter.EventEmitter = EventEmitter;\n\n\tEventEmitter.prototype._events = undefined;\n\tEventEmitter.prototype._maxListeners = undefined;\n\n\t// By default EventEmitters will print a warning if more than 10 listeners are\n\t// added to it. This is a useful default which helps finding memory leaks.\n\tEventEmitter.defaultMaxListeners = 10;\n\n\t// Obviously not all Emitters should be limited to 10. This function allows\n\t// that to be increased. Set to zero for unlimited.\n\tEventEmitter.prototype.setMaxListeners = function(n) {\n\t  if (!isNumber(n) || n < 0 || isNaN(n))\n\t    throw TypeError('n must be a positive number');\n\t  this._maxListeners = n;\n\t  return this;\n\t};\n\n\tEventEmitter.prototype.emit = function(type) {\n\t  var er, handler, len, args, i, listeners;\n\n\t  if (!this._events)\n\t    this._events = {};\n\n\t  // If there is no 'error' event listener then throw.\n\t  if (type === 'error') {\n\t    if (!this._events.error ||\n\t        (isObject(this._events.error) && !this._events.error.length)) {\n\t      er = arguments[1];\n\t      if (er instanceof Error) {\n\t        throw er; // Unhandled 'error' event\n\t      } else {\n\t        // At least give some kind of context to the user\n\t        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n\t        err.context = er;\n\t        throw err;\n\t      }\n\t    }\n\t  }\n\n\t  handler = this._events[type];\n\n\t  if (isUndefined(handler))\n\t    return false;\n\n\t  if (isFunction(handler)) {\n\t    switch (arguments.length) {\n\t      // fast cases\n\t      case 1:\n\t        handler.call(this);\n\t        break;\n\t      case 2:\n\t        handler.call(this, arguments[1]);\n\t        break;\n\t      case 3:\n\t        handler.call(this, arguments[1], arguments[2]);\n\t        break;\n\t      // slower\n\t      default:\n\t        args = Array.prototype.slice.call(arguments, 1);\n\t        handler.apply(this, args);\n\t    }\n\t  } else if (isObject(handler)) {\n\t    args = Array.prototype.slice.call(arguments, 1);\n\t    listeners = handler.slice();\n\t    len = listeners.length;\n\t    for (i = 0; i < len; i++)\n\t      listeners[i].apply(this, args);\n\t  }\n\n\t  return true;\n\t};\n\n\tEventEmitter.prototype.addListener = function(type, listener) {\n\t  var m;\n\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\n\t  if (!this._events)\n\t    this._events = {};\n\n\t  // To avoid recursion in the case that type === \"newListener\"! Before\n\t  // adding it to the listeners, first emit \"newListener\".\n\t  if (this._events.newListener)\n\t    this.emit('newListener', type,\n\t              isFunction(listener.listener) ?\n\t              listener.listener : listener);\n\n\t  if (!this._events[type])\n\t    // Optimize the case of one listener. Don't need the extra array object.\n\t    this._events[type] = listener;\n\t  else if (isObject(this._events[type]))\n\t    // If we've already got an array, just append.\n\t    this._events[type].push(listener);\n\t  else\n\t    // Adding the second element, need to change to array.\n\t    this._events[type] = [this._events[type], listener];\n\n\t  // Check for listener leak\n\t  if (isObject(this._events[type]) && !this._events[type].warned) {\n\t    if (!isUndefined(this._maxListeners)) {\n\t      m = this._maxListeners;\n\t    } else {\n\t      m = EventEmitter.defaultMaxListeners;\n\t    }\n\n\t    if (m && m > 0 && this._events[type].length > m) {\n\t      this._events[type].warned = true;\n\t      console.error('(node) warning: possible EventEmitter memory ' +\n\t                    'leak detected. %d listeners added. ' +\n\t                    'Use emitter.setMaxListeners() to increase limit.',\n\t                    this._events[type].length);\n\t      if (typeof console.trace === 'function') {\n\t        // not supported in IE 10\n\t        console.trace();\n\t      }\n\t    }\n\t  }\n\n\t  return this;\n\t};\n\n\tEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\n\tEventEmitter.prototype.once = function(type, listener) {\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\n\t  var fired = false;\n\n\t  function g() {\n\t    this.removeListener(type, g);\n\n\t    if (!fired) {\n\t      fired = true;\n\t      listener.apply(this, arguments);\n\t    }\n\t  }\n\n\t  g.listener = listener;\n\t  this.on(type, g);\n\n\t  return this;\n\t};\n\n\t// emits a 'removeListener' event iff the listener was removed\n\tEventEmitter.prototype.removeListener = function(type, listener) {\n\t  var list, position, length, i;\n\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\n\t  if (!this._events || !this._events[type])\n\t    return this;\n\n\t  list = this._events[type];\n\t  length = list.length;\n\t  position = -1;\n\n\t  if (list === listener ||\n\t      (isFunction(list.listener) && list.listener === listener)) {\n\t    delete this._events[type];\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\n\t  } else if (isObject(list)) {\n\t    for (i = length; i-- > 0;) {\n\t      if (list[i] === listener ||\n\t          (list[i].listener && list[i].listener === listener)) {\n\t        position = i;\n\t        break;\n\t      }\n\t    }\n\n\t    if (position < 0)\n\t      return this;\n\n\t    if (list.length === 1) {\n\t      list.length = 0;\n\t      delete this._events[type];\n\t    } else {\n\t      list.splice(position, 1);\n\t    }\n\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\t  }\n\n\t  return this;\n\t};\n\n\tEventEmitter.prototype.removeAllListeners = function(type) {\n\t  var key, listeners;\n\n\t  if (!this._events)\n\t    return this;\n\n\t  // not listening for removeListener, no need to emit\n\t  if (!this._events.removeListener) {\n\t    if (arguments.length === 0)\n\t      this._events = {};\n\t    else if (this._events[type])\n\t      delete this._events[type];\n\t    return this;\n\t  }\n\n\t  // emit removeListener for all listeners on all events\n\t  if (arguments.length === 0) {\n\t    for (key in this._events) {\n\t      if (key === 'removeListener') continue;\n\t      this.removeAllListeners(key);\n\t    }\n\t    this.removeAllListeners('removeListener');\n\t    this._events = {};\n\t    return this;\n\t  }\n\n\t  listeners = this._events[type];\n\n\t  if (isFunction(listeners)) {\n\t    this.removeListener(type, listeners);\n\t  } else if (listeners) {\n\t    // LIFO order\n\t    while (listeners.length)\n\t      this.removeListener(type, listeners[listeners.length - 1]);\n\t  }\n\t  delete this._events[type];\n\n\t  return this;\n\t};\n\n\tEventEmitter.prototype.listeners = function(type) {\n\t  var ret;\n\t  if (!this._events || !this._events[type])\n\t    ret = [];\n\t  else if (isFunction(this._events[type]))\n\t    ret = [this._events[type]];\n\t  else\n\t    ret = this._events[type].slice();\n\t  return ret;\n\t};\n\n\tEventEmitter.prototype.listenerCount = function(type) {\n\t  if (this._events) {\n\t    var evlistener = this._events[type];\n\n\t    if (isFunction(evlistener))\n\t      return 1;\n\t    else if (evlistener)\n\t      return evlistener.length;\n\t  }\n\t  return 0;\n\t};\n\n\tEventEmitter.listenerCount = function(emitter, type) {\n\t  return emitter.listenerCount(type);\n\t};\n\n\tfunction isFunction(arg) {\n\t  return typeof arg === 'function';\n\t}\n\n\tfunction isNumber(arg) {\n\t  return typeof arg === 'number';\n\t}\n\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t  console: __webpack_require__(31)\n\t};\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Special version of the Stream logger, which logs errors and warnings to stderr and all other\n\t * levels to stdout.\n\t *\n\t * @class Loggers.Console\n\t * @extends LoggerAbstract\n\t * @constructor\n\t * @param {Object} config - The configuration for the Logger\n\t * @param {string} config.level - The highest log level for this logger to output.\n\t * @param {Log} bridge - The object that triggers logging events, which we will record\n\t */\n\n\tmodule.exports = Console;\n\n\tvar LoggerAbstract = __webpack_require__(32);\n\tvar _ = __webpack_require__(4);\n\n\tfunction Console(log, config) {\n\t  LoggerAbstract.call(this, log, config);\n\n\t  // config/state\n\t  this.color = _.has(config, 'color') ? !!config.color : true;\n\t}\n\t_.inherits(Console, LoggerAbstract);\n\n\t/**\n\t * Override the LoggerAbstract's setup listeners to do a little extra setup\n\t *\n\t * @param  {Array} levels - The levels that we should be listeneing for\n\t */\n\tConsole.prototype.setupListeners = function (levels) {\n\t  // call the super method\n\t  LoggerAbstract.prototype.setupListeners.call(this, levels);\n\t};\n\n\tConsole.prototype.write = function (label, message, to) {\n\t  if (console[to]) {\n\t    console[to](this.format(label, message));\n\t  }\n\t};\n\n\t/**\n\t * Handler for the bridges \"error\" event\n\t *\n\t * @method onError\n\t * @private\n\t * @param  {Error} e - The Error object to log\n\t * @return {undefined}\n\t */\n\tConsole.prototype.onError = _.handler(function (e) {\n\t  var to = console.error ? 'error' : 'log';\n\t  this.write(e.name === 'Error' ? 'ERROR' : e.name, e.stack || e.message, to);\n\t});\n\n\t/**\n\t * Handler for the bridges \"warning\" event\n\t *\n\t * @method onWarning\n\t * @private\n\t * @param  {String} msg - The message to be logged\n\t * @return {undefined}\n\t */\n\tConsole.prototype.onWarning = _.handler(function (msg) {\n\t  this.write('WARNING', msg, console.warn ? 'warn' : 'log');\n\t});\n\n\t/**\n\t * Handler for the bridges \"info\" event\n\t *\n\t * @method onInfo\n\t * @private\n\t * @param  {String} msg - The message to be logged\n\t * @return {undefined}\n\t */\n\tConsole.prototype.onInfo = _.handler(function (msg) {\n\t  this.write('INFO', msg, console.info ? 'info' : 'log');\n\t});\n\n\t/**\n\t * Handler for the bridges \"debug\" event\n\t *\n\t * @method onDebug\n\t * @private\n\t * @param  {String} msg - The message to be logged\n\t * @return {undefined}\n\t */\n\tConsole.prototype.onDebug = _.handler(function (msg) {\n\t  this.write('DEBUG', msg, console.debug ? 'debug' : 'log');\n\t});\n\t/**\n\t * Handler for the bridges \"trace\" event\n\t *\n\t * @method onTrace\n\t * @private\n\t * @return {undefined}\n\t */\n\tConsole.prototype.onTrace = _.handler(function (msg) {\n\t  this.write('TRACE', this._formatTraceMessage(msg), 'log');\n\t});\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar _ = __webpack_require__(4);\n\n\t/**\n\t * Abstract class providing common functionality to loggers\n\t * @param {[type]} log [description]\n\t * @param {[type]} config [description]\n\t */\n\tfunction LoggerAbstract(log, config) {\n\t  this.log = log;\n\t  this.listeningLevels = [];\n\n\t  _.makeBoundMethods(this);\n\n\t  // when the log closes, remove our event listeners\n\t  this.log.once('closing', this.bound.cleanUpListeners);\n\n\t  this.setupListeners(config.levels);\n\t}\n\n\tfunction padNumToTen(n) {\n\t  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n\t}\n\n\t/**\n\t * Create a timestamp string used in the format function. Defers to Log.timestamp if it is defined,\n\t * Also, feel free to override this at the logger level.\n\t * @return {String} - Timestamp in ISO 8601 UTC\n\t */\n\tLoggerAbstract.prototype.timestamp = function () {\n\t  var d = new Date();\n\t  return d.getUTCFullYear() + '-' +\n\t    padNumToTen(d.getUTCMonth() + 1) + '-' +\n\t    padNumToTen(d.getUTCDate()) + 'T' +\n\t    padNumToTen(d.getUTCHours()) + ':' +\n\t    padNumToTen(d.getUTCMinutes()) + ':' +\n\t    padNumToTen(d.getUTCSeconds()) + 'Z';\n\t};\n\n\tfunction indent(text, spaces) {\n\t  var space = _.repeat(' ', spaces || 2);\n\t  return (text || '').split(/\\r?\\n/).map(function (line) {\n\t    return space + line;\n\t  }).join('\\n');\n\t}\n\n\tLoggerAbstract.prototype.format = function (label, message) {\n\t  return label + ': ' + this.timestamp() + '\\n' + indent(message) + '\\n\\n';\n\t};\n\n\tLoggerAbstract.prototype.write = function () {\n\t  throw new Error('This should be overwritten by the logger');\n\t};\n\n\t/**\n\t * Clear the current event listeners and then re-listen for events based on the level specified\n\t *\n\t * @method setupListeners\n\t * @private\n\t * @param  {Integer} level - The max log level that this logger should listen to\n\t * @return {undefined}\n\t */\n\tLoggerAbstract.prototype.setupListeners = function (levels) {\n\t  this.cleanUpListeners();\n\n\t  this.listeningLevels = [];\n\n\t  _.each(levels, _.bind(function (level) {\n\t    var fnName = 'on' + _.ucfirst(level);\n\t    if (this.bound[fnName]) {\n\t      this.listeningLevels.push(level);\n\t      this.log.on(level, this.bound[fnName]);\n\t    } else {\n\t      throw new Error('Unable to listen for level \"' + level + '\"');\n\t    }\n\t  }, this));\n\t};\n\n\t/**\n\t * Clear the current event listeners\n\t *\n\t * @method cleanUpListeners\n\t * @private\n\t * @return {undefined}\n\t */\n\tLoggerAbstract.prototype.cleanUpListeners = _.handler(function () {\n\t  _.each(this.listeningLevels, _.bind(function (level) {\n\t    this.log.removeListener(level, this.bound['on' + _.ucfirst(level)]);\n\t  }, this));\n\t});\n\n\t/**\n\t * Handler for the logs \"error\" event\n\t *\n\t * @method onError\n\t * @private\n\t * @param  {Error} e - The Error object to log\n\t * @return {undefined}\n\t */\n\tLoggerAbstract.prototype.onError = _.handler(function (e) {\n\t  this.write((e.name === 'Error' ? 'ERROR' : e.name), e.stack);\n\t});\n\n\t/**\n\t * Handler for the logs \"warning\" event\n\t *\n\t * @method onWarning\n\t * @private\n\t * @param  {String} msg - The message to be logged\n\t * @return {undefined}\n\t */\n\tLoggerAbstract.prototype.onWarning = _.handler(function (msg) {\n\t  this.write('WARNING', msg);\n\t});\n\n\t/**\n\t * Handler for the logs \"info\" event\n\t *\n\t * @method onInfo\n\t * @private\n\t * @param  {String} msg - The message to be logged\n\t * @return {undefined}\n\t */\n\tLoggerAbstract.prototype.onInfo = _.handler(function (msg) {\n\t  this.write('INFO', msg);\n\t});\n\n\t/**\n\t * Handler for the logs \"debug\" event\n\t *\n\t * @method onDebug\n\t * @private\n\t * @param  {String} msg - The message to be logged\n\t * @return {undefined}\n\t */\n\tLoggerAbstract.prototype.onDebug = _.handler(function (msg) {\n\t  this.write('DEBUG', msg);\n\t});\n\n\t/**\n\t * Handler for the logs \"trace\" event\n\t *\n\t * @method onTrace\n\t * @private\n\t * @param  {String} msg - The message to be logged\n\t * @return {undefined}\n\t */\n\tLoggerAbstract.prototype.onTrace = _.handler(function (requestDetails) {\n\t  this.write('TRACE', this._formatTraceMessage(requestDetails));\n\t});\n\n\tLoggerAbstract.prototype._formatTraceMessage = function (req) {\n\t  return '-> ' + req.method + ' ' + req.url + '\\n' +\n\t    this._prettyJson(req.body) + '\\n' +\n\t    '<- ' + req.status + '\\n' +\n\t    this._prettyJson(req.response);\n\t/*\n\t-> GET https://sldfkjsdlfksjdf:9200/slsdkfjlxckvxhclks?sdlkj=sdlfkje\n\t{\n\t  asdflksjdf\n\t}\n\n\t<- 502\n\t{\n\t  sldfksjdlf\n\t}\n\t*/\n\t};\n\n\tLoggerAbstract.prototype._prettyJson = function (body) {\n\t  try {\n\t    if (typeof body === 'string') {\n\t      body = JSON.parse(body);\n\t    }\n\t    return JSON.stringify(body, null, '  ').replace(/'/g, '\\\\u0027');\n\t  } catch (e) {\n\t    return typeof body === 'string' ? body : '';\n\t  }\n\t};\n\n\tmodule.exports = LoggerAbstract;\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {/**\n\t * Manager of connections to a node(s), capable of ensuring that connections are clear and living\n\t * before providing them to the application\n\t *\n\t * @class ConnectionPool\n\t * @constructor\n\t * @param {Object} config - The config object passed to the transport.\n\t */\n\n\tmodule.exports = ConnectionPool;\n\n\tvar _ = __webpack_require__(4);\n\tvar Log = __webpack_require__(28);\n\n\tfunction ConnectionPool(config) {\n\t  config = config || {};\n\t  _.makeBoundMethods(this);\n\n\t  if (!config.log) {\n\t    this.log = new Log();\n\t    config.log = this.log;\n\t  } else {\n\t    this.log = config.log;\n\t  }\n\n\t  // we will need this when we create connections down the road\n\t  this._config = config;\n\n\t  // get the selector config var\n\t  this.selector = _.funcEnum(config, 'selector', ConnectionPool.selectors, ConnectionPool.defaultSelector);\n\n\t  // get the connection class\n\t  this.Connection = _.funcEnum(config, 'connectionClass', ConnectionPool.connectionClasses,\n\t    ConnectionPool.defaultConnectionClass);\n\n\t  // time that connections will wait before being revived\n\t  this.deadTimeout = config.hasOwnProperty('deadTimeout') ? config.deadTimeout : 60000;\n\t  this.maxDeadTimeout = config.hasOwnProperty('maxDeadTimeout') ? config.maxDeadTimeout : 18e5;\n\t  this.calcDeadTimeout = _.funcEnum(config, 'calcDeadTimeout', ConnectionPool.calcDeadTimeoutOptions, 'exponential');\n\n\t  // a map of connections to their \"id\" property, used when sniffing\n\t  this.index = {};\n\n\t  this._conns = {\n\t    alive: [],\n\t    dead: []\n\t  };\n\n\t  // information about timeouts for dead connections\n\t  this._timeouts = [];\n\t}\n\n\t// selector options\n\tConnectionPool.selectors = __webpack_require__(34);\n\tConnectionPool.defaultSelector = 'roundRobin';\n\n\t// get the connection options\n\tConnectionPool.connectionClasses = __webpack_require__(37);\n\tConnectionPool.defaultConnectionClass = ConnectionPool.connectionClasses._default;\n\tdelete ConnectionPool.connectionClasses._default;\n\n\t// the function that calculates timeouts based on attempts\n\tConnectionPool.calcDeadTimeoutOptions = {\n\t  flat: function (attempt, baseTimeout) {\n\t    return baseTimeout;\n\t  },\n\t  exponential: function (attempt, baseTimeout) {\n\t    return Math.min(baseTimeout * 2 * Math.pow(2, (attempt * 0.5 - 1)), this.maxDeadTimeout);\n\t  }\n\t};\n\n\t/**\n\t * Selects a connection from the list using the this.selector\n\t * Features:\n\t *  - detects if the selector is async or not\n\t *  - sync selectors should still return asynchronously\n\t *  - catches errors in sync selectors\n\t *  - automatically selects the first dead connection when there no living connections\n\t *\n\t * @param  {Function} cb [description]\n\t * @return {[type]}      [description]\n\t */\n\tConnectionPool.prototype.select = function (cb) {\n\t  if (this._conns.alive.length) {\n\t    if (this.selector.length > 1) {\n\t      this.selector(this._conns.alive, cb);\n\t    } else {\n\t      try {\n\t        _.nextTick(cb, void 0, this.selector(this._conns.alive));\n\t      } catch (e) {\n\t        cb(e);\n\t      }\n\t    }\n\t  } else if (this._timeouts.length) {\n\t    this._selectDeadConnection(cb);\n\t  } else {\n\t    _.nextTick(cb, void 0);\n\t  }\n\t};\n\n\t/**\n\t * Handler for the \"set status\" event emitted but the connections. It will move\n\t * the connection to it's proper connection list (unless it was closed).\n\t *\n\t * @param  {String} status - the connection's new status\n\t * @param  {String} oldStatus - the connection's old status\n\t * @param  {ConnectionAbstract} connection - the connection object itself\n\t */\n\tConnectionPool.prototype.onStatusSet = _.handler(function (status, oldStatus, connection) {\n\t  var index;\n\n\t  var died = (status === 'dead');\n\t  var wasAlreadyDead = (died && oldStatus === 'dead');\n\t  var revived = (!died && oldStatus === 'dead');\n\t  var noChange = (oldStatus === status);\n\t  var from = this._conns[oldStatus];\n\t  var to = this._conns[status];\n\n\t  if (noChange && !died) {\n\t    return true;\n\t  }\n\n\t  if (from !== to) {\n\t    if (_.isArray(from)) {\n\t      index = from.indexOf(connection);\n\t      if (index !== -1) {\n\t        from.splice(index, 1);\n\t      }\n\t    }\n\n\t    if (_.isArray(to)) {\n\t      index = to.indexOf(connection);\n\t      if (index === -1) {\n\t        to.push(connection);\n\t      }\n\t    }\n\t  }\n\n\t  if (died) {\n\t    this._onConnectionDied(connection, wasAlreadyDead);\n\t  }\n\n\t  if (revived) {\n\t    this._onConnectionRevived(connection);\n\t  }\n\t});\n\n\t/**\n\t * Handler used to clear the times created when a connection dies\n\t * @param  {ConnectionAbstract} connection\n\t */\n\tConnectionPool.prototype._onConnectionRevived = function (connection) {\n\t  var timeout;\n\t  for (var i = 0; i < this._timeouts.length; i++) {\n\t    if (this._timeouts[i].conn === connection) {\n\t      timeout = this._timeouts[i];\n\t      if (timeout.id) {\n\t        clearTimeout(timeout.id);\n\t      }\n\t      this._timeouts.splice(i, 1);\n\t      break;\n\t    }\n\t  }\n\t};\n\n\t/**\n\t * Handler used to update or create a timeout for the connection which has died\n\t * @param  {ConnectionAbstract} connection\n\t * @param  {Boolean} alreadyWasDead - If the connection was preivously dead this must be set to true\n\t */\n\tConnectionPool.prototype._onConnectionDied = function (connection, alreadyWasDead) {\n\t  var timeout;\n\t  if (alreadyWasDead) {\n\t    for (var i = 0; i < this._timeouts.length; i++) {\n\t      if (this._timeouts[i].conn === connection) {\n\t        timeout = this._timeouts[i];\n\t        break;\n\t      }\n\t    }\n\t  } else {\n\t    timeout = {\n\t      conn: connection,\n\t      attempt: 0,\n\t      revive: function (cb) {\n\t        timeout.attempt++;\n\t        connection.ping(function (err) {\n\t          connection.setStatus(err ? 'dead' : 'alive');\n\t          if (cb && typeof cb === 'function') {\n\t            cb(err);\n\t          }\n\t        });\n\t      }\n\t    };\n\t    this._timeouts.push(timeout);\n\t  }\n\n\t  if (timeout.id) {\n\t    clearTimeout(timeout.id);\n\t  }\n\n\t  var ms = this.calcDeadTimeout(timeout.attempt, this.deadTimeout);\n\t  timeout.id = setTimeout(timeout.revive, ms);\n\t  timeout.runAt = _.now() + ms;\n\t};\n\n\tConnectionPool.prototype._selectDeadConnection = function (cb) {\n\t  var orderedTimeouts = _.sortBy(this._timeouts, 'runAt');\n\t  var log = this.log;\n\n\t  process.nextTick(function next() {\n\t    var timeout = orderedTimeouts.shift();\n\t    if (!timeout) {\n\t      cb(void 0);\n\t      return;\n\t    }\n\n\t    if (!timeout.conn) {\n\t      next();\n\t      return;\n\t    }\n\n\t    if (timeout.conn.status === 'dead') {\n\t      timeout.revive(function (err) {\n\t        if (err) {\n\t          log.warning('Unable to revive connection: ' + timeout.conn.id);\n\t          process.nextTick(next);\n\t        } else {\n\t          cb(void 0, timeout.conn);\n\t        }\n\t      });\n\t    } else {\n\t      cb(void 0, timeout.conn);\n\t    }\n\t  });\n\t};\n\n\t/**\n\t * Returns a random list of nodes from the living connections up to the limit.\n\t * If there are no living connections it will fall back to the dead connections.\n\t * If there are no dead connections it will return nothing.\n\t *\n\t * This is used for testing (when we just want the one existing node)\n\t * and sniffing, where using the selector to get all of the living connections\n\t * is not reasonable.\n\t *\n\t * @param {string} [status] - optional status of the connection to fetch\n\t * @param {Number} [limit] - optional limit on the number of connections to return\n\t */\n\tConnectionPool.prototype.getConnections = function (status, limit) {\n\t  var list;\n\t  if (status) {\n\t    list = this._conns[status];\n\t  } else {\n\t    list = this._conns[this._conns.alive.length ? 'alive' : 'dead'];\n\t  }\n\n\t  if (limit == null) {\n\t    return list.slice(0);\n\t  } else {\n\t    return _.shuffle(list).slice(0, limit);\n\t  }\n\t};\n\n\t/**\n\t * Add a single connection to the pool and change it's status to \"alive\".\n\t * The connection should inherit from ConnectionAbstract\n\t *\n\t * @param {ConnectionAbstract} connection - The connection to add\n\t */\n\tConnectionPool.prototype.addConnection = function (connection) {\n\t  if (!connection.id) {\n\t    connection.id = connection.host.toString();\n\t  }\n\n\t  if (!this.index[connection.id]) {\n\t    this.log.info('Adding connection to', connection.id);\n\t    this.index[connection.id] = connection;\n\t    connection.on('status set', this.bound.onStatusSet);\n\t    connection.setStatus('alive');\n\t  }\n\t};\n\n\t/**\n\t * Remove a connection from the pool, and set it's status to \"closed\".\n\t *\n\t * @param  {ConnectionAbstract} connection - The connection to remove/close\n\t */\n\tConnectionPool.prototype.removeConnection = function (connection) {\n\t  if (!connection.id) {\n\t    connection.id = connection.host.toString();\n\t  }\n\n\t  if (this.index[connection.id]) {\n\t    delete this.index[connection.id];\n\t    connection.setStatus('closed');\n\t    connection.removeListener('status set', this.bound.onStatusSet);\n\t  }\n\t};\n\n\t/**\n\t * Override the internal node list. All connections that are not in the new host\n\t * list are closed and removed. Non-unique hosts are ignored.\n\t *\n\t * @param {Host[]} hosts - An array of Host instances.\n\t */\n\tConnectionPool.prototype.setHosts = function (hosts) {\n\t  var connection;\n\t  var i;\n\t  var id;\n\t  var host;\n\t  var toRemove = _.clone(this.index);\n\n\t  for (i = 0; i < hosts.length; i++) {\n\t    host = hosts[i];\n\t    id = host.toString();\n\t    if (this.index[id]) {\n\t      delete toRemove[id];\n\t    } else {\n\t      connection = new this.Connection(host, this._config);\n\t      connection.id = id;\n\t      this.addConnection(connection);\n\t    }\n\t  }\n\n\t  var removeIds = _.keys(toRemove);\n\t  for (i = 0; i < removeIds.length; i++) {\n\t    this.removeConnection(this.index[removeIds[i]]);\n\t  }\n\t};\n\n\tConnectionPool.prototype.getAllHosts = function () {\n\t  return _.values(this.index).map(function (connection) {\n\t    return connection.host;\n\t  });\n\t};\n\n\t/**\n\t * Close the conncetion pool, as well as all of it's connections\n\t */\n\tConnectionPool.prototype.close = function () {\n\t  this.setHosts([]);\n\t};\n\tConnectionPool.prototype.empty = ConnectionPool.prototype.close;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t  random: __webpack_require__(35),\n\t  roundRobin: __webpack_require__(36)\n\t};\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports) {\n\n\t/**\n\t * Selects a connection randomly\n\t *\n\t * @module selectors\n\t * @type {Function}\n\t * @param {Array} connection - The list of connections to choose from\n\t * @return {Connection} - The selected connection\n\t */\n\tmodule.exports = function RandomSelector(connections) {\n\t  return connections[Math.floor(Math.random() * connections.length)];\n\t};\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports) {\n\n\t/**\n\t * Selects a connection the simplest way possible, Round Robin\n\t *\n\t * @module selectors\n\t * @type {Function}\n\t * @param {Array} connections - The list of connections that this selector needs to choose from\n\t * @return {Connection} - The selected connection\n\t */\n\tmodule.exports = function (connections) {\n\t  var connection = connections[0];\n\t  connections.push(connections.shift());\n\t  return connection;\n\t};\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar opts = {\n\t  xhr: __webpack_require__(38),\n\t  jquery: __webpack_require__(40),\n\t  angular: __webpack_require__(41)\n\t};\n\tvar _ = __webpack_require__(4);\n\n\t// remove modules that have been ignored by browserify\n\t_.each(opts, function (conn, name) {\n\t  if (typeof conn !== 'function') {\n\t    delete opts[name];\n\t  }\n\t});\n\n\t// custom _default specification\n\tif (opts.xhr) {\n\t  opts._default = 'xhr';\n\t} else if (opts.angular) {\n\t  opts._default = 'angular';\n\t} else {\n\t  opts._default = 'jquery';\n\t}\n\n\tmodule.exports = opts;\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Generic Transport for the browser, using the XmlHttpRequest object\n\t *\n\t * @class  connections.Xhr\n\t */\n\tmodule.exports = XhrConnector;\n\n\t/* jshint browser:true */\n\n\tvar _ = __webpack_require__(4);\n\tvar ConnectionAbstract = __webpack_require__(39);\n\tvar ConnectionFault = __webpack_require__(17).ConnectionFault;\n\tvar asyncDefault = !(navigator && /PhantomJS/i.test(navigator.userAgent));\n\n\tfunction XhrConnector(host, config) {\n\t  ConnectionAbstract.call(this, host, config);\n\t}\n\t_.inherits(XhrConnector, ConnectionAbstract);\n\n\t/**\n\t * Simply returns an XHR object cross browser\n\t * @type {Function}\n\t */\n\tvar getXhr = _.noop;\n\n\tif (typeof XMLHttpRequest !== 'undefined') {\n\t  // rewrite the getXhr method to always return the native implementation\n\t  getXhr = function () {\n\t    return new XMLHttpRequest();\n\t  };\n\t} else {\n\t  // find the first MS implementation available\n\t  getXhr = _(['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'])\n\t  .map(function (appName) {\n\t    /* jshint unused: false */\n\t    try {\n\t      var test = new window.ActiveXObject(appName); // eslint-disable-line no-unused-vars\n\t      return function () {\n\t        return new window.ActiveXObject(appName);\n\t      };\n\t    } catch (e) {\n\t      return false;\n\t    }\n\t  })\n\t  .compact()\n\t  .first();\n\t}\n\n\tif (!getXhr) {\n\t  throw new Error('getXhr(): XMLHttpRequest not available');\n\t}\n\n\tXhrConnector.prototype.request = function (params, cb) {\n\t  var xhr = getXhr();\n\t  var timeoutId;\n\t  var host = this.host;\n\t  var log = this.log;\n\n\t  var url = host.makeUrl(params);\n\t  var headers = host.getHeaders(params.headers);\n\t  var async = params.async === false ? false : asyncDefault;\n\n\t  xhr.open(params.method || 'GET', url, async);\n\n\t  if (headers) {\n\t    for (var key in headers) {\n\t      if (headers[key] !== void 0) {\n\t        xhr.setRequestHeader(key, headers[key]);\n\t      }\n\t    }\n\t  }\n\n\t  xhr.onreadystatechange = function () {\n\t    if (xhr.readyState === 4) {\n\t      clearTimeout(timeoutId);\n\t      log.trace(params.method, url, params.body, xhr.responseText, xhr.status);\n\t      var err = xhr.status ? void 0 : new ConnectionFault(xhr.statusText || 'Request failed to complete.');\n\t      cb(err, xhr.responseText, xhr.status);\n\t    }\n\t  };\n\n\t  xhr.send(params.body || void 0);\n\n\t  return function () {\n\t    xhr.abort();\n\t  };\n\t};\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = ConnectionAbstract;\n\n\tvar _ = __webpack_require__(4);\n\tvar EventEmitter = __webpack_require__(29).EventEmitter;\n\tvar Log = __webpack_require__(28);\n\tvar Host = __webpack_require__(18);\n\tvar errors = __webpack_require__(17);\n\n\t/**\n\t * Abstract class used for Connection classes\n\t * @class ConnectionAbstract\n\t * @constructor\n\t */\n\tfunction ConnectionAbstract(host, config) {\n\t  config = config || {};\n\t  EventEmitter.call(this);\n\n\t  this.log = config.log || new Log();\n\t  this.pingTimeout = config.pingTimeout || 3000;\n\n\t  if (!host) {\n\t    throw new TypeError('Missing host');\n\t  } else if (host instanceof Host) {\n\t    this.host = host;\n\t  } else {\n\t    throw new TypeError('Invalid host');\n\t  }\n\n\t  _.makeBoundMethods(this);\n\t}\n\t_.inherits(ConnectionAbstract, EventEmitter);\n\n\t/**\n\t * Make a request using this connection. Must be overridden by Connection classes, which can add whatever keys to\n\t * params that they like. These are just the basics.\n\t *\n\t * @param [params] {Object} - The parameters for the request\n\t * @param params.path {String} - The path for which you are requesting\n\t * @param params.method {String} - The HTTP method for the request (GET, HEAD, etc.)\n\t * @param params.requestTimeout {Integer} - The amount of time in milliseconds that this request should be allowed to run for.\n\t * @param cb {Function} - A callback to be called once with `cb(err, responseBody, responseStatus)`\n\t */\n\tConnectionAbstract.prototype.request = function () {\n\t  throw new Error('Connection#request must be overwritten by the Connector');\n\t};\n\n\tConnectionAbstract.prototype.ping = function (params, cb) {\n\t  if (typeof params === 'function') {\n\t    cb = params;\n\t    params = null;\n\t  } else {\n\t    cb = typeof cb === 'function' ? cb : null;\n\t  }\n\n\t  var requestTimeout = this.pingTimeout;\n\t  var requestTimeoutId;\n\t  var aborted;\n\t  var abort;\n\n\t  if (params && params.hasOwnProperty('requestTimeout')) {\n\t    requestTimeout = params.requestTimeout;\n\t  }\n\n\t  abort = this.request(_.defaults(params || {}, {\n\t    path: '/',\n\t    method: 'HEAD'\n\t  }), function (err) {\n\t    if (aborted) {\n\t      return;\n\t    }\n\t    clearTimeout(requestTimeoutId);\n\t    if (cb) {\n\t      cb(err);\n\t    }\n\t  });\n\n\t  if (requestTimeout) {\n\t    requestTimeoutId = setTimeout(function () {\n\t      if (abort) {\n\t        abort();\n\t      }\n\t      aborted = true;\n\t      if (cb) {\n\t        cb(new errors.RequestTimeout('Ping Timeout after ' + requestTimeout + 'ms'));\n\t      }\n\t    }, requestTimeout);\n\t  }\n\t};\n\n\tConnectionAbstract.prototype.setStatus = function (status) {\n\t  var origStatus = this.status;\n\t  this.status = status;\n\n\t  this.emit('status set', status, origStatus, this);\n\n\t  if (status === 'closed') {\n\t    this.removeAllListeners();\n\t  }\n\t};\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports) {\n\n\t// empty (null-loader)\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports) {\n\n\t// empty (null-loader)\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t  angular: __webpack_require__(43),\n\t  json: __webpack_require__(44)\n\t};\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* global angular */\n\tvar _ = __webpack_require__(4);\n\tvar JsonSerializer = __webpack_require__(44);\n\n\tfunction AngularSerializer() {}\n\t_.inherits(AngularSerializer, JsonSerializer);\n\n\t// mimic the JsonSerializer's encode method, but use angular's toJson instead\n\tAngularSerializer.prototype.encode = function (val) {\n\t  switch (typeof val) {\n\t    case 'string':\n\t      return val;\n\t    case 'object':\n\t      if (val) return angular.toJson(val);\n\t    /* falls through */\n\t    default:\n\t      return;\n\t  }\n\t};\n\n\tmodule.exports = AngularSerializer;\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Simple JSON serializer\n\t * @type {[type]}\n\t */\n\tmodule.exports = Json;\n\n\tvar _ = __webpack_require__(4);\n\n\tfunction Json() {}\n\n\t/**\n\t * Converts a value into a string, or an error\n\t * @param  {*} val - Any value, methods are stripped and\n\t * see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify about other params\n\t * @return {String|Error} - A string is always returned, unless an error occured. then it will be that error.\n\t */\n\tJson.prototype.serialize = function (val, replacer, spaces) {\n\t  switch (typeof val) {\n\t    case 'string':\n\t      return val;\n\t    case 'object':\n\t      if (val) {\n\t        return JSON.stringify(val, replacer, spaces);\n\t      }\n\t    /* falls through */\n\t    default:\n\t      return;\n\t  }\n\t};\n\n\tJson.prototype.serialize.contentType = 'application/json';\n\n\t/**\n\t * Parse a JSON string, if it is already parsed it is ignored\n\t * @param  {String} str - the string to parse\n\t * @return {[type]}\n\t */\n\tJson.prototype.deserialize = function (str) {\n\t  if (typeof str === 'string') {\n\t    try {\n\t      return JSON.parse(str);\n\t    } catch (e) {}\n\t  }\n\t};\n\n\tJson.prototype.bulkBody = function (val) {\n\t  var body = '', i;\n\n\t  if (_.isArray(val)) {\n\t    for (i = 0; i < val.length; i++) {\n\t      body += this.serialize(val[i]) + '\\n';\n\t    }\n\t  } else if (typeof val === 'string') {\n\t    // make sure the string ends in a new line\n\t    body = val + (val[val.length - 1] === '\\n' ? '' : '\\n');\n\t  } else {\n\t    throw new TypeError('Bulk body should either be an Array of commands/string, or a String');\n\t  }\n\n\t  return body;\n\t};\n\n\tJson.prototype.bulkBody.contentType = 'application/x-ndjson';\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar _ = __webpack_require__(4);\n\n\tvar extractHostPartsRE1x = /\\[(?:(.*)\\/)?(.+?):(\\d+)\\]/;\n\n\tfunction makeNodeParser(hostProp) {\n\t  return function (nodes) {\n\t    return _.transform(nodes, function (hosts, node, id) {\n\t      var address = _.get(node, hostProp)\n\t      if (!address) return;\n\n\t      var host = {\n\t        host: undefined,\n\t        port: undefined,\n\t        _meta: {\n\t          id: id,\n\t          name: node.name,\n\t          version: node.version\n\t        }\n\t      };\n\n\t      var malformedError = new Error(\n\t        'Malformed ' + hostProp + '.' +\n\t        ' Got ' + JSON.stringify(address) +\n\t        ' and expected it to match \"{hostname?}/{ip}:{port}\".'\n\t      );\n\n\t      var matches1x = extractHostPartsRE1x.exec(address);\n\t      if (matches1x) {\n\t        host.host = matches1x[1] || matches1x[2];\n\t        host.port = parseInt(matches1x[3], 10);\n\t        hosts.push(host);\n\t        return;\n\t      }\n\n\t      if (address.indexOf('/') > -1) {\n\t        var withHostParts = address.split('/');\n\t        if (withHostParts.length !== 2) throw malformedError;\n\n\t        host.host = withHostParts.shift();\n\t        address = withHostParts.shift();\n\t      }\n\n\t      if (address.indexOf(':') < 0) {\n\t        throw malformedError;\n\t      }\n\n\t      var addressParts = address.split(':');\n\t      if (addressParts.length !== 2) {\n\t        throw malformedError;\n\t      }\n\n\t      host.host = host.host || addressParts[0];\n\t      host.port = parseInt(addressParts[1], 10);\n\t      hosts.push(host);\n\t    }, []);\n\t  };\n\t}\n\n\tmodule.exports = makeNodeParser('http.publish_address');\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\tvar _ = __webpack_require__(4);\n\n\t/**\n\t * Constructs a client action factory that uses specific defaults\n\t * @type {Function}\n\t */\n\texports.makeFactoryWithModifier = makeFactoryWithModifier;\n\n\t/**\n\t * Constructs a function that can be called to make a request to ES\n\t * @type {Function}\n\t */\n\texports.factory = makeFactoryWithModifier();\n\n\t/**\n\t * Constructs a proxy to another api method\n\t * @type {Function}\n\t */\n\texports.proxyFactory = exports.factory.proxy;\n\n\t// export so that we can test this\n\texports._resolveUrl = resolveUrl;\n\n\texports.ApiNamespace = function () {};\n\texports.namespaceFactory = function () {\n\t  function ClientNamespace(transport, client) {\n\t    this.transport = transport;\n\t    this.client = client;\n\t  }\n\n\t  ClientNamespace.prototype = new exports.ApiNamespace();\n\n\t  return ClientNamespace;\n\t};\n\n\tfunction makeFactoryWithModifier(modifier) {\n\t  modifier = modifier || _.identity;\n\n\t  var factory = function (spec) {\n\t    spec = modifier(spec);\n\n\t    if (!_.isPlainObject(spec.params)) {\n\t      spec.params = {};\n\t    }\n\n\t    if (!spec.method) {\n\t      spec.method = 'GET';\n\t    }\n\n\t    function action(params, cb) {\n\t      if (typeof params === 'function') {\n\t        cb = params;\n\t        params = {};\n\t      } else {\n\t        params = params || {};\n\t        cb = typeof cb === 'function' ? cb : null;\n\t      }\n\n\t      try {\n\t        return exec(this.transport, spec, _.clone(params), cb);\n\t      } catch (e) {\n\t        if (typeof cb === 'function') {\n\t          _.nextTick(cb, e);\n\t        } else {\n\t          var def = this.transport.defer();\n\t          def.reject(e);\n\t          return def.promise;\n\t        }\n\t      }\n\t    }\n\n\t    action.spec = spec;\n\n\t    return action;\n\t  };\n\n\t  factory.proxy = function (fn, spec) {\n\t    return function (params, cb) {\n\t      if (typeof params === 'function') {\n\t        cb = params;\n\t        params = {};\n\t      } else {\n\t        params = params || {};\n\t        cb = typeof cb === 'function' ? cb : null;\n\t      }\n\n\t      if (spec.transform) {\n\t        spec.transform(params);\n\t      }\n\n\t      return fn.call(this, params, cb);\n\t    };\n\t  };\n\n\t  return factory;\n\t}\n\n\tvar castType = {\n\t  'enum': function validSelection(param, val, name) {\n\t    if (_.isString(val) && val.indexOf(',') > -1) {\n\t      val = commaSepList(val);\n\t    }\n\n\t    if (_.isArray(val)) {\n\t      return val.map(function (v) {\n\t        return validSelection(param, v, name);\n\t      }).join(',');\n\t    }\n\n\t    for (var i = 0; i < param.options.length; i++) {\n\t      if (param.options[i] === String(val)) {\n\t        return param.options[i];\n\t      }\n\t    }\n\t    throw new TypeError('Invalid ' + name + ': expected ' + (\n\t      param.options.length > 1\n\t      ? 'one of ' + param.options.join(',')\n\t      : param.options[0]\n\t    ));\n\t  },\n\t  duration: function (param, val, name) {\n\t    if (_.isNumeric(val) || _.isInterval(val)) {\n\t      return val;\n\t    } else {\n\t      throw new TypeError(\n\t        'Invalid ' + name + ': expected a number or interval ' +\n\t        '(an integer followed by one of M, w, d, h, m, s, y or ms).'\n\t      );\n\t    }\n\t  },\n\t  list: function (param, val, name) {\n\t    switch (typeof val) {\n\t      case 'number':\n\t      case 'boolean':\n\t        return '' + val;\n\t      case 'string':\n\t        val = commaSepList(val);\n\t      /* falls through */\n\t      case 'object':\n\t        if (_.isArray(val)) {\n\t          return val.join(',');\n\t        }\n\t      /* falls through */\n\t      default:\n\t        throw new TypeError('Invalid ' + name + ': expected be a comma separated list, array, number or string.');\n\t    }\n\t  },\n\t  'boolean': function (param, val) {\n\t    val = _.isString(val) ? val.toLowerCase() : val;\n\t    return (val === 'no' || val === 'off') ? false : !!val;\n\t  },\n\t  number: function (param, val, name) {\n\t    if (_.isNumeric(val)) {\n\t      return val * 1;\n\t    } else {\n\t      throw new TypeError('Invalid ' + name + ': expected a number.');\n\t    }\n\t  },\n\t  string: function (param, val, name) {\n\t    switch (typeof val) {\n\t      case 'number':\n\t      case 'string':\n\t        return '' + val;\n\t      default:\n\t        throw new TypeError('Invalid ' + name + ': expected a string.');\n\t    }\n\t  },\n\t  time: function (param, val, name) {\n\t    if (typeof val === 'string') {\n\t      return val;\n\t    }\n\t    else if (_.isNumeric(val)) {\n\t      return '' + val;\n\t    }\n\t    else if (val instanceof Date) {\n\t      return '' + val.getTime();\n\t    }\n\t    else {\n\t      throw new TypeError('Invalid ' + name + ': expected some sort of time.');\n\t    }\n\t  }\n\t};\n\n\tfunction resolveUrl(url, params) {\n\t  var vars = {}, i, key;\n\n\t  if (url.req) {\n\t    // url has required params\n\t    if (!url.reqParamKeys) {\n\t      // create cached key list on demand\n\t      url.reqParamKeys = _.keys(url.req);\n\t    }\n\n\t    for (i = 0; i < url.reqParamKeys.length; i ++) {\n\t      key = url.reqParamKeys[i];\n\t      if (!params.hasOwnProperty(key) || params[key] == null) {\n\t        // missing a required param\n\t        return false;\n\t      } else {\n\t        // cast of copy required param\n\t        if (castType[url.req[key].type]) {\n\t          vars[key] = castType[url.req[key].type](url.req[key], params[key], key);\n\t        } else {\n\t          vars[key] = params[key];\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  if (url.opt) {\n\t    // url has optional params\n\t    if (!url.optParamKeys) {\n\t      url.optParamKeys = _.keys(url.opt);\n\t    }\n\n\t    for (i = 0; i < url.optParamKeys.length; i ++) {\n\t      key = url.optParamKeys[i];\n\t      if (params[key]) {\n\t        if (castType[url.opt[key].type] || params[key] == null) {\n\t          vars[key] = castType[url.opt[key].type](url.opt[key], params[key], key);\n\t        } else {\n\t          vars[key] = params[key];\n\t        }\n\t      } else {\n\t        vars[key] = url.opt[key]['default'];\n\t      }\n\t    }\n\t  }\n\n\t  if (!url.template) {\n\t    // compile the template on demand\n\t    url.template = _.template(url.fmt);\n\t  }\n\n\t  return url.template(_.transform(vars, function (note, val, name) {\n\t    // encode each value\n\t    note[name] = encodeURIComponent(val);\n\t    // remove it from the params so that it isn't sent to the final request\n\t    delete params[name];\n\t  }, {}));\n\t}\n\n\n\tfunction exec(transport, spec, params, cb) {\n\t  var request = {\n\t    method: spec.method\n\t  };\n\t  var query = {};\n\t  var i;\n\n\t  // pass the timeout from the spec\n\t  if (spec.requestTimeout) {\n\t    request.requestTimeout = spec.requestTimeout;\n\t  }\n\n\t  if (!params.body && spec.paramAsBody) {\n\t    if (typeof spec.paramAsBody === 'object') {\n\t      params.body = {};\n\t      if (spec.paramAsBody.castToArray) {\n\t        params.body[spec.paramAsBody.body] = [].concat(params[spec.paramAsBody.param]);\n\t      } else {\n\t        params.body[spec.paramAsBody.body] = params[spec.paramAsBody.param];\n\t      }\n\t      delete params[spec.paramAsBody.param];\n\t    } else {\n\t      params.body = params[spec.paramAsBody];\n\t      delete params[spec.paramAsBody];\n\t    }\n\t  }\n\n\t  // verify that we have the body if needed\n\t  if (spec.needsBody && !params.body) {\n\t    throw new TypeError('A request body is required.');\n\t  }\n\n\t  // control params\n\t  if (spec.bulkBody) {\n\t    request.bulkBody = true;\n\t  }\n\n\t  if (spec.method === 'HEAD') {\n\t    request.castExists = true;\n\t  }\n\n\t  // pick the url\n\t  if (spec.url) {\n\t    // only one url option\n\t    request.path = resolveUrl(spec.url, params);\n\t  } else {\n\t    for (i = 0; i < spec.urls.length; i++) {\n\t      if (request.path = resolveUrl(spec.urls[i], params)) {\n\t        break;\n\t      }\n\t    }\n\t  }\n\n\t  if (!request.path) {\n\t    // there must have been some mimimun requirements that were not met\n\t    var minUrl = spec.url || spec.urls[spec.urls.length - 1];\n\t    throw new TypeError('Unable to build a path with those params. Supply at least ' + _.keys(minUrl.req).join(', '));\n\t  }\n\n\t  // build the query string\n\t  if (!spec.paramKeys) {\n\t    // build a key list on demand\n\t    spec.paramKeys = _.keys(spec.params);\n\t    spec.requireParamKeys = _.transform(spec.params, function (req, param, key) {\n\t      if (param.required) {\n\t        req.push(key);\n\t      }\n\t    }, []);\n\t  }\n\n\t  for (var key in params) {\n\t    if (params.hasOwnProperty(key) && params[key] != null) {\n\t      switch (key) {\n\t        case 'body':\n\t        case 'headers':\n\t        case 'requestTimeout':\n\t        case 'maxRetries':\n\t          request[key] = params[key];\n\t          break;\n\t        case 'ignore':\n\t          request.ignore = _.isArray(params[key]) ? params[key] : [params[key]];\n\t          break;\n\t        case 'method':\n\t          request.method = _.toUpperString(params[key]);\n\t          break;\n\t        default:\n\t          var paramSpec = spec.params[key];\n\t          if (paramSpec) {\n\t          // param keys don't always match the param name, in those cases it's stored in the param def as \"name\"\n\t            paramSpec.name = paramSpec.name || key;\n\t            if (params[key] != null) {\n\t              if (castType[paramSpec.type]) {\n\t                query[paramSpec.name] = castType[paramSpec.type](paramSpec, params[key], key);\n\t              } else {\n\t                query[paramSpec.name] = params[key];\n\t              }\n\n\t              if (paramSpec['default'] && query[paramSpec.name] === paramSpec['default']) {\n\t                delete query[paramSpec.name];\n\t              }\n\t            }\n\t          } else {\n\t            query[key] = params[key];\n\t          }\n\t      }\n\t    }\n\t  }\n\n\t  for (i = 0; i < spec.requireParamKeys.length; i ++) {\n\t    if (!query.hasOwnProperty(spec.requireParamKeys[i])) {\n\t      throw new TypeError('Missing required parameter ' + spec.requireParamKeys[i]);\n\t    }\n\t  }\n\n\t  request.query = query;\n\n\t  return transport.request(request, cb);\n\t}\n\n\tfunction commaSepList(str) {\n\t  return str.split(',').map(function (i) {\n\t    return i.trim();\n\t  });\n\t}\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t  '_default': __webpack_require__(48),\n\t  '6.1': __webpack_require__(48),\n\t  '6.0': __webpack_require__(49),\n\t  '5.6': __webpack_require__(50),\n\t  '5.5': __webpack_require__(51),\n\t  '5.4': __webpack_require__(52),\n\t  '6.x': __webpack_require__(53),\n\t  '6.2': __webpack_require__(54),\n\t  'master': __webpack_require__(55)\n\t};\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar ca = __webpack_require__(46).makeFactoryWithModifier(function (spec) {\n\t  return __webpack_require__(4).merge(spec, {\n\t    params: {\n\t      filterPath: {\n\t        type: 'list',\n\t        name: 'filter_path'\n\t      }\n\t    }\n\t  });\n\t});\n\tvar namespace = __webpack_require__(46).namespaceFactory;\n\tvar api = module.exports = {};\n\n\tapi._namespaces = ['cat', 'cluster', 'indices', 'ingest', 'nodes', 'snapshot', 'tasks'];\n\n\t/**\n\t * Perform a [bulk](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-bulk.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - Default list of fields to exclude from the returned _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - Default list of fields to extract and return from the _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n\t */\n\tapi.bulk = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    type: {\n\t      type: 'string'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_bulk'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.cat = namespace();\n\n\t/**\n\t * Perform a [cat.aliases](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.cat.prototype.aliases = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/aliases/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/aliases'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.allocation](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-allocation.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n\t */\n\tapi.cat.prototype.allocation = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/allocation/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/allocation'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.count](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.count = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/count/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/count'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.fielddata](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-fielddata.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n\t */\n\tapi.cat.prototype.fielddata = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/fielddata/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/fielddata'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.health](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.health = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    ts: {\n\t      type: 'boolean',\n\t      'default': true\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/health'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.help](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t */\n\tapi.cat.prototype.help = ca({\n\t  params: {\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.indices](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-indices.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-string,`String`>>} params.health - A health status (\"green\", \"yellow\", or \"red\" to filter only indices matching the specified health status\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.indices = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'm',\n\t        'g'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    health: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ]\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    pri: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/indices/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/indices'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.master](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-master.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.master = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/master'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodeattrs](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-nodeattrs.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodeattrs = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodeattrs'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodes](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-nodes.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Return the full node ID instead of the shortened version (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodes = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    fullId: {\n\t      type: 'boolean',\n\t      name: 'full_id'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodes'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-pending-tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.pendingTasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.plugins](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-plugins.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.plugins = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/plugins'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.recovery = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/recovery/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.repositories](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-repositories.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.repositories = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/repositories'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.segments](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.segments = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/segments/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.shards](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.shards = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/shards/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/shards'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.snapshots](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Set to true to ignore unavailable snapshots\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n\t */\n\tapi.cat.prototype.snapshots = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'ignore_unavailable'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/snapshots/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/snapshots'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.tasks](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-number,`Number`>>} params.parentTask - Return tasks with specified parent task id. Set to -1 to return all.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.tasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    nodeId: {\n\t      type: 'list',\n\t      name: 'node_id'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTask: {\n\t      type: 'number',\n\t      name: 'parent_task'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.templates](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>} params.name - A pattern that returned template names must match\n\t */\n\tapi.cat.prototype.templates = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/templates/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/templates'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.threadPool](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cat-thread-pool.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.size - The multiplier in which to display values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.threadPoolPatterns - A comma-separated list of regular-expressions to filter the thread pools in the output\n\t */\n\tapi.cat.prototype.threadPool = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    size: {\n\t      type: 'enum',\n\t      options: [\n\t        '',\n\t        'k',\n\t        'm',\n\t        'g',\n\t        't',\n\t        'p'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/thread_pool/<%=threadPoolPatterns%>',\n\t      req: {\n\t        threadPoolPatterns: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/thread_pool'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [clearScroll](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n\t */\n\tapi.clearScroll = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\tapi.cluster = namespace();\n\n\t/**\n\t * Perform a [cluster.allocationExplain](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cluster-allocation-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeYesDecisions - Return 'YES' decisions in explanation (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDiskInfo - Return information about disk usage and shard sizes (default: false)\n\t */\n\tapi.cluster.prototype.allocationExplain = ca({\n\t  params: {\n\t    includeYesDecisions: {\n\t      type: 'boolean',\n\t      name: 'include_yes_decisions'\n\t    },\n\t    includeDiskInfo: {\n\t      type: 'boolean',\n\t      name: 'include_disk_info'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/allocation/explain'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default clusters setting.\n\t */\n\tapi.cluster.prototype.getSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.health](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cluster-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n\t * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n\t * @param {<<api-param-type-string,`String`>>} params.waitForEvents - Wait until all currently queued events with the given priority are processed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForNoRelocatingShards - Whether to wait until there are no relocating shards in the cluster\n\t * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n\t */\n\tapi.cluster.prototype.health = ca({\n\t  params: {\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'cluster',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForNodes: {\n\t      type: 'string',\n\t      name: 'wait_for_nodes'\n\t    },\n\t    waitForEvents: {\n\t      type: 'enum',\n\t      options: [\n\t        'immediate',\n\t        'urgent',\n\t        'high',\n\t        'normal',\n\t        'low',\n\t        'languid'\n\t      ],\n\t      name: 'wait_for_events'\n\t    },\n\t    waitForNoRelocatingShards: {\n\t      type: 'boolean',\n\t      name: 'wait_for_no_relocating_shards'\n\t    },\n\t    waitForStatus: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ],\n\t      name: 'wait_for_status'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/health/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/health'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cluster-pending.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.cluster.prototype.pendingTasks = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.putSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [cluster.remoteInfo](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cluster-remote-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.cluster.prototype.remoteInfo = ca({\n\t  url: {\n\t    fmt: '/_remote/info'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.reroute](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cluster-reroute.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.retryFailed - Retries allocation of shards that are blocked due to too many subsequent allocation failures\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.reroute = ca({\n\t  params: {\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    retryFailed: {\n\t      type: 'boolean',\n\t      name: 'retry_failed'\n\t    },\n\t    metric: {\n\t      type: 'list',\n\t      options: [\n\t        '_all',\n\t        'blocks',\n\t        'metadata',\n\t        'nodes',\n\t        'routing_table',\n\t        'master_node',\n\t        'version'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/reroute'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.state](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cluster-state.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t */\n\tapi.cluster.prototype.state = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        },\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.stats](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cluster-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.cluster.prototype.stats = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [count](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/search-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum count for each shard, upon reaching which the query execution will terminate early\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n\t */\n\tapi.count = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    minScore: {\n\t      type: 'number',\n\t      name: 'min_score'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_count'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [create](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_create',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [delete](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-delete.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi['delete'] = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [deleteByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-delete-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the delete-by-query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the delete-by-query is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle for this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.deleteByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [deleteScript](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.deleteScript = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_scripts/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [exists](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.exists = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [existsSource](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.existsSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [explain](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/search-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.explain = ca({\n\t  params: {\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [fieldCaps](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/search-field-caps.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of field names\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.fieldCaps = ca({\n\t  params: {\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_field_caps',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_field_caps'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [get](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.get = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getScript](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.getScript = ca({\n\t  url: {\n\t    fmt: '/_scripts/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getSource](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.getSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [index](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.index = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    opType: {\n\t      type: 'enum',\n\t      'default': 'index',\n\t      options: [\n\t        'index',\n\t        'create'\n\t      ],\n\t      name: 'op_type'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.indices = namespace();\n\n\t/**\n\t * Perform a [indices.analyze](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-analyze.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n\t * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n\t */\n\tapi.indices.prototype.analyze = ca({\n\t  params: {\n\t    index: {\n\t      type: 'string'\n\t    },\n\t    preferLocal: {\n\t      type: 'boolean',\n\t      name: 'prefer_local'\n\t    },\n\t    format: {\n\t      type: 'enum',\n\t      'default': 'detailed',\n\t      options: [\n\t        'detailed',\n\t        'text'\n\t      ]\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_analyze',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_analyze'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.clearCache](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-clearcache.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Clear request cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n\t */\n\tapi.indices.prototype.clearCache = ca({\n\t  params: {\n\t    fieldData: {\n\t      type: 'boolean',\n\t      name: 'field_data'\n\t    },\n\t    fielddata: {\n\t      type: 'boolean'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    query: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    index: {\n\t      type: 'list'\n\t    },\n\t    recycler: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    request: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_cache/clear',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cache/clear'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.close](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n\t */\n\tapi.indices.prototype.close = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_close',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.create](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-create-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for before the operation returns.\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t */\n\tapi.indices.prototype.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    updateAllTypes: {\n\t      type: 'boolean',\n\t      name: 'update_all_types'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.delete](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-delete-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n\t */\n\tapi.indices.prototype['delete'] = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n\t */\n\tapi.indices.prototype.deleteAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.deleteTemplate = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.exists](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t */\n\tapi.indices.prototype.exists = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.existsAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.existsTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsType](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-types-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n\t */\n\tapi.indices.prototype.existsType = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_mapping/<%=type%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      type: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.flush](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flush = ca({\n\t  params: {\n\t    force: {\n\t      type: 'boolean'\n\t    },\n\t    waitIfOngoing: {\n\t      type: 'boolean',\n\t      name: 'wait_if_ongoing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.flushSynced](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-synced-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flushSynced = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush/synced',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush/synced'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.forcemerge](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-forcemerge.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.forcemerge = ca({\n\t  params: {\n\t    flush: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    maxNumSegments: {\n\t      type: 'number',\n\t      name: 'max_num_segments'\n\t    },\n\t    onlyExpungeDeletes: {\n\t      type: 'boolean',\n\t      name: 'only_expunge_deletes'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    waitForMerge: {\n\t      type: 'boolean',\n\t      name: 'wait_for_merge'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_forcemerge',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_forcemerge'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.get](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-get-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t */\n\tapi.indices.prototype.get = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [indices.getAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.getAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_alias',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getFieldMapping](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-get-field-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n\t */\n\tapi.indices.prototype.getFieldMapping = ca({\n\t  params: {\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      name: 'include_defaults'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/field/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getMapping](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-get-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t */\n\tapi.indices.prototype.getMapping = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-get-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n\t */\n\tapi.indices.prototype.getSettings = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': [\n\t        'open',\n\t        'closed'\n\t      ],\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.getTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_template/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_template'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getUpgrade](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.getUpgrade = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.open](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of active shards to wait for before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n\t */\n\tapi.indices.prototype.open = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'closed',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_open',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.putAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n\t */\n\tapi.indices.prototype.putAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putMapping](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-put-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n\t */\n\tapi.indices.prototype.putMapping = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    updateAllTypes: {\n\t      type: 'boolean',\n\t      name: 'update_all_types'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preserveExisting - Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.putSettings = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    preserveExisting: {\n\t      type: 'boolean',\n\t      name: 'preserve_existing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.putTemplate = ca({\n\t  params: {\n\t    order: {\n\t      type: 'number'\n\t    },\n\t    create: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.recovery = ca({\n\t  params: {\n\t    detailed: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    activeOnly: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'active_only'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_recovery',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.refresh](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-refresh.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.refresh = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_refresh',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_refresh'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.rollover](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-rollover-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the newly created rollover index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.alias - The name of the alias to rollover\n\t * @param {<<api-param-type-string,`String`>>} params.newIndex - The name of the rollover index\n\t */\n\tapi.indices.prototype.rollover = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=alias%>/_rollover/<%=newIndex%>',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        },\n\t        newIndex: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=alias%>/_rollover',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.segments](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.segments = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_segments',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shardStores](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-shards-stores.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.shardStores = ca({\n\t  params: {\n\t    status: {\n\t      type: 'list',\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red',\n\t        'all'\n\t      ]\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_shard_stores',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_shard_stores'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shrink](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-shrink-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to shrink\n\t * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to shrink into\n\t */\n\tapi.indices.prototype.shrink = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_shrink/<%=target%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      target: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.split](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-split-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to split\n\t * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to split into\n\t */\n\tapi.indices.prototype.split = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_split/<%=target%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      target: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.stats](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n\t */\n\tapi.indices.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'list'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'indices',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_stats/<%=metric%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_stats',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.updateAliases](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.indices.prototype.updateAliases = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_aliases'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.upgrade](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.upgrade = ca({\n\t  params: {\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    onlyAncientSegments: {\n\t      type: 'boolean',\n\t      name: 'only_ancient_segments'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.validateQuery](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/search-validate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allShards - Execute validation on all shards instead of one random shard per index\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n\t */\n\tapi.indices.prototype.validateQuery = ca({\n\t  params: {\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    rewrite: {\n\t      type: 'boolean'\n\t    },\n\t    allShards: {\n\t      type: 'boolean',\n\t      name: 'all_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_validate/query'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [info](http://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.info = ca({\n\t  url: {\n\t    fmt: '/'\n\t  }\n\t});\n\n\tapi.ingest = namespace();\n\n\t/**\n\t * Perform a [ingest.deletePipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/6.1/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.deletePipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [ingest.getPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/6.1/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.id - Comma separated list of pipeline ids. Wildcards supported\n\t */\n\tapi.ingest.prototype.getPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [ingest.processorGrok](https://www.elastic.co/guide/en/elasticsearch/plugins/6.1/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.ingest.prototype.processorGrok = ca({\n\t  url: {\n\t    fmt: '/_ingest/processor/grok'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [ingest.putPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/6.1/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.putPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [ingest.simulate](https://www.elastic.co/guide/en/elasticsearch/plugins/6.1/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Verbose mode. Display data output for each processor in executed pipeline\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.simulate = ca({\n\t  params: {\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>/_simulate',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline/_simulate'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mget](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-multi-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.mget = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mget'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearch](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/search-multi-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-number,`Number`>>} [params.preFilterShardSize=128] - A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it's rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearch = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    preFilterShardSize: {\n\t      type: 'number',\n\t      'default': 128,\n\t      name: 'pre_filter_shard_size'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/search-multi-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearchTemplate = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch/template'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mtermvectors](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-multi-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t */\n\tapi.mtermvectors = ca({\n\t  params: {\n\t    ids: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mtermvectors'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\tapi.nodes = namespace();\n\n\t/**\n\t * Perform a [nodes.hotThreads](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cluster-nodes-hot-threads.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n\t * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n\t * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.hotThreads = ca({\n\t  params: {\n\t    interval: {\n\t      type: 'time'\n\t    },\n\t    snapshots: {\n\t      type: 'number'\n\t    },\n\t    threads: {\n\t      type: 'number'\n\t    },\n\t    ignoreIdleThreads: {\n\t      type: 'boolean',\n\t      name: 'ignore_idle_threads'\n\t    },\n\t    type: {\n\t      type: 'enum',\n\t      options: [\n\t        'cpu',\n\t        'wait',\n\t        'block'\n\t      ]\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/hotthreads'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.info](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cluster-nodes-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n\t */\n\tapi.nodes.prototype.info = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.stats](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cluster-nodes-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at index, node or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'boolean'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'node',\n\t      options: [\n\t        'indices',\n\t        'node',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.usage](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/cluster-nodes-usage.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.usage = ca({\n\t  params: {\n\t    human: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/usage/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'rest_actions'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/usage',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/usage/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'rest_actions'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/usage'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [ping](http://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.ping = ca({\n\t  url: {\n\t    fmt: '/'\n\t  },\n\t  requestTimeout: 3000,\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [putScript](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.context - Script context\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.putScript = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    context: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_scripts/<%=id%>/<%=context%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        },\n\t        context: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_scripts/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [reindex](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the reindex is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t */\n\tapi.reindex = ca({\n\t  params: {\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [reindexRethrottle](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - The task id to rethrottle\n\t */\n\tapi.reindexRethrottle = ca({\n\t  params: {\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      required: true,\n\t      name: 'requests_per_second'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex/<%=taskId%>/_rethrottle',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [renderSearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n\t */\n\tapi.renderSearchTemplate = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_render/template/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_render/template'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [scroll](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n\t */\n\tapi.scroll = ca({\n\t  params: {\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    scrollId: {\n\t      type: 'string',\n\t      name: 'scroll_id'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [search](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/search-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.docvalueFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n\t * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n\t * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n\t * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.trackTotalHits - Indicate if the number of documents that match the query should be tracked\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-number,`Number`>>} [params.batchedReduceSize=512] - The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.\n\t * @param {<<api-param-type-number,`Number`>>} [params.maxConcurrentShardRequests=The default grows with the number of nodes in the cluster but is at most 256.] - The number of concurrent shard requests this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests\n\t * @param {<<api-param-type-number,`Number`>>} [params.preFilterShardSize=128] - A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it's rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.search = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    docvalueFields: {\n\t      type: 'list',\n\t      name: 'docvalue_fields'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    suggestField: {\n\t      type: 'string',\n\t      name: 'suggest_field'\n\t    },\n\t    suggestMode: {\n\t      type: 'enum',\n\t      'default': 'missing',\n\t      options: [\n\t        'missing',\n\t        'popular',\n\t        'always'\n\t      ],\n\t      name: 'suggest_mode'\n\t    },\n\t    suggestSize: {\n\t      type: 'number',\n\t      name: 'suggest_size'\n\t    },\n\t    suggestText: {\n\t      type: 'string',\n\t      name: 'suggest_text'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    trackScores: {\n\t      type: 'boolean',\n\t      name: 'track_scores'\n\t    },\n\t    trackTotalHits: {\n\t      type: 'boolean',\n\t      name: 'track_total_hits'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    batchedReduceSize: {\n\t      type: 'number',\n\t      'default': 512,\n\t      name: 'batched_reduce_size'\n\t    },\n\t    maxConcurrentShardRequests: {\n\t      type: 'number',\n\t      'default': 'The default grows with the number of nodes in the cluster but is at most 256.',\n\t      name: 'max_concurrent_shard_requests'\n\t    },\n\t    preFilterShardSize: {\n\t      type: 'number',\n\t      'default': 128,\n\t      name: 'pre_filter_shard_size'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchShards](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/search-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.searchShards = ca({\n\t  params: {\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_search_shards',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search_shards'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.profile - Specify whether to profile the query execution\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.searchTemplate = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    profile: {\n\t      type: 'boolean'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/template'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.snapshot = namespace();\n\n\t/**\n\t * Perform a [snapshot.create](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.create = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.createRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.createRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    verify: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.delete](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype['delete'] = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.deleteRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.deleteRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.get](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Whether to show verbose snapshot info or only show the basic info found in the repository index blob\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.get = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    verbose: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [snapshot.getRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.getRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.restore](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.restore = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.status](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.status = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        },\n\t        snapshot: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/_status'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.verifyRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.verifyRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/_verify',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\tapi.tasks = namespace();\n\n\t/**\n\t * Perform a [tasks.cancel](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodes - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Cancel tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTaskId - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Cancel the task with specified task id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.cancel = ca({\n\t  params: {\n\t    nodes: {\n\t      type: 'list'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTaskId: {\n\t      type: 'string',\n\t      name: 'parent_task_id'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_tasks/<%=taskId%>/_cancel',\n\t      req: {\n\t        taskId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_tasks/_cancel'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [tasks.get](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Return the task with specified id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.get = ca({\n\t  params: {\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks/<%=taskId%>',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [tasks.list](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodes - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTaskId - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.groupBy=nodes] - Group tasks by nodes or parent/child relationships\n\t */\n\tapi.tasks.prototype.list = ca({\n\t  params: {\n\t    nodes: {\n\t      type: 'list'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTaskId: {\n\t      type: 'string',\n\t      name: 'parent_task_id'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    groupBy: {\n\t      type: 'enum',\n\t      'default': 'nodes',\n\t      options: [\n\t        'nodes',\n\t        'parents'\n\t      ],\n\t      name: 'group_by'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [termvectors](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n\t */\n\tapi.termvectors = ca({\n\t  params: {\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [update](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-update.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: painless)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.update = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    lang: {\n\t      type: 'string'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    retryOnConflict: {\n\t      type: 'number',\n\t      name: 'retry_on_conflict'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [updateByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/6.1/docs-update-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the update by query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - Ingest pipeline to set on index requests made by this action. (default: none)\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.versionType - Should the document increment the version number (internal) on hit or not (reindex)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the update by query operation is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.updateByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    versionType: {\n\t      type: 'boolean',\n\t      name: 'version_type'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar ca = __webpack_require__(46).makeFactoryWithModifier(function (spec) {\n\t  return __webpack_require__(4).merge(spec, {\n\t    params: {\n\t      filterPath: {\n\t        type: 'list',\n\t        name: 'filter_path'\n\t      }\n\t    }\n\t  });\n\t});\n\tvar namespace = __webpack_require__(46).namespaceFactory;\n\tvar api = module.exports = {};\n\n\tapi._namespaces = ['cat', 'cluster', 'indices', 'ingest', 'nodes', 'snapshot', 'tasks'];\n\n\t/**\n\t * Perform a [bulk](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-bulk.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - Default list of fields to exclude from the returned _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - Default list of fields to extract and return from the _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n\t */\n\tapi.bulk = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    type: {\n\t      type: 'string'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_bulk'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.cat = namespace();\n\n\t/**\n\t * Perform a [cat.aliases](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.cat.prototype.aliases = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/aliases/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/aliases'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.allocation](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-allocation.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n\t */\n\tapi.cat.prototype.allocation = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/allocation/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/allocation'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.count](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.count = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/count/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/count'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.fielddata](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-fielddata.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n\t */\n\tapi.cat.prototype.fielddata = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/fielddata/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/fielddata'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.health](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.health = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    ts: {\n\t      type: 'boolean',\n\t      'default': true\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/health'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.help](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t */\n\tapi.cat.prototype.help = ca({\n\t  params: {\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.indices](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-indices.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-string,`String`>>} params.health - A health status (\"green\", \"yellow\", or \"red\" to filter only indices matching the specified health status\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.indices = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'm',\n\t        'g'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    health: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ]\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    pri: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/indices/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/indices'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.master](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-master.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.master = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/master'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodeattrs](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-nodeattrs.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodeattrs = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodeattrs'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodes](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-nodes.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Return the full node ID instead of the shortened version (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodes = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    fullId: {\n\t      type: 'boolean',\n\t      name: 'full_id'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodes'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-pending-tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.pendingTasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.plugins](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-plugins.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.plugins = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/plugins'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.recovery = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/recovery/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.repositories](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-repositories.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.repositories = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/repositories'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.segments](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.segments = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/segments/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.shards](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.shards = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/shards/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/shards'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.snapshots](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Set to true to ignore unavailable snapshots\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n\t */\n\tapi.cat.prototype.snapshots = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'ignore_unavailable'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/snapshots/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/snapshots'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.tasks](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-number,`Number`>>} params.parentTask - Return tasks with specified parent task id. Set to -1 to return all.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.tasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    nodeId: {\n\t      type: 'list',\n\t      name: 'node_id'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTask: {\n\t      type: 'number',\n\t      name: 'parent_task'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.templates](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>} params.name - A pattern that returned template names must match\n\t */\n\tapi.cat.prototype.templates = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/templates/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/templates'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.threadPool](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cat-thread-pool.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.size - The multiplier in which to display values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.threadPoolPatterns - A comma-separated list of regular-expressions to filter the thread pools in the output\n\t */\n\tapi.cat.prototype.threadPool = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    size: {\n\t      type: 'enum',\n\t      options: [\n\t        '',\n\t        'k',\n\t        'm',\n\t        'g',\n\t        't',\n\t        'p'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/thread_pool/<%=threadPoolPatterns%>',\n\t      req: {\n\t        threadPoolPatterns: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/thread_pool'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [clearScroll](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n\t */\n\tapi.clearScroll = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\tapi.cluster = namespace();\n\n\t/**\n\t * Perform a [cluster.allocationExplain](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cluster-allocation-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeYesDecisions - Return 'YES' decisions in explanation (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDiskInfo - Return information about disk usage and shard sizes (default: false)\n\t */\n\tapi.cluster.prototype.allocationExplain = ca({\n\t  params: {\n\t    includeYesDecisions: {\n\t      type: 'boolean',\n\t      name: 'include_yes_decisions'\n\t    },\n\t    includeDiskInfo: {\n\t      type: 'boolean',\n\t      name: 'include_disk_info'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/allocation/explain'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default clusters setting.\n\t */\n\tapi.cluster.prototype.getSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.health](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cluster-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n\t * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n\t * @param {<<api-param-type-string,`String`>>} params.waitForEvents - Wait until all currently queued events with the given priority are processed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForNoRelocatingShards - Whether to wait until there are no relocating shards in the cluster\n\t * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n\t */\n\tapi.cluster.prototype.health = ca({\n\t  params: {\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'cluster',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForNodes: {\n\t      type: 'string',\n\t      name: 'wait_for_nodes'\n\t    },\n\t    waitForEvents: {\n\t      type: 'enum',\n\t      options: [\n\t        'immediate',\n\t        'urgent',\n\t        'high',\n\t        'normal',\n\t        'low',\n\t        'languid'\n\t      ],\n\t      name: 'wait_for_events'\n\t    },\n\t    waitForNoRelocatingShards: {\n\t      type: 'boolean',\n\t      name: 'wait_for_no_relocating_shards'\n\t    },\n\t    waitForStatus: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ],\n\t      name: 'wait_for_status'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/health/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/health'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cluster-pending.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.cluster.prototype.pendingTasks = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.putSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [cluster.remoteInfo](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cluster-remote-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.cluster.prototype.remoteInfo = ca({\n\t  url: {\n\t    fmt: '/_remote/info'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.reroute](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cluster-reroute.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.retryFailed - Retries allocation of shards that are blocked due to too many subsequent allocation failures\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.reroute = ca({\n\t  params: {\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    retryFailed: {\n\t      type: 'boolean',\n\t      name: 'retry_failed'\n\t    },\n\t    metric: {\n\t      type: 'list',\n\t      options: [\n\t        '_all',\n\t        'blocks',\n\t        'metadata',\n\t        'nodes',\n\t        'routing_table',\n\t        'master_node',\n\t        'version'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/reroute'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.state](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cluster-state.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t */\n\tapi.cluster.prototype.state = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        },\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.stats](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cluster-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.cluster.prototype.stats = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [count](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/search-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum count for each shard, upon reaching which the query execution will terminate early\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n\t */\n\tapi.count = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    minScore: {\n\t      type: 'number',\n\t      name: 'min_score'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_count'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [create](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_create',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [delete](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-delete.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi['delete'] = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [deleteByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-delete-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the delete-by-query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the delete-by-query is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle for this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.deleteByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [deleteScript](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.deleteScript = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_scripts/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [exists](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.exists = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [existsSource](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.existsSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [explain](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/search-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.explain = ca({\n\t  params: {\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [fieldCaps](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/search-field-caps.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of field names\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.fieldCaps = ca({\n\t  params: {\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_field_caps',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_field_caps'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [get](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.get = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getScript](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.getScript = ca({\n\t  url: {\n\t    fmt: '/_scripts/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getSource](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.getSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [index](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.index = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    opType: {\n\t      type: 'enum',\n\t      'default': 'index',\n\t      options: [\n\t        'index',\n\t        'create'\n\t      ],\n\t      name: 'op_type'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.indices = namespace();\n\n\t/**\n\t * Perform a [indices.analyze](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-analyze.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n\t * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n\t */\n\tapi.indices.prototype.analyze = ca({\n\t  params: {\n\t    index: {\n\t      type: 'string'\n\t    },\n\t    preferLocal: {\n\t      type: 'boolean',\n\t      name: 'prefer_local'\n\t    },\n\t    format: {\n\t      type: 'enum',\n\t      'default': 'detailed',\n\t      options: [\n\t        'detailed',\n\t        'text'\n\t      ]\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_analyze',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_analyze'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.clearCache](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-clearcache.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Clear request cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n\t */\n\tapi.indices.prototype.clearCache = ca({\n\t  params: {\n\t    fieldData: {\n\t      type: 'boolean',\n\t      name: 'field_data'\n\t    },\n\t    fielddata: {\n\t      type: 'boolean'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    query: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    index: {\n\t      type: 'list'\n\t    },\n\t    recycler: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    request: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_cache/clear',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cache/clear'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.close](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n\t */\n\tapi.indices.prototype.close = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_close',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.create](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-create-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for before the operation returns.\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t */\n\tapi.indices.prototype.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    updateAllTypes: {\n\t      type: 'boolean',\n\t      name: 'update_all_types'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.delete](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-delete-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n\t */\n\tapi.indices.prototype['delete'] = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n\t */\n\tapi.indices.prototype.deleteAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.deleteTemplate = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.exists](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t */\n\tapi.indices.prototype.exists = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.existsAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.existsTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsType](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-types-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n\t */\n\tapi.indices.prototype.existsType = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_mapping/<%=type%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      type: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.flush](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flush = ca({\n\t  params: {\n\t    force: {\n\t      type: 'boolean'\n\t    },\n\t    waitIfOngoing: {\n\t      type: 'boolean',\n\t      name: 'wait_if_ongoing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.flushSynced](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-synced-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flushSynced = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush/synced',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush/synced'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.forcemerge](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-forcemerge.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.forcemerge = ca({\n\t  params: {\n\t    flush: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    maxNumSegments: {\n\t      type: 'number',\n\t      name: 'max_num_segments'\n\t    },\n\t    onlyExpungeDeletes: {\n\t      type: 'boolean',\n\t      name: 'only_expunge_deletes'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    waitForMerge: {\n\t      type: 'boolean',\n\t      name: 'wait_for_merge'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_forcemerge',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_forcemerge'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.get](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-get-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t */\n\tapi.indices.prototype.get = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [indices.getAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.getAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_alias',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getFieldMapping](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-get-field-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n\t */\n\tapi.indices.prototype.getFieldMapping = ca({\n\t  params: {\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      name: 'include_defaults'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/field/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getMapping](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-get-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t */\n\tapi.indices.prototype.getMapping = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-get-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n\t */\n\tapi.indices.prototype.getSettings = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': [\n\t        'open',\n\t        'closed'\n\t      ],\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.getTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_template/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_template'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getUpgrade](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.getUpgrade = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.open](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n\t */\n\tapi.indices.prototype.open = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'closed',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_open',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.putAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n\t */\n\tapi.indices.prototype.putAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putMapping](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-put-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n\t */\n\tapi.indices.prototype.putMapping = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    updateAllTypes: {\n\t      type: 'boolean',\n\t      name: 'update_all_types'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preserveExisting - Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.putSettings = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    preserveExisting: {\n\t      type: 'boolean',\n\t      name: 'preserve_existing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.putTemplate = ca({\n\t  params: {\n\t    order: {\n\t      type: 'number'\n\t    },\n\t    create: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.recovery = ca({\n\t  params: {\n\t    detailed: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    activeOnly: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'active_only'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_recovery',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.refresh](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-refresh.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.refresh = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_refresh',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_refresh'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.rollover](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-rollover-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the newly created rollover index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.alias - The name of the alias to rollover\n\t * @param {<<api-param-type-string,`String`>>} params.newIndex - The name of the rollover index\n\t */\n\tapi.indices.prototype.rollover = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=alias%>/_rollover/<%=newIndex%>',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        },\n\t        newIndex: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=alias%>/_rollover',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.segments](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.segments = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_segments',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shardStores](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-shards-stores.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.shardStores = ca({\n\t  params: {\n\t    status: {\n\t      type: 'list',\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red',\n\t        'all'\n\t      ]\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_shard_stores',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_shard_stores'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shrink](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-shrink-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to shrink\n\t * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to shrink into\n\t */\n\tapi.indices.prototype.shrink = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_shrink/<%=target%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      target: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.stats](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n\t */\n\tapi.indices.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'list'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'indices',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_stats/<%=metric%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_stats',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.updateAliases](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.indices.prototype.updateAliases = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_aliases'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.upgrade](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.upgrade = ca({\n\t  params: {\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    onlyAncientSegments: {\n\t      type: 'boolean',\n\t      name: 'only_ancient_segments'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.validateQuery](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/search-validate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allShards - Execute validation on all shards instead of one random shard per index\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n\t */\n\tapi.indices.prototype.validateQuery = ca({\n\t  params: {\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    rewrite: {\n\t      type: 'boolean'\n\t    },\n\t    allShards: {\n\t      type: 'boolean',\n\t      name: 'all_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_validate/query'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [info](http://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.info = ca({\n\t  url: {\n\t    fmt: '/'\n\t  }\n\t});\n\n\tapi.ingest = namespace();\n\n\t/**\n\t * Perform a [ingest.deletePipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/6.0/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.deletePipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [ingest.getPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/6.0/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.id - Comma separated list of pipeline ids. Wildcards supported\n\t */\n\tapi.ingest.prototype.getPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [ingest.processorGrok](https://www.elastic.co/guide/en/elasticsearch/plugins/6.0/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.ingest.prototype.processorGrok = ca({\n\t  url: {\n\t    fmt: '/_ingest/processor/grok'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [ingest.putPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/6.0/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.putPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [ingest.simulate](https://www.elastic.co/guide/en/elasticsearch/plugins/6.0/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Verbose mode. Display data output for each processor in executed pipeline\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.simulate = ca({\n\t  params: {\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>/_simulate',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline/_simulate'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mget](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-multi-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.mget = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mget'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearch](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/search-multi-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-number,`Number`>>} [params.preFilterShardSize=128] - A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it's rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearch = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    preFilterShardSize: {\n\t      type: 'number',\n\t      'default': 128,\n\t      name: 'pre_filter_shard_size'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/search-multi-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearchTemplate = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch/template'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mtermvectors](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-multi-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t */\n\tapi.mtermvectors = ca({\n\t  params: {\n\t    ids: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mtermvectors'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\tapi.nodes = namespace();\n\n\t/**\n\t * Perform a [nodes.hotThreads](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cluster-nodes-hot-threads.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n\t * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n\t * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.hotThreads = ca({\n\t  params: {\n\t    interval: {\n\t      type: 'time'\n\t    },\n\t    snapshots: {\n\t      type: 'number'\n\t    },\n\t    threads: {\n\t      type: 'number'\n\t    },\n\t    ignoreIdleThreads: {\n\t      type: 'boolean',\n\t      name: 'ignore_idle_threads'\n\t    },\n\t    type: {\n\t      type: 'enum',\n\t      options: [\n\t        'cpu',\n\t        'wait',\n\t        'block'\n\t      ]\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/hotthreads'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.info](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cluster-nodes-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n\t */\n\tapi.nodes.prototype.info = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.stats](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cluster-nodes-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at index, node or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'boolean'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'node',\n\t      options: [\n\t        'indices',\n\t        'node',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.usage](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/cluster-nodes-usage.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.usage = ca({\n\t  params: {\n\t    human: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/usage/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'rest_actions'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/usage',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/usage/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'rest_actions'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/usage'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [ping](http://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.ping = ca({\n\t  url: {\n\t    fmt: '/'\n\t  },\n\t  requestTimeout: 3000,\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [putScript](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.context - Script context\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.putScript = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    context: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_scripts/<%=id%>/<%=context%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        },\n\t        context: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_scripts/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [reindex](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the reindex is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t */\n\tapi.reindex = ca({\n\t  params: {\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [reindexRethrottle](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - The task id to rethrottle\n\t */\n\tapi.reindexRethrottle = ca({\n\t  params: {\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      required: true,\n\t      name: 'requests_per_second'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex/<%=taskId%>/_rethrottle',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [renderSearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n\t */\n\tapi.renderSearchTemplate = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_render/template/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_render/template'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [scroll](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n\t */\n\tapi.scroll = ca({\n\t  params: {\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    scrollId: {\n\t      type: 'string',\n\t      name: 'scroll_id'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [search](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/search-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.docvalueFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n\t * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n\t * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n\t * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.trackTotalHits - Indicate if the number of documents that match the query should be tracked\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-number,`Number`>>} [params.batchedReduceSize=512] - The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.\n\t * @param {<<api-param-type-number,`Number`>>} [params.maxConcurrentShardRequests=The default grows with the number of nodes in the cluster but is at most 256.] - The number of concurrent shard requests this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests\n\t * @param {<<api-param-type-number,`Number`>>} [params.preFilterShardSize=128] - A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it's rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.search = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    docvalueFields: {\n\t      type: 'list',\n\t      name: 'docvalue_fields'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    suggestField: {\n\t      type: 'string',\n\t      name: 'suggest_field'\n\t    },\n\t    suggestMode: {\n\t      type: 'enum',\n\t      'default': 'missing',\n\t      options: [\n\t        'missing',\n\t        'popular',\n\t        'always'\n\t      ],\n\t      name: 'suggest_mode'\n\t    },\n\t    suggestSize: {\n\t      type: 'number',\n\t      name: 'suggest_size'\n\t    },\n\t    suggestText: {\n\t      type: 'string',\n\t      name: 'suggest_text'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    trackScores: {\n\t      type: 'boolean',\n\t      name: 'track_scores'\n\t    },\n\t    trackTotalHits: {\n\t      type: 'boolean',\n\t      name: 'track_total_hits'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    batchedReduceSize: {\n\t      type: 'number',\n\t      'default': 512,\n\t      name: 'batched_reduce_size'\n\t    },\n\t    maxConcurrentShardRequests: {\n\t      type: 'number',\n\t      'default': 'The default grows with the number of nodes in the cluster but is at most 256.',\n\t      name: 'max_concurrent_shard_requests'\n\t    },\n\t    preFilterShardSize: {\n\t      type: 'number',\n\t      'default': 128,\n\t      name: 'pre_filter_shard_size'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchShards](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/search-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.searchShards = ca({\n\t  params: {\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_search_shards',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search_shards'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.profile - Specify whether to profile the query execution\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.searchTemplate = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    profile: {\n\t      type: 'boolean'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/template'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\tapi.snapshot = namespace();\n\n\t/**\n\t * Perform a [snapshot.create](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.create = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.createRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.createRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    verify: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.delete](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype['delete'] = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.deleteRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.deleteRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.get](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Whether to show verbose snapshot info or only show the basic info found in the repository index blob\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.get = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    verbose: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [snapshot.getRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.getRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.restore](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.restore = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.status](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.status = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        },\n\t        snapshot: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/_status'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.verifyRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.verifyRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/_verify',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\tapi.tasks = namespace();\n\n\t/**\n\t * Perform a [tasks.cancel](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodes - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Cancel tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTaskId - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Cancel the task with specified task id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.cancel = ca({\n\t  params: {\n\t    nodes: {\n\t      type: 'list'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTaskId: {\n\t      type: 'string',\n\t      name: 'parent_task_id'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_tasks/<%=taskId%>/_cancel',\n\t      req: {\n\t        taskId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_tasks/_cancel'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [tasks.get](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Return the task with specified id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.get = ca({\n\t  params: {\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks/<%=taskId%>',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [tasks.list](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodes - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTaskId - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.groupBy=nodes] - Group tasks by nodes or parent/child relationships\n\t */\n\tapi.tasks.prototype.list = ca({\n\t  params: {\n\t    nodes: {\n\t      type: 'list'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTaskId: {\n\t      type: 'string',\n\t      name: 'parent_task_id'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    groupBy: {\n\t      type: 'enum',\n\t      'default': 'nodes',\n\t      options: [\n\t        'nodes',\n\t        'parents'\n\t      ],\n\t      name: 'group_by'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [termvectors](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n\t */\n\tapi.termvectors = ca({\n\t  params: {\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [update](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-update.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: painless)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.update = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    lang: {\n\t      type: 'string'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    retryOnConflict: {\n\t      type: 'number',\n\t      name: 'retry_on_conflict'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [updateByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-update-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the update by query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - Ingest pipeline to set on index requests made by this action. (default: none)\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.versionType - Should the document increment the version number (internal) on hit or not (reindex)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the update by query operation is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.updateByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    versionType: {\n\t      type: 'boolean',\n\t      name: 'version_type'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar ca = __webpack_require__(46).makeFactoryWithModifier(function (spec) {\n\t  return __webpack_require__(4).merge(spec, {\n\t    params: {\n\t      filterPath: {\n\t        type: 'list',\n\t        name: 'filter_path'\n\t      }\n\t    }\n\t  });\n\t});\n\tvar namespace = __webpack_require__(46).namespaceFactory;\n\tvar api = module.exports = {};\n\n\tapi._namespaces = ['cat', 'cluster', 'indices', 'ingest', 'nodes', 'snapshot', 'tasks'];\n\n\t/**\n\t * Perform a [bulk](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-bulk.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - Default list of fields to exclude from the returned _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - Default list of fields to extract and return from the _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n\t */\n\tapi.bulk = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    type: {\n\t      type: 'string'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_bulk'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.cat = namespace();\n\n\t/**\n\t * Perform a [cat.aliases](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.cat.prototype.aliases = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/aliases/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/aliases'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.allocation](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-allocation.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n\t */\n\tapi.cat.prototype.allocation = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/allocation/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/allocation'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.count](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.count = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/count/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/count'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.fielddata](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-fielddata.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n\t */\n\tapi.cat.prototype.fielddata = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/fielddata/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/fielddata'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.health](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.health = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    ts: {\n\t      type: 'boolean',\n\t      'default': true\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/health'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.help](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t */\n\tapi.cat.prototype.help = ca({\n\t  params: {\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.indices](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-indices.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-string,`String`>>} params.health - A health status (\"green\", \"yellow\", or \"red\" to filter only indices matching the specified health status\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.indices = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'm',\n\t        'g'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    health: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ]\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    pri: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/indices/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/indices'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.master](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-master.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.master = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/master'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodeattrs](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-nodeattrs.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodeattrs = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodeattrs'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodes](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-nodes.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Return the full node ID instead of the shortened version (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodes = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    fullId: {\n\t      type: 'boolean',\n\t      name: 'full_id'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodes'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-pending-tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.pendingTasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.plugins](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-plugins.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.plugins = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/plugins'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.recovery = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/recovery/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.repositories](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-repositories.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.repositories = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/repositories'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.segments](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.segments = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/segments/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.shards](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.shards = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/shards/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/shards'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.snapshots](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Set to true to ignore unavailable snapshots\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n\t */\n\tapi.cat.prototype.snapshots = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'ignore_unavailable'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/snapshots/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/snapshots'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.tasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-number,`Number`>>} params.parentTask - Return tasks with specified parent task id. Set to -1 to return all.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.tasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    nodeId: {\n\t      type: 'list',\n\t      name: 'node_id'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTask: {\n\t      type: 'number',\n\t      name: 'parent_task'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.templates](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>} params.name - A pattern that returned template names must match\n\t */\n\tapi.cat.prototype.templates = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/templates/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/templates'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.threadPool](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cat-thread-pool.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.size - The multiplier in which to display values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.threadPoolPatterns - A comma-separated list of regular-expressions to filter the thread pools in the output\n\t */\n\tapi.cat.prototype.threadPool = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    size: {\n\t      type: 'enum',\n\t      options: [\n\t        '',\n\t        'k',\n\t        'm',\n\t        'g',\n\t        't',\n\t        'p'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/thread_pool/<%=threadPoolPatterns%>',\n\t      req: {\n\t        threadPoolPatterns: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/thread_pool'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [clearScroll](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n\t */\n\tapi.clearScroll = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\tapi.cluster = namespace();\n\n\t/**\n\t * Perform a [cluster.allocationExplain](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-allocation-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeYesDecisions - Return 'YES' decisions in explanation (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDiskInfo - Return information about disk usage and shard sizes (default: false)\n\t */\n\tapi.cluster.prototype.allocationExplain = ca({\n\t  params: {\n\t    includeYesDecisions: {\n\t      type: 'boolean',\n\t      name: 'include_yes_decisions'\n\t    },\n\t    includeDiskInfo: {\n\t      type: 'boolean',\n\t      name: 'include_disk_info'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/allocation/explain'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default clusters setting.\n\t */\n\tapi.cluster.prototype.getSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.health](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n\t * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n\t * @param {<<api-param-type-string,`String`>>} params.waitForEvents - Wait until all currently queued events with the given priority are processed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForNoRelocatingShards - Whether to wait until there are no relocating shards in the cluster\n\t * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n\t */\n\tapi.cluster.prototype.health = ca({\n\t  params: {\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'cluster',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForNodes: {\n\t      type: 'string',\n\t      name: 'wait_for_nodes'\n\t    },\n\t    waitForEvents: {\n\t      type: 'enum',\n\t      options: [\n\t        'immediate',\n\t        'urgent',\n\t        'high',\n\t        'normal',\n\t        'low',\n\t        'languid'\n\t      ],\n\t      name: 'wait_for_events'\n\t    },\n\t    waitForNoRelocatingShards: {\n\t      type: 'boolean',\n\t      name: 'wait_for_no_relocating_shards'\n\t    },\n\t    waitForStatus: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ],\n\t      name: 'wait_for_status'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/health/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/health'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-pending.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.cluster.prototype.pendingTasks = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.putSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [cluster.remoteInfo](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-remote-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.cluster.prototype.remoteInfo = ca({\n\t  url: {\n\t    fmt: '/_remote/info'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.reroute](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-reroute.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.retryFailed - Retries allocation of shards that are blocked due to too many subsequent allocation failures\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.reroute = ca({\n\t  params: {\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    retryFailed: {\n\t      type: 'boolean',\n\t      name: 'retry_failed'\n\t    },\n\t    metric: {\n\t      type: 'list',\n\t      options: [\n\t        '_all',\n\t        'blocks',\n\t        'metadata',\n\t        'nodes',\n\t        'routing_table',\n\t        'master_node',\n\t        'version'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/reroute'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.state](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-state.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t */\n\tapi.cluster.prototype.state = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        },\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.cluster.prototype.stats = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [count](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum count for each shard, upon reaching which the query execution will terminate early\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n\t */\n\tapi.count = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    minScore: {\n\t      type: 'number',\n\t      name: 'min_score'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_count'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [countPercolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-percolate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n\t * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n\t */\n\tapi.countPercolate = ca({\n\t  params: {\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    percolateIndex: {\n\t      type: 'string',\n\t      name: 'percolate_index'\n\t    },\n\t    percolateType: {\n\t      type: 'string',\n\t      name: 'percolate_type'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [create](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    timestamp: {\n\t      type: 'time'\n\t    },\n\t    ttl: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_create',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-delete.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi['delete'] = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [deleteByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-delete-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the delete-by-query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the delete-by-query is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle for this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.deleteByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [deleteScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n\t */\n\tapi.deleteScript = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_scripts/<%=lang%>/<%=id%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_scripts/<%=lang%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n\t */\n\tapi.deleteTemplate = ca({\n\t  url: {\n\t    fmt: '/_search/template/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [exists](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.exists = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [existsSource](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.existsSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [explain](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.explain = ca({\n\t  params: {\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [fieldCaps](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-field-caps.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of field names\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.fieldCaps = ca({\n\t  params: {\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_field_caps',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_field_caps'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [fieldStats](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-field-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)\n\t * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.fieldStats = ca({\n\t  params: {\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'cluster',\n\t      options: [\n\t        'indices',\n\t        'cluster'\n\t      ]\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_field_stats',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_field_stats'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [get](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.get = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n\t */\n\tapi.getScript = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_scripts/<%=lang%>/<%=id%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_scripts/<%=lang%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [getSource](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.getSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n\t */\n\tapi.getTemplate = ca({\n\t  url: {\n\t    fmt: '/_search/template/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [index](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.index = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    opType: {\n\t      type: 'enum',\n\t      'default': 'index',\n\t      options: [\n\t        'index',\n\t        'create'\n\t      ],\n\t      name: 'op_type'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    timestamp: {\n\t      type: 'time'\n\t    },\n\t    ttl: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.indices = namespace();\n\n\t/**\n\t * Perform a [indices.analyze](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-analyze.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilter - A comma-separated list of character filters to use for the analysis\n\t * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filter - A comma-separated list of filters to use for the analysis\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n\t * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - With `true`, outputs more advanced details. (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.attributes - A comma-separated list of token attributes to output, this parameter works only with `explain=true`\n\t * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n\t */\n\tapi.indices.prototype.analyze = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    charFilter: {\n\t      type: 'list',\n\t      name: 'char_filter'\n\t    },\n\t    field: {\n\t      type: 'string'\n\t    },\n\t    filter: {\n\t      type: 'list'\n\t    },\n\t    index: {\n\t      type: 'string'\n\t    },\n\t    preferLocal: {\n\t      type: 'boolean',\n\t      name: 'prefer_local'\n\t    },\n\t    text: {\n\t      type: 'list'\n\t    },\n\t    tokenizer: {\n\t      type: 'string'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    attributes: {\n\t      type: 'list'\n\t    },\n\t    format: {\n\t      type: 'enum',\n\t      'default': 'detailed',\n\t      options: [\n\t        'detailed',\n\t        'text'\n\t      ]\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_analyze',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_analyze'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.clearCache](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-clearcache.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Clear request cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n\t */\n\tapi.indices.prototype.clearCache = ca({\n\t  params: {\n\t    fieldData: {\n\t      type: 'boolean',\n\t      name: 'field_data'\n\t    },\n\t    fielddata: {\n\t      type: 'boolean'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    query: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    index: {\n\t      type: 'list'\n\t    },\n\t    recycler: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    request: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_cache/clear',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cache/clear'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.close](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n\t */\n\tapi.indices.prototype.close = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_close',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.create](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-create-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for before the operation returns.\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t */\n\tapi.indices.prototype.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    updateAllTypes: {\n\t      type: 'boolean',\n\t      name: 'update_all_types'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-delete-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n\t */\n\tapi.indices.prototype['delete'] = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n\t */\n\tapi.indices.prototype.deleteAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.deleteTemplate = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.exists](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t */\n\tapi.indices.prototype.exists = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.existsAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.existsTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsType](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-types-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n\t */\n\tapi.indices.prototype.existsType = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_mapping/<%=type%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      type: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.flush](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flush = ca({\n\t  params: {\n\t    force: {\n\t      type: 'boolean'\n\t    },\n\t    waitIfOngoing: {\n\t      type: 'boolean',\n\t      name: 'wait_if_ongoing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.flushSynced](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-synced-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flushSynced = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush/synced',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush/synced'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.forcemerge](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-forcemerge.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.forcemerge = ca({\n\t  params: {\n\t    flush: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    maxNumSegments: {\n\t      type: 'number',\n\t      name: 'max_num_segments'\n\t    },\n\t    onlyExpungeDeletes: {\n\t      type: 'boolean',\n\t      name: 'only_expunge_deletes'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    waitForMerge: {\n\t      type: 'boolean',\n\t      name: 'wait_for_merge'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_forcemerge',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_forcemerge'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-get-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n\t */\n\tapi.indices.prototype.get = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=feature%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        feature: {\n\t          type: 'list',\n\t          options: [\n\t            '_settings',\n\t            '_mappings',\n\t            '_aliases'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.getAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_alias',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getFieldMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-get-field-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n\t */\n\tapi.indices.prototype.getFieldMapping = ca({\n\t  params: {\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      name: 'include_defaults'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/field/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-get-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t */\n\tapi.indices.prototype.getMapping = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-get-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n\t */\n\tapi.indices.prototype.getSettings = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': [\n\t        'open',\n\t        'closed'\n\t      ],\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.getTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_template/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_template'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getUpgrade](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.getUpgrade = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.open](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n\t */\n\tapi.indices.prototype.open = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'closed',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_open',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.putAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n\t */\n\tapi.indices.prototype.putAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-put-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n\t */\n\tapi.indices.prototype.putMapping = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    updateAllTypes: {\n\t      type: 'boolean',\n\t      name: 'update_all_types'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preserveExisting - Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.putSettings = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    preserveExisting: {\n\t      type: 'boolean',\n\t      name: 'preserve_existing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.putTemplate = ca({\n\t  params: {\n\t    order: {\n\t      type: 'number'\n\t    },\n\t    create: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.recovery = ca({\n\t  params: {\n\t    detailed: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    activeOnly: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'active_only'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_recovery',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.refresh](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-refresh.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.refresh = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_refresh',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_refresh'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.rollover](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-rollover-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the newly created rollover index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.alias - The name of the alias to rollover\n\t * @param {<<api-param-type-string,`String`>>} params.newIndex - The name of the rollover index\n\t */\n\tapi.indices.prototype.rollover = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=alias%>/_rollover/<%=newIndex%>',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        },\n\t        newIndex: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=alias%>/_rollover',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.segments](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.segments = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_segments',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shardStores](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-shards-stores.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.shardStores = ca({\n\t  params: {\n\t    status: {\n\t      type: 'list',\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red',\n\t        'all'\n\t      ]\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_shard_stores',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_shard_stores'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shrink](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-shrink-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to shrink\n\t * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to shrink into\n\t */\n\tapi.indices.prototype.shrink = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_shrink/<%=target%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      target: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n\t */\n\tapi.indices.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'list'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'indices',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_stats/<%=metric%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'percolate',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'percolate',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_stats',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.updateAliases](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.indices.prototype.updateAliases = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_aliases'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.upgrade](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.upgrade = ca({\n\t  params: {\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    onlyAncientSegments: {\n\t      type: 'boolean',\n\t      name: 'only_ancient_segments'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.validateQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-validate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allShards - Execute validation on all shards instead of one random shard per index\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n\t */\n\tapi.indices.prototype.validateQuery = ca({\n\t  params: {\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    rewrite: {\n\t      type: 'boolean'\n\t    },\n\t    allShards: {\n\t      type: 'boolean',\n\t      name: 'all_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_validate/query'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [info](https://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.info = ca({\n\t  url: {\n\t    fmt: '/'\n\t  }\n\t});\n\n\tapi.ingest = namespace();\n\n\t/**\n\t * Perform a [ingest.deletePipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.6/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.deletePipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [ingest.getPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.6/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.id - Comma separated list of pipeline ids. Wildcards supported\n\t */\n\tapi.ingest.prototype.getPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [ingest.processorGrok](https://www.elastic.co/guide/en/elasticsearch/plugins/5.6/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.ingest.prototype.processorGrok = ca({\n\t  url: {\n\t    fmt: '/_ingest/processor/grok'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [ingest.putPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.6/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.putPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [ingest.simulate](https://www.elastic.co/guide/en/elasticsearch/plugins/5.6/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Verbose mode. Display data output for each processor in executed pipeline\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.simulate = ca({\n\t  params: {\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>/_simulate',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline/_simulate'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mget](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-multi-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.mget = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mget'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mpercolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-percolate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n\t */\n\tapi.mpercolate = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mpercolate',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mpercolate'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearch](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-multi-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-number,`Number`>>} [params.preFilterShardSize=128] - A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it's rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearch = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    preFilterShardSize: {\n\t      type: 'number',\n\t      'default': 128,\n\t      name: 'pre_filter_shard_size'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearchTemplate = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch/template'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mtermvectors](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-multi-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t */\n\tapi.mtermvectors = ca({\n\t  params: {\n\t    ids: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mtermvectors'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\tapi.nodes = namespace();\n\n\t/**\n\t * Perform a [nodes.hotThreads](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-nodes-hot-threads.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n\t * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n\t * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.hotThreads = ca({\n\t  params: {\n\t    interval: {\n\t      type: 'time'\n\t    },\n\t    snapshots: {\n\t      type: 'number'\n\t    },\n\t    threads: {\n\t      type: 'number'\n\t    },\n\t    ignoreIdleThreads: {\n\t      type: 'boolean',\n\t      name: 'ignore_idle_threads'\n\t    },\n\t    type: {\n\t      type: 'enum',\n\t      options: [\n\t        'cpu',\n\t        'wait',\n\t        'block'\n\t      ]\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/hotthreads'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.info](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-nodes-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n\t */\n\tapi.nodes.prototype.info = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-nodes-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at index, node or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'boolean'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'node',\n\t      options: [\n\t        'indices',\n\t        'node',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'percolate',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'percolate',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [percolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-percolate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n\t * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n\t * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n\t */\n\tapi.percolate = ca({\n\t  params: {\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    percolateIndex: {\n\t      type: 'string',\n\t      name: 'percolate_index'\n\t    },\n\t    percolateType: {\n\t      type: 'string',\n\t      name: 'percolate_type'\n\t    },\n\t    percolateRouting: {\n\t      type: 'string',\n\t      name: 'percolate_routing'\n\t    },\n\t    percolatePreference: {\n\t      type: 'string',\n\t      name: 'percolate_preference'\n\t    },\n\t    percolateFormat: {\n\t      type: 'enum',\n\t      options: [\n\t        'ids'\n\t      ],\n\t      name: 'percolate_format'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_percolate',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [ping](https://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.ping = ca({\n\t  url: {\n\t    fmt: '/'\n\t  },\n\t  requestTimeout: 3000,\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [putScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n\t */\n\tapi.putScript = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_scripts/<%=lang%>/<%=id%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_scripts/<%=lang%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n\t */\n\tapi.putTemplate = ca({\n\t  url: {\n\t    fmt: '/_search/template/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [reindex](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the reindex is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t */\n\tapi.reindex = ca({\n\t  params: {\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [reindexRethrottle](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - The task id to rethrottle\n\t */\n\tapi.reindexRethrottle = ca({\n\t  params: {\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      required: true,\n\t      name: 'requests_per_second'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex/<%=taskId%>/_rethrottle',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [renderSearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n\t */\n\tapi.renderSearchTemplate = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_render/template/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_render/template'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [scroll](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n\t */\n\tapi.scroll = ca({\n\t  params: {\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    scrollId: {\n\t      type: 'string',\n\t      name: 'scroll_id'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [search](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.docvalueFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n\t * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n\t * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n\t * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-number,`Number`>>} [params.batchedReduceSize=512] - The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.\n\t * @param {<<api-param-type-number,`Number`>>} [params.maxConcurrentShardRequests=The default grows with the number of nodes in the cluster but is at most 256.] - The number of concurrent shard requests this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests\n\t * @param {<<api-param-type-number,`Number`>>} [params.preFilterShardSize=128] - A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it's rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.search = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    docvalueFields: {\n\t      type: 'list',\n\t      name: 'docvalue_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    suggestField: {\n\t      type: 'string',\n\t      name: 'suggest_field'\n\t    },\n\t    suggestMode: {\n\t      type: 'enum',\n\t      'default': 'missing',\n\t      options: [\n\t        'missing',\n\t        'popular',\n\t        'always'\n\t      ],\n\t      name: 'suggest_mode'\n\t    },\n\t    suggestSize: {\n\t      type: 'number',\n\t      name: 'suggest_size'\n\t    },\n\t    suggestText: {\n\t      type: 'string',\n\t      name: 'suggest_text'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    trackScores: {\n\t      type: 'boolean',\n\t      name: 'track_scores'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    batchedReduceSize: {\n\t      type: 'number',\n\t      'default': 512,\n\t      name: 'batched_reduce_size'\n\t    },\n\t    maxConcurrentShardRequests: {\n\t      type: 'number',\n\t      'default': 'The default grows with the number of nodes in the cluster but is at most 256.',\n\t      name: 'max_concurrent_shard_requests'\n\t    },\n\t    preFilterShardSize: {\n\t      type: 'number',\n\t      'default': 128,\n\t      name: 'pre_filter_shard_size'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchShards](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.searchShards = ca({\n\t  params: {\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search_shards',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search_shards',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search_shards'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.profile - Specify whether to profile the query execution\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.searchTemplate = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    profile: {\n\t      type: 'boolean'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/template'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\tapi.snapshot = namespace();\n\n\t/**\n\t * Perform a [snapshot.create](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.create = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.createRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.createRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    verify: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype['delete'] = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.deleteRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.deleteRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Whether to show verbose snapshot info or only show the basic info found in the repository index blob\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.get = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    verbose: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [snapshot.getRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.getRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.restore](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.restore = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.status](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.status = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        },\n\t        snapshot: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/_status'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.verifyRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.verifyRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/_verify',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [suggest](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-suggesters.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.suggest = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_suggest',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_suggest'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.tasks = namespace();\n\n\t/**\n\t * Perform a [tasks.cancel](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodes - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Cancel tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTaskId - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Cancel the task with specified task id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.cancel = ca({\n\t  params: {\n\t    nodes: {\n\t      type: 'list'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTaskId: {\n\t      type: 'string',\n\t      name: 'parent_task_id'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_tasks/<%=taskId%>/_cancel',\n\t      req: {\n\t        taskId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_tasks/_cancel'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [tasks.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Return the task with specified id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.get = ca({\n\t  params: {\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks/<%=taskId%>',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [tasks.list](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodes - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTaskId - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.groupBy=nodes] - Group tasks by nodes or parent/child relationships\n\t */\n\tapi.tasks.prototype.list = ca({\n\t  params: {\n\t    nodes: {\n\t      type: 'list'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTaskId: {\n\t      type: 'string',\n\t      name: 'parent_task_id'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    groupBy: {\n\t      type: 'enum',\n\t      'default': 'nodes',\n\t      options: [\n\t        'nodes',\n\t        'parents'\n\t      ],\n\t      name: 'group_by'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [termvectors](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n\t */\n\tapi.termvectors = ca({\n\t  params: {\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [update](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-update.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: painless)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.update = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    lang: {\n\t      type: 'string'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    retryOnConflict: {\n\t      type: 'number',\n\t      name: 'retry_on_conflict'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    timestamp: {\n\t      type: 'time'\n\t    },\n\t    ttl: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [updateByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-update-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the update by query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - Ingest pipeline to set on index requests made by this action. (default: none)\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.versionType - Should the document increment the version number (internal) on hit or not (reindex)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the update by query operation is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.updateByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    versionType: {\n\t      type: 'boolean',\n\t      name: 'version_type'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar ca = __webpack_require__(46).makeFactoryWithModifier(function (spec) {\n\t  return __webpack_require__(4).merge(spec, {\n\t    params: {\n\t      filterPath: {\n\t        type: 'list',\n\t        name: 'filter_path'\n\t      }\n\t    }\n\t  });\n\t});\n\tvar namespace = __webpack_require__(46).namespaceFactory;\n\tvar api = module.exports = {};\n\n\tapi._namespaces = ['cat', 'cluster', 'indices', 'ingest', 'nodes', 'remote', 'snapshot', 'tasks'];\n\n\t/**\n\t * Perform a [bulk](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-bulk.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - Default list of fields to exclude from the returned _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - Default list of fields to extract and return from the _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n\t */\n\tapi.bulk = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    type: {\n\t      type: 'string'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_bulk'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.cat = namespace();\n\n\t/**\n\t * Perform a [cat.aliases](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.cat.prototype.aliases = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/aliases/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/aliases'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.allocation](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-allocation.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n\t */\n\tapi.cat.prototype.allocation = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/allocation/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/allocation'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.count](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.count = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/count/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/count'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.fielddata](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-fielddata.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n\t */\n\tapi.cat.prototype.fielddata = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/fielddata/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/fielddata'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.health](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.health = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    ts: {\n\t      type: 'boolean',\n\t      'default': true\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/health'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.help](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t */\n\tapi.cat.prototype.help = ca({\n\t  params: {\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.indices](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-indices.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-string,`String`>>} params.health - A health status (\"green\", \"yellow\", or \"red\" to filter only indices matching the specified health status\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.indices = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'm',\n\t        'g'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    health: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ]\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    pri: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/indices/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/indices'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.master](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-master.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.master = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/master'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodeattrs](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-nodeattrs.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodeattrs = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodeattrs'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodes](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-nodes.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Return the full node ID instead of the shortened version (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodes = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    fullId: {\n\t      type: 'boolean',\n\t      name: 'full_id'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodes'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-pending-tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.pendingTasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.plugins](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-plugins.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.plugins = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/plugins'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.recovery = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/recovery/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.repositories](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-repositories.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.repositories = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/repositories'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.segments](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.segments = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/segments/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.shards](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.shards = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/shards/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/shards'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.snapshots](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Set to true to ignore unavailable snapshots\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n\t */\n\tapi.cat.prototype.snapshots = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'ignore_unavailable'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/snapshots/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/snapshots'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.tasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-number,`Number`>>} params.parentTask - Return tasks with specified parent task id. Set to -1 to return all.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.tasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    nodeId: {\n\t      type: 'list',\n\t      name: 'node_id'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTask: {\n\t      type: 'number',\n\t      name: 'parent_task'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.templates](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>} params.name - A pattern that returned template names must match\n\t */\n\tapi.cat.prototype.templates = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/templates/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/templates'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.threadPool](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat-thread-pool.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.size - The multiplier in which to display values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.threadPoolPatterns - A comma-separated list of regular-expressions to filter the thread pools in the output\n\t */\n\tapi.cat.prototype.threadPool = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    size: {\n\t      type: 'enum',\n\t      options: [\n\t        '',\n\t        'k',\n\t        'm',\n\t        'g',\n\t        't',\n\t        'p'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/thread_pool/<%=threadPoolPatterns%>',\n\t      req: {\n\t        threadPoolPatterns: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/thread_pool'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [clearScroll](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n\t */\n\tapi.clearScroll = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\tapi.cluster = namespace();\n\n\t/**\n\t * Perform a [cluster.allocationExplain](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-allocation-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeYesDecisions - Return 'YES' decisions in explanation (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDiskInfo - Return information about disk usage and shard sizes (default: false)\n\t */\n\tapi.cluster.prototype.allocationExplain = ca({\n\t  params: {\n\t    includeYesDecisions: {\n\t      type: 'boolean',\n\t      name: 'include_yes_decisions'\n\t    },\n\t    includeDiskInfo: {\n\t      type: 'boolean',\n\t      name: 'include_disk_info'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/allocation/explain'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default clusters setting.\n\t */\n\tapi.cluster.prototype.getSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.health](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n\t * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n\t * @param {<<api-param-type-string,`String`>>} params.waitForEvents - Wait until all currently queued events with the given priority are processed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForNoRelocatingShards - Whether to wait until there are no relocating shards in the cluster\n\t * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n\t */\n\tapi.cluster.prototype.health = ca({\n\t  params: {\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'cluster',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForNodes: {\n\t      type: 'string',\n\t      name: 'wait_for_nodes'\n\t    },\n\t    waitForEvents: {\n\t      type: 'enum',\n\t      options: [\n\t        'immediate',\n\t        'urgent',\n\t        'high',\n\t        'normal',\n\t        'low',\n\t        'languid'\n\t      ],\n\t      name: 'wait_for_events'\n\t    },\n\t    waitForNoRelocatingShards: {\n\t      type: 'boolean',\n\t      name: 'wait_for_no_relocating_shards'\n\t    },\n\t    waitForStatus: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ],\n\t      name: 'wait_for_status'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/health/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/health'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-pending.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.cluster.prototype.pendingTasks = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.putSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [cluster.reroute](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-reroute.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.retryFailed - Retries allocation of shards that are blocked due to too many subsequent allocation failures\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.reroute = ca({\n\t  params: {\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    retryFailed: {\n\t      type: 'boolean',\n\t      name: 'retry_failed'\n\t    },\n\t    metric: {\n\t      type: 'list',\n\t      options: [\n\t        '_all',\n\t        'blocks',\n\t        'metadata',\n\t        'nodes',\n\t        'routing_table',\n\t        'master_node',\n\t        'version'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/reroute'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.state](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-state.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t */\n\tapi.cluster.prototype.state = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        },\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.cluster.prototype.stats = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [count](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n\t */\n\tapi.count = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    minScore: {\n\t      type: 'number',\n\t      name: 'min_score'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_count'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [countPercolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-percolate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n\t * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n\t */\n\tapi.countPercolate = ca({\n\t  params: {\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    percolateIndex: {\n\t      type: 'string',\n\t      name: 'percolate_index'\n\t    },\n\t    percolateType: {\n\t      type: 'string',\n\t      name: 'percolate_type'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [create](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    timestamp: {\n\t      type: 'time'\n\t    },\n\t    ttl: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_create',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-delete.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi['delete'] = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [deleteByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-delete-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the delete-by-query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the delete-by-query is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle for this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.deleteByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [deleteScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n\t */\n\tapi.deleteScript = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_scripts/<%=lang%>/<%=id%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_scripts/<%=lang%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n\t */\n\tapi.deleteTemplate = ca({\n\t  url: {\n\t    fmt: '/_search/template/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [exists](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.exists = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [existsSource](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.existsSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [explain](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.explain = ca({\n\t  params: {\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [fieldCaps](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-field-caps.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of field names\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.fieldCaps = ca({\n\t  params: {\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_field_caps',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_field_caps'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [fieldStats](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-field-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)\n\t * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.fieldStats = ca({\n\t  params: {\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'cluster',\n\t      options: [\n\t        'indices',\n\t        'cluster'\n\t      ]\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_field_stats',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_field_stats'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [get](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.get = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n\t */\n\tapi.getScript = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_scripts/<%=lang%>/<%=id%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_scripts/<%=lang%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [getSource](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.getSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n\t */\n\tapi.getTemplate = ca({\n\t  url: {\n\t    fmt: '/_search/template/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [index](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.index = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    opType: {\n\t      type: 'enum',\n\t      'default': 'index',\n\t      options: [\n\t        'index',\n\t        'create'\n\t      ],\n\t      name: 'op_type'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    timestamp: {\n\t      type: 'time'\n\t    },\n\t    ttl: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.indices = namespace();\n\n\t/**\n\t * Perform a [indices.analyze](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-analyze.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilter - A comma-separated list of character filters to use for the analysis\n\t * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filter - A comma-separated list of filters to use for the analysis\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n\t * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - With `true`, outputs more advanced details. (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.attributes - A comma-separated list of token attributes to output, this parameter works only with `explain=true`\n\t * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n\t */\n\tapi.indices.prototype.analyze = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    charFilter: {\n\t      type: 'list',\n\t      name: 'char_filter'\n\t    },\n\t    field: {\n\t      type: 'string'\n\t    },\n\t    filter: {\n\t      type: 'list'\n\t    },\n\t    index: {\n\t      type: 'string'\n\t    },\n\t    preferLocal: {\n\t      type: 'boolean',\n\t      name: 'prefer_local'\n\t    },\n\t    text: {\n\t      type: 'list'\n\t    },\n\t    tokenizer: {\n\t      type: 'string'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    attributes: {\n\t      type: 'list'\n\t    },\n\t    format: {\n\t      type: 'enum',\n\t      'default': 'detailed',\n\t      options: [\n\t        'detailed',\n\t        'text'\n\t      ]\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_analyze',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_analyze'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.clearCache](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-clearcache.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Clear request cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n\t */\n\tapi.indices.prototype.clearCache = ca({\n\t  params: {\n\t    fieldData: {\n\t      type: 'boolean',\n\t      name: 'field_data'\n\t    },\n\t    fielddata: {\n\t      type: 'boolean'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    query: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    index: {\n\t      type: 'list'\n\t    },\n\t    recycler: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    request: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_cache/clear',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cache/clear'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.close](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n\t */\n\tapi.indices.prototype.close = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_close',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.create](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-create-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for before the operation returns.\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t */\n\tapi.indices.prototype.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    updateAllTypes: {\n\t      type: 'boolean',\n\t      name: 'update_all_types'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-delete-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n\t */\n\tapi.indices.prototype['delete'] = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n\t */\n\tapi.indices.prototype.deleteAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.deleteTemplate = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.exists](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t */\n\tapi.indices.prototype.exists = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.existsAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.existsTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsType](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-types-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n\t */\n\tapi.indices.prototype.existsType = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_mapping/<%=type%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      type: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.flush](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flush = ca({\n\t  params: {\n\t    force: {\n\t      type: 'boolean'\n\t    },\n\t    waitIfOngoing: {\n\t      type: 'boolean',\n\t      name: 'wait_if_ongoing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.flushSynced](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-synced-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flushSynced = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush/synced',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush/synced'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.forcemerge](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-forcemerge.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.forcemerge = ca({\n\t  params: {\n\t    flush: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    maxNumSegments: {\n\t      type: 'number',\n\t      name: 'max_num_segments'\n\t    },\n\t    onlyExpungeDeletes: {\n\t      type: 'boolean',\n\t      name: 'only_expunge_deletes'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    waitForMerge: {\n\t      type: 'boolean',\n\t      name: 'wait_for_merge'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_forcemerge',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_forcemerge'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-get-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n\t */\n\tapi.indices.prototype.get = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=feature%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        feature: {\n\t          type: 'list',\n\t          options: [\n\t            '_settings',\n\t            '_mappings',\n\t            '_aliases'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.getAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_alias',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getFieldMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-get-field-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n\t */\n\tapi.indices.prototype.getFieldMapping = ca({\n\t  params: {\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      name: 'include_defaults'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/field/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-get-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t */\n\tapi.indices.prototype.getMapping = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-get-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n\t */\n\tapi.indices.prototype.getSettings = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': [\n\t        'open',\n\t        'closed'\n\t      ],\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.getTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_template/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_template'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getUpgrade](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.getUpgrade = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.open](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n\t */\n\tapi.indices.prototype.open = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'closed',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_open',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.putAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n\t */\n\tapi.indices.prototype.putAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-put-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n\t */\n\tapi.indices.prototype.putMapping = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    updateAllTypes: {\n\t      type: 'boolean',\n\t      name: 'update_all_types'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preserveExisting - Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.putSettings = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    preserveExisting: {\n\t      type: 'boolean',\n\t      name: 'preserve_existing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.putTemplate = ca({\n\t  params: {\n\t    order: {\n\t      type: 'number'\n\t    },\n\t    create: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.recovery = ca({\n\t  params: {\n\t    detailed: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    activeOnly: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'active_only'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_recovery',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.refresh](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-refresh.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.refresh = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_refresh',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_refresh'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.rollover](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-rollover-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the newly created rollover index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.alias - The name of the alias to rollover\n\t * @param {<<api-param-type-string,`String`>>} params.newIndex - The name of the rollover index\n\t */\n\tapi.indices.prototype.rollover = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=alias%>/_rollover/<%=newIndex%>',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        },\n\t        newIndex: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=alias%>/_rollover',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.segments](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.segments = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_segments',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shardStores](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-shards-stores.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.shardStores = ca({\n\t  params: {\n\t    status: {\n\t      type: 'list',\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red',\n\t        'all'\n\t      ]\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_shard_stores',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_shard_stores'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shrink](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-shrink-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to shrink\n\t * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to shrink into\n\t */\n\tapi.indices.prototype.shrink = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_shrink/<%=target%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      target: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n\t */\n\tapi.indices.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'list'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'indices',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_stats/<%=metric%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'percolate',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'percolate',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_stats',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.updateAliases](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.indices.prototype.updateAliases = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_aliases'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.upgrade](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.upgrade = ca({\n\t  params: {\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    onlyAncientSegments: {\n\t      type: 'boolean',\n\t      name: 'only_ancient_segments'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.validateQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-validate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allShards - Execute validation on all shards instead of one random shard per index\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n\t */\n\tapi.indices.prototype.validateQuery = ca({\n\t  params: {\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    rewrite: {\n\t      type: 'boolean'\n\t    },\n\t    allShards: {\n\t      type: 'boolean',\n\t      name: 'all_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_validate/query'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [info](https://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.info = ca({\n\t  url: {\n\t    fmt: '/'\n\t  }\n\t});\n\n\tapi.ingest = namespace();\n\n\t/**\n\t * Perform a [ingest.deletePipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.5/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.deletePipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [ingest.getPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.5/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.id - Comma separated list of pipeline ids. Wildcards supported\n\t */\n\tapi.ingest.prototype.getPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [ingest.putPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.5/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.putPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [ingest.simulate](https://www.elastic.co/guide/en/elasticsearch/plugins/5.5/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Verbose mode. Display data output for each processor in executed pipeline\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.simulate = ca({\n\t  params: {\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>/_simulate',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline/_simulate'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mget](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-multi-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.mget = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mget'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mpercolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-percolate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n\t */\n\tapi.mpercolate = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mpercolate',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mpercolate'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearch](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-multi-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearch = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearchTemplate = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch/template'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mtermvectors](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-multi-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t */\n\tapi.mtermvectors = ca({\n\t  params: {\n\t    ids: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mtermvectors'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\tapi.nodes = namespace();\n\n\t/**\n\t * Perform a [nodes.hotThreads](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-nodes-hot-threads.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n\t * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n\t * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.hotThreads = ca({\n\t  params: {\n\t    interval: {\n\t      type: 'time'\n\t    },\n\t    snapshots: {\n\t      type: 'number'\n\t    },\n\t    threads: {\n\t      type: 'number'\n\t    },\n\t    ignoreIdleThreads: {\n\t      type: 'boolean',\n\t      name: 'ignore_idle_threads'\n\t    },\n\t    type: {\n\t      type: 'enum',\n\t      options: [\n\t        'cpu',\n\t        'wait',\n\t        'block'\n\t      ]\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/hotthreads'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.info](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-nodes-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n\t */\n\tapi.nodes.prototype.info = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-nodes-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at index, node or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'boolean'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'node',\n\t      options: [\n\t        'indices',\n\t        'node',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'percolate',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'percolate',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [percolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-percolate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n\t * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n\t * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n\t */\n\tapi.percolate = ca({\n\t  params: {\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    percolateIndex: {\n\t      type: 'string',\n\t      name: 'percolate_index'\n\t    },\n\t    percolateType: {\n\t      type: 'string',\n\t      name: 'percolate_type'\n\t    },\n\t    percolateRouting: {\n\t      type: 'string',\n\t      name: 'percolate_routing'\n\t    },\n\t    percolatePreference: {\n\t      type: 'string',\n\t      name: 'percolate_preference'\n\t    },\n\t    percolateFormat: {\n\t      type: 'enum',\n\t      options: [\n\t        'ids'\n\t      ],\n\t      name: 'percolate_format'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_percolate',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [ping](https://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.ping = ca({\n\t  url: {\n\t    fmt: '/'\n\t  },\n\t  requestTimeout: 3000,\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [putScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n\t */\n\tapi.putScript = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_scripts/<%=lang%>/<%=id%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_scripts/<%=lang%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n\t */\n\tapi.putTemplate = ca({\n\t  url: {\n\t    fmt: '/_search/template/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [reindex](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the reindex is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t */\n\tapi.reindex = ca({\n\t  params: {\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [reindexRethrottle](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - The task id to rethrottle\n\t */\n\tapi.reindexRethrottle = ca({\n\t  params: {\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      required: true,\n\t      name: 'requests_per_second'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex/<%=taskId%>/_rethrottle',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\tapi.remote = namespace();\n\n\t/**\n\t * Perform a [remote.info](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-remote-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.remote.prototype.info = ca({\n\t  url: {\n\t    fmt: '/_remote/info'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [renderSearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n\t */\n\tapi.renderSearchTemplate = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_render/template/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_render/template'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [scroll](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n\t */\n\tapi.scroll = ca({\n\t  params: {\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    scrollId: {\n\t      type: 'string',\n\t      name: 'scroll_id'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [search](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.docvalueFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n\t * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n\t * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n\t * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-number,`Number`>>} [params.batchedReduceSize=512] - The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.search = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    docvalueFields: {\n\t      type: 'list',\n\t      name: 'docvalue_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    suggestField: {\n\t      type: 'string',\n\t      name: 'suggest_field'\n\t    },\n\t    suggestMode: {\n\t      type: 'enum',\n\t      'default': 'missing',\n\t      options: [\n\t        'missing',\n\t        'popular',\n\t        'always'\n\t      ],\n\t      name: 'suggest_mode'\n\t    },\n\t    suggestSize: {\n\t      type: 'number',\n\t      name: 'suggest_size'\n\t    },\n\t    suggestText: {\n\t      type: 'string',\n\t      name: 'suggest_text'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    trackScores: {\n\t      type: 'boolean',\n\t      name: 'track_scores'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    batchedReduceSize: {\n\t      type: 'number',\n\t      'default': 512,\n\t      name: 'batched_reduce_size'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchShards](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.searchShards = ca({\n\t  params: {\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search_shards',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search_shards',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search_shards'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.profile - Specify whether to profile the query execution\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.searchTemplate = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    profile: {\n\t      type: 'boolean'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/template'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\tapi.snapshot = namespace();\n\n\t/**\n\t * Perform a [snapshot.create](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.create = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.createRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.createRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    verify: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype['delete'] = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.deleteRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.deleteRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Whether to show verbose snapshot info or only show the basic info found in the repository index blob\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.get = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    verbose: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [snapshot.getRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.getRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.restore](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.restore = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.status](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.status = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        },\n\t        snapshot: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/_status'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.verifyRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.verifyRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/_verify',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [suggest](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-suggesters.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.suggest = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_suggest',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_suggest'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.tasks = namespace();\n\n\t/**\n\t * Perform a [tasks.cancel](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Cancel tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTask - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Cancel the task with specified task id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.cancel = ca({\n\t  params: {\n\t    nodeId: {\n\t      type: 'list',\n\t      name: 'node_id'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTask: {\n\t      type: 'string',\n\t      name: 'parent_task'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_tasks/<%=taskId%>/_cancel',\n\t      req: {\n\t        taskId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_tasks/_cancel'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [tasks.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Return the task with specified id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.get = ca({\n\t  params: {\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks/<%=taskId%>',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [tasks.list](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTask - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.groupBy=nodes] - Group tasks by nodes or parent/child relationships\n\t */\n\tapi.tasks.prototype.list = ca({\n\t  params: {\n\t    nodeId: {\n\t      type: 'list',\n\t      name: 'node_id'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTask: {\n\t      type: 'string',\n\t      name: 'parent_task'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    groupBy: {\n\t      type: 'enum',\n\t      'default': 'nodes',\n\t      options: [\n\t        'nodes',\n\t        'parents'\n\t      ],\n\t      name: 'group_by'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [termvectors](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n\t */\n\tapi.termvectors = ca({\n\t  params: {\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [update](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-update.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: painless)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.update = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    lang: {\n\t      type: 'string'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    retryOnConflict: {\n\t      type: 'number',\n\t      name: 'retry_on_conflict'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    timestamp: {\n\t      type: 'time'\n\t    },\n\t    ttl: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [updateByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-update-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the update by query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - Ingest pipeline to set on index requests made by this action. (default: none)\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.versionType - Should the document increment the version number (internal) on hit or not (reindex)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the update by query operation is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.updateByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    versionType: {\n\t      type: 'boolean',\n\t      name: 'version_type'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar ca = __webpack_require__(46).makeFactoryWithModifier(function (spec) {\n\t  return __webpack_require__(4).merge(spec, {\n\t    params: {\n\t      filterPath: {\n\t        type: 'list',\n\t        name: 'filter_path'\n\t      }\n\t    }\n\t  });\n\t});\n\tvar namespace = __webpack_require__(46).namespaceFactory;\n\tvar api = module.exports = {};\n\n\tapi._namespaces = ['cat', 'cluster', 'indices', 'ingest', 'nodes', 'remote', 'snapshot', 'tasks'];\n\n\t/**\n\t * Perform a [bulk](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-bulk.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - Default list of fields to exclude from the returned _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - Default list of fields to extract and return from the _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n\t */\n\tapi.bulk = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    type: {\n\t      type: 'string'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_bulk'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.cat = namespace();\n\n\t/**\n\t * Perform a [cat.aliases](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.cat.prototype.aliases = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/aliases/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/aliases'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.allocation](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-allocation.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n\t */\n\tapi.cat.prototype.allocation = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/allocation/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/allocation'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.count](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.count = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/count/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/count'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.fielddata](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-fielddata.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n\t */\n\tapi.cat.prototype.fielddata = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/fielddata/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/fielddata'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.health](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.health = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    ts: {\n\t      type: 'boolean',\n\t      'default': true\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/health'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.help](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t */\n\tapi.cat.prototype.help = ca({\n\t  params: {\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.indices](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-indices.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-string,`String`>>} params.health - A health status (\"green\", \"yellow\", or \"red\" to filter only indices matching the specified health status\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.indices = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'm',\n\t        'g'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    health: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ]\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    pri: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/indices/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/indices'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.master](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-master.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.master = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/master'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodeattrs](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-nodeattrs.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodeattrs = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodeattrs'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodes](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-nodes.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Return the full node ID instead of the shortened version (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodes = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    fullId: {\n\t      type: 'boolean',\n\t      name: 'full_id'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodes'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-pending-tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.pendingTasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.plugins](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-plugins.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.plugins = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/plugins'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.recovery = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/recovery/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.repositories](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-repositories.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.repositories = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/repositories'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.segments](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.segments = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/segments/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.shards](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.shards = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/shards/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/shards'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.snapshots](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Set to true to ignore unavailable snapshots\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n\t */\n\tapi.cat.prototype.snapshots = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'ignore_unavailable'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/snapshots/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/snapshots'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.tasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-number,`Number`>>} params.parentTask - Return tasks with specified parent task id. Set to -1 to return all.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.tasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    nodeId: {\n\t      type: 'list',\n\t      name: 'node_id'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTask: {\n\t      type: 'number',\n\t      name: 'parent_task'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.templates](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>} params.name - A pattern that returned template names must match\n\t */\n\tapi.cat.prototype.templates = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/templates/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/templates'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.threadPool](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cat-thread-pool.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.size - The multiplier in which to display values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.threadPoolPatterns - A comma-separated list of regular-expressions to filter the thread pools in the output\n\t */\n\tapi.cat.prototype.threadPool = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    size: {\n\t      type: 'enum',\n\t      options: [\n\t        '',\n\t        'k',\n\t        'm',\n\t        'g',\n\t        't',\n\t        'p'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/thread_pool/<%=threadPoolPatterns%>',\n\t      req: {\n\t        threadPoolPatterns: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/thread_pool'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [clearScroll](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n\t */\n\tapi.clearScroll = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\tapi.cluster = namespace();\n\n\t/**\n\t * Perform a [cluster.allocationExplain](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cluster-allocation-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeYesDecisions - Return 'YES' decisions in explanation (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDiskInfo - Return information about disk usage and shard sizes (default: false)\n\t */\n\tapi.cluster.prototype.allocationExplain = ca({\n\t  params: {\n\t    includeYesDecisions: {\n\t      type: 'boolean',\n\t      name: 'include_yes_decisions'\n\t    },\n\t    includeDiskInfo: {\n\t      type: 'boolean',\n\t      name: 'include_disk_info'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/allocation/explain'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default clusters setting.\n\t */\n\tapi.cluster.prototype.getSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.health](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cluster-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n\t * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n\t * @param {<<api-param-type-string,`String`>>} params.waitForEvents - Wait until all currently queued events with the given priority are processed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForNoRelocatingShards - Whether to wait until there are no relocating shards in the cluster\n\t * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n\t */\n\tapi.cluster.prototype.health = ca({\n\t  params: {\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'cluster',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForNodes: {\n\t      type: 'string',\n\t      name: 'wait_for_nodes'\n\t    },\n\t    waitForEvents: {\n\t      type: 'enum',\n\t      options: [\n\t        'immediate',\n\t        'urgent',\n\t        'high',\n\t        'normal',\n\t        'low',\n\t        'languid'\n\t      ],\n\t      name: 'wait_for_events'\n\t    },\n\t    waitForNoRelocatingShards: {\n\t      type: 'boolean',\n\t      name: 'wait_for_no_relocating_shards'\n\t    },\n\t    waitForStatus: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ],\n\t      name: 'wait_for_status'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/health/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/health'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cluster-pending.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.cluster.prototype.pendingTasks = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.putSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [cluster.reroute](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cluster-reroute.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.retryFailed - Retries allocation of shards that are blocked due to too many subsequent allocation failures\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.reroute = ca({\n\t  params: {\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    retryFailed: {\n\t      type: 'boolean',\n\t      name: 'retry_failed'\n\t    },\n\t    metric: {\n\t      type: 'list',\n\t      options: [\n\t        '_all',\n\t        'blocks',\n\t        'metadata',\n\t        'nodes',\n\t        'routing_table',\n\t        'master_node',\n\t        'version'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/reroute'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.state](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cluster-state.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t */\n\tapi.cluster.prototype.state = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        },\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cluster-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.cluster.prototype.stats = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [count](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n\t */\n\tapi.count = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    minScore: {\n\t      type: 'number',\n\t      name: 'min_score'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_count'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [countPercolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-percolate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n\t * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n\t */\n\tapi.countPercolate = ca({\n\t  params: {\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    percolateIndex: {\n\t      type: 'string',\n\t      name: 'percolate_index'\n\t    },\n\t    percolateType: {\n\t      type: 'string',\n\t      name: 'percolate_type'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [create](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    timestamp: {\n\t      type: 'time'\n\t    },\n\t    ttl: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_create',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-delete.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi['delete'] = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [deleteByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-delete-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the delete-by-query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the delete-by-query is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle for this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.deleteByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [deleteScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n\t */\n\tapi.deleteScript = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_scripts/<%=lang%>/<%=id%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_scripts/<%=lang%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n\t */\n\tapi.deleteTemplate = ca({\n\t  url: {\n\t    fmt: '/_search/template/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [exists](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.exists = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [existsSource](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.existsSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [explain](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.explain = ca({\n\t  params: {\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [fieldCaps](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-field-caps.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of field names\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.fieldCaps = ca({\n\t  params: {\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_field_caps',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_field_caps'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [fieldStats](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-field-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)\n\t * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.fieldStats = ca({\n\t  params: {\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'cluster',\n\t      options: [\n\t        'indices',\n\t        'cluster'\n\t      ]\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_field_stats',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_field_stats'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [get](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.get = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n\t */\n\tapi.getScript = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_scripts/<%=lang%>/<%=id%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_scripts/<%=lang%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [getSource](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.getSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n\t */\n\tapi.getTemplate = ca({\n\t  url: {\n\t    fmt: '/_search/template/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [index](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.index = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    opType: {\n\t      type: 'enum',\n\t      'default': 'index',\n\t      options: [\n\t        'index',\n\t        'create'\n\t      ],\n\t      name: 'op_type'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    timestamp: {\n\t      type: 'time'\n\t    },\n\t    ttl: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.indices = namespace();\n\n\t/**\n\t * Perform a [indices.analyze](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-analyze.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilter - A comma-separated list of character filters to use for the analysis\n\t * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filter - A comma-separated list of filters to use for the analysis\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n\t * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - With `true`, outputs more advanced details. (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.attributes - A comma-separated list of token attributes to output, this parameter works only with `explain=true`\n\t * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n\t */\n\tapi.indices.prototype.analyze = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    charFilter: {\n\t      type: 'list',\n\t      name: 'char_filter'\n\t    },\n\t    field: {\n\t      type: 'string'\n\t    },\n\t    filter: {\n\t      type: 'list'\n\t    },\n\t    index: {\n\t      type: 'string'\n\t    },\n\t    preferLocal: {\n\t      type: 'boolean',\n\t      name: 'prefer_local'\n\t    },\n\t    text: {\n\t      type: 'list'\n\t    },\n\t    tokenizer: {\n\t      type: 'string'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    attributes: {\n\t      type: 'list'\n\t    },\n\t    format: {\n\t      type: 'enum',\n\t      'default': 'detailed',\n\t      options: [\n\t        'detailed',\n\t        'text'\n\t      ]\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_analyze',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_analyze'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.clearCache](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-clearcache.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Clear request cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n\t */\n\tapi.indices.prototype.clearCache = ca({\n\t  params: {\n\t    fieldData: {\n\t      type: 'boolean',\n\t      name: 'field_data'\n\t    },\n\t    fielddata: {\n\t      type: 'boolean'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    query: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    index: {\n\t      type: 'list'\n\t    },\n\t    recycler: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    request: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_cache/clear',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cache/clear'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.close](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n\t */\n\tapi.indices.prototype.close = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_close',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.create](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-create-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for before the operation returns.\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t */\n\tapi.indices.prototype.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    updateAllTypes: {\n\t      type: 'boolean',\n\t      name: 'update_all_types'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-delete-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n\t */\n\tapi.indices.prototype['delete'] = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n\t */\n\tapi.indices.prototype.deleteAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.deleteTemplate = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.exists](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t */\n\tapi.indices.prototype.exists = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.existsAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.existsTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsType](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-types-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n\t */\n\tapi.indices.prototype.existsType = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_mapping/<%=type%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      type: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.flush](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flush = ca({\n\t  params: {\n\t    force: {\n\t      type: 'boolean'\n\t    },\n\t    waitIfOngoing: {\n\t      type: 'boolean',\n\t      name: 'wait_if_ongoing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.flushSynced](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-synced-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flushSynced = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush/synced',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush/synced'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.forcemerge](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-forcemerge.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.forcemerge = ca({\n\t  params: {\n\t    flush: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    maxNumSegments: {\n\t      type: 'number',\n\t      name: 'max_num_segments'\n\t    },\n\t    onlyExpungeDeletes: {\n\t      type: 'boolean',\n\t      name: 'only_expunge_deletes'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    waitForMerge: {\n\t      type: 'boolean',\n\t      name: 'wait_for_merge'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_forcemerge',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_forcemerge'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-get-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n\t */\n\tapi.indices.prototype.get = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=feature%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        feature: {\n\t          type: 'list',\n\t          options: [\n\t            '_settings',\n\t            '_mappings',\n\t            '_aliases'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.getAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_alias',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getFieldMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-get-field-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n\t */\n\tapi.indices.prototype.getFieldMapping = ca({\n\t  params: {\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      name: 'include_defaults'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/field/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-get-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t */\n\tapi.indices.prototype.getMapping = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-get-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n\t */\n\tapi.indices.prototype.getSettings = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': [\n\t        'open',\n\t        'closed'\n\t      ],\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.getTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_template/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_template'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getUpgrade](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.getUpgrade = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.open](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n\t */\n\tapi.indices.prototype.open = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'closed',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_open',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.putAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n\t */\n\tapi.indices.prototype.putAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-put-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n\t */\n\tapi.indices.prototype.putMapping = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    updateAllTypes: {\n\t      type: 'boolean',\n\t      name: 'update_all_types'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preserveExisting - Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.putSettings = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    preserveExisting: {\n\t      type: 'boolean',\n\t      name: 'preserve_existing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.putTemplate = ca({\n\t  params: {\n\t    order: {\n\t      type: 'number'\n\t    },\n\t    create: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.recovery = ca({\n\t  params: {\n\t    detailed: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    activeOnly: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'active_only'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_recovery',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.refresh](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-refresh.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.refresh = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_refresh',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_refresh'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.rollover](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-rollover-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the newly created rollover index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.alias - The name of the alias to rollover\n\t * @param {<<api-param-type-string,`String`>>} params.newIndex - The name of the rollover index\n\t */\n\tapi.indices.prototype.rollover = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=alias%>/_rollover/<%=newIndex%>',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        },\n\t        newIndex: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=alias%>/_rollover',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.segments](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.segments = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_segments',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shardStores](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-shards-stores.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.shardStores = ca({\n\t  params: {\n\t    status: {\n\t      type: 'list',\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red',\n\t        'all'\n\t      ]\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_shard_stores',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_shard_stores'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shrink](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-shrink-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to shrink\n\t * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to shrink into\n\t */\n\tapi.indices.prototype.shrink = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_shrink/<%=target%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      target: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n\t */\n\tapi.indices.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'list'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'indices',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_stats/<%=metric%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'percolate',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'percolate',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_stats',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.updateAliases](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.indices.prototype.updateAliases = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_aliases'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.upgrade](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.upgrade = ca({\n\t  params: {\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    onlyAncientSegments: {\n\t      type: 'boolean',\n\t      name: 'only_ancient_segments'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.validateQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-validate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {anything} params.operationThreading - TODO: ?\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allShards - Execute validation on all shards instead of one random shard per index\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n\t */\n\tapi.indices.prototype.validateQuery = ca({\n\t  params: {\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    operationThreading: {\n\t      name: 'operation_threading'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    rewrite: {\n\t      type: 'boolean'\n\t    },\n\t    allShards: {\n\t      type: 'boolean',\n\t      name: 'all_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_validate/query'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [info](https://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.info = ca({\n\t  url: {\n\t    fmt: '/'\n\t  }\n\t});\n\n\tapi.ingest = namespace();\n\n\t/**\n\t * Perform a [ingest.deletePipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.4/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.deletePipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [ingest.getPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.4/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.id - Comma separated list of pipeline ids. Wildcards supported\n\t */\n\tapi.ingest.prototype.getPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [ingest.putPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.4/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.putPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [ingest.simulate](https://www.elastic.co/guide/en/elasticsearch/plugins/5.4/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Verbose mode. Display data output for each processor in executed pipeline\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.simulate = ca({\n\t  params: {\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>/_simulate',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline/_simulate'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mget](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-multi-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.mget = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mget'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mpercolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-percolate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n\t */\n\tapi.mpercolate = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mpercolate',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mpercolate'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearch](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-multi-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearch = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearchTemplate = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch/template'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mtermvectors](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-multi-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t */\n\tapi.mtermvectors = ca({\n\t  params: {\n\t    ids: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mtermvectors'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\tapi.nodes = namespace();\n\n\t/**\n\t * Perform a [nodes.hotThreads](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cluster-nodes-hot-threads.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n\t * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n\t * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.hotThreads = ca({\n\t  params: {\n\t    interval: {\n\t      type: 'time'\n\t    },\n\t    snapshots: {\n\t      type: 'number'\n\t    },\n\t    threads: {\n\t      type: 'number'\n\t    },\n\t    ignoreIdleThreads: {\n\t      type: 'boolean',\n\t      name: 'ignore_idle_threads'\n\t    },\n\t    type: {\n\t      type: 'enum',\n\t      options: [\n\t        'cpu',\n\t        'wait',\n\t        'block'\n\t      ]\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/hotthreads'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.info](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cluster-nodes-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n\t */\n\tapi.nodes.prototype.info = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cluster-nodes-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at index, node or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'boolean'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'node',\n\t      options: [\n\t        'indices',\n\t        'node',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'percolate',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'percolate',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [percolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-percolate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n\t * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n\t * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n\t * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n\t */\n\tapi.percolate = ca({\n\t  params: {\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    percolateIndex: {\n\t      type: 'string',\n\t      name: 'percolate_index'\n\t    },\n\t    percolateType: {\n\t      type: 'string',\n\t      name: 'percolate_type'\n\t    },\n\t    percolateRouting: {\n\t      type: 'string',\n\t      name: 'percolate_routing'\n\t    },\n\t    percolatePreference: {\n\t      type: 'string',\n\t      name: 'percolate_preference'\n\t    },\n\t    percolateFormat: {\n\t      type: 'enum',\n\t      options: [\n\t        'ids'\n\t      ],\n\t      name: 'percolate_format'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_percolate',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [ping](https://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.ping = ca({\n\t  url: {\n\t    fmt: '/'\n\t  },\n\t  requestTimeout: 3000,\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [putScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n\t */\n\tapi.putScript = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_scripts/<%=lang%>/<%=id%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_scripts/<%=lang%>',\n\t      req: {\n\t        lang: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n\t */\n\tapi.putTemplate = ca({\n\t  url: {\n\t    fmt: '/_search/template/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [reindex](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the reindex is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t */\n\tapi.reindex = ca({\n\t  params: {\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [reindexRethrottle](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - The task id to rethrottle\n\t */\n\tapi.reindexRethrottle = ca({\n\t  params: {\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      required: true,\n\t      name: 'requests_per_second'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex/<%=taskId%>/_rethrottle',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\tapi.remote = namespace();\n\n\t/**\n\t * Perform a [remote.info](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/cluster-remote-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.remote.prototype.info = ca({\n\t  url: {\n\t    fmt: '/_remote/info'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [renderSearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n\t */\n\tapi.renderSearchTemplate = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_render/template/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_render/template'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [scroll](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n\t */\n\tapi.scroll = ca({\n\t  params: {\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    scrollId: {\n\t      type: 'string',\n\t      name: 'scroll_id'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [search](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.docvalueFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n\t * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n\t * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n\t * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-number,`Number`>>} [params.batchedReduceSize=512] - The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.search = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    docvalueFields: {\n\t      type: 'list',\n\t      name: 'docvalue_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    suggestField: {\n\t      type: 'string',\n\t      name: 'suggest_field'\n\t    },\n\t    suggestMode: {\n\t      type: 'enum',\n\t      'default': 'missing',\n\t      options: [\n\t        'missing',\n\t        'popular',\n\t        'always'\n\t      ],\n\t      name: 'suggest_mode'\n\t    },\n\t    suggestSize: {\n\t      type: 'number',\n\t      name: 'suggest_size'\n\t    },\n\t    suggestText: {\n\t      type: 'string',\n\t      name: 'suggest_text'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    trackScores: {\n\t      type: 'boolean',\n\t      name: 'track_scores'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    batchedReduceSize: {\n\t      type: 'number',\n\t      'default': 512,\n\t      name: 'batched_reduce_size'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchShards](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.searchShards = ca({\n\t  params: {\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search_shards',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search_shards',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search_shards'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.profile - Specify whether to profile the query execution\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.searchTemplate = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    profile: {\n\t      type: 'boolean'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/template'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\tapi.snapshot = namespace();\n\n\t/**\n\t * Perform a [snapshot.create](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.create = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.createRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.createRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    verify: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype['delete'] = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.deleteRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.deleteRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.get = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [snapshot.getRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.getRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.restore](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.restore = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.status](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.status = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        },\n\t        snapshot: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/_status'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.verifyRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.verifyRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/_verify',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [suggest](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-suggesters.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.suggest = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_suggest',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_suggest'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.tasks = namespace();\n\n\t/**\n\t * Perform a [tasks.cancel](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Cancel tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTask - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Cancel the task with specified task id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.cancel = ca({\n\t  params: {\n\t    nodeId: {\n\t      type: 'list',\n\t      name: 'node_id'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTask: {\n\t      type: 'string',\n\t      name: 'parent_task'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_tasks/<%=taskId%>/_cancel',\n\t      req: {\n\t        taskId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_tasks/_cancel'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [tasks.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Return the task with specified id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.get = ca({\n\t  params: {\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks/<%=taskId%>',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [tasks.list](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTask - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.groupBy=nodes] - Group tasks by nodes or parent/child relationships\n\t */\n\tapi.tasks.prototype.list = ca({\n\t  params: {\n\t    nodeId: {\n\t      type: 'list',\n\t      name: 'node_id'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTask: {\n\t      type: 'string',\n\t      name: 'parent_task'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    groupBy: {\n\t      type: 'enum',\n\t      'default': 'nodes',\n\t      options: [\n\t        'nodes',\n\t        'parents'\n\t      ],\n\t      name: 'group_by'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [termvectors](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n\t */\n\tapi.termvectors = ca({\n\t  params: {\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [update](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-update.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: painless)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.update = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    lang: {\n\t      type: 'string'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    retryOnConflict: {\n\t      type: 'number',\n\t      name: 'retry_on_conflict'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    timestamp: {\n\t      type: 'time'\n\t    },\n\t    ttl: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [updateByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.4/docs-update-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the update by query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - Ingest pipeline to set on index requests made by this action. (default: none)\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.versionType - Should the document increment the version number (internal) on hit or not (reindex)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the update by query operation is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.updateByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    versionType: {\n\t      type: 'boolean',\n\t      name: 'version_type'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar ca = __webpack_require__(46).makeFactoryWithModifier(function (spec) {\n\t  return __webpack_require__(4).merge(spec, {\n\t    params: {\n\t      filterPath: {\n\t        type: 'list',\n\t        name: 'filter_path'\n\t      }\n\t    }\n\t  });\n\t});\n\tvar namespace = __webpack_require__(46).namespaceFactory;\n\tvar api = module.exports = {};\n\n\tapi._namespaces = ['cat', 'cluster', 'indices', 'ingest', 'nodes', 'snapshot', 'tasks'];\n\n\t/**\n\t * Perform a [bulk](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-bulk.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - Default list of fields to exclude from the returned _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - Default list of fields to extract and return from the _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n\t */\n\tapi.bulk = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    type: {\n\t      type: 'string'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_bulk'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.cat = namespace();\n\n\t/**\n\t * Perform a [cat.aliases](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.cat.prototype.aliases = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/aliases/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/aliases'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.allocation](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-allocation.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n\t */\n\tapi.cat.prototype.allocation = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/allocation/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/allocation'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.count](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.count = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/count/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/count'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.fielddata](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-fielddata.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n\t */\n\tapi.cat.prototype.fielddata = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/fielddata/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/fielddata'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.health](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.health = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    ts: {\n\t      type: 'boolean',\n\t      'default': true\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/health'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.help](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t */\n\tapi.cat.prototype.help = ca({\n\t  params: {\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.indices](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-indices.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-string,`String`>>} params.health - A health status (\"green\", \"yellow\", or \"red\" to filter only indices matching the specified health status\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.indices = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'm',\n\t        'g'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    health: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ]\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    pri: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/indices/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/indices'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.master](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-master.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.master = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/master'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodeattrs](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-nodeattrs.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodeattrs = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodeattrs'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodes](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-nodes.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Return the full node ID instead of the shortened version (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodes = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    fullId: {\n\t      type: 'boolean',\n\t      name: 'full_id'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodes'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-pending-tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.pendingTasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.plugins](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-plugins.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.plugins = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/plugins'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.recovery = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/recovery/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.repositories](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-repositories.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.repositories = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/repositories'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.segments](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.segments = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/segments/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.shards](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.shards = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/shards/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/shards'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.snapshots](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Set to true to ignore unavailable snapshots\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n\t */\n\tapi.cat.prototype.snapshots = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'ignore_unavailable'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/snapshots/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/snapshots'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.tasks](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-number,`Number`>>} params.parentTask - Return tasks with specified parent task id. Set to -1 to return all.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.tasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    nodeId: {\n\t      type: 'list',\n\t      name: 'node_id'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTask: {\n\t      type: 'number',\n\t      name: 'parent_task'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.templates](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>} params.name - A pattern that returned template names must match\n\t */\n\tapi.cat.prototype.templates = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/templates/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/templates'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.threadPool](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cat-thread-pool.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.size - The multiplier in which to display values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.threadPoolPatterns - A comma-separated list of regular-expressions to filter the thread pools in the output\n\t */\n\tapi.cat.prototype.threadPool = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    size: {\n\t      type: 'enum',\n\t      options: [\n\t        '',\n\t        'k',\n\t        'm',\n\t        'g',\n\t        't',\n\t        'p'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/thread_pool/<%=threadPoolPatterns%>',\n\t      req: {\n\t        threadPoolPatterns: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/thread_pool'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [clearScroll](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n\t */\n\tapi.clearScroll = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\tapi.cluster = namespace();\n\n\t/**\n\t * Perform a [cluster.allocationExplain](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cluster-allocation-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeYesDecisions - Return 'YES' decisions in explanation (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDiskInfo - Return information about disk usage and shard sizes (default: false)\n\t */\n\tapi.cluster.prototype.allocationExplain = ca({\n\t  params: {\n\t    includeYesDecisions: {\n\t      type: 'boolean',\n\t      name: 'include_yes_decisions'\n\t    },\n\t    includeDiskInfo: {\n\t      type: 'boolean',\n\t      name: 'include_disk_info'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/allocation/explain'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default clusters setting.\n\t */\n\tapi.cluster.prototype.getSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.health](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cluster-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n\t * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n\t * @param {<<api-param-type-string,`String`>>} params.waitForEvents - Wait until all currently queued events with the given priority are processed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForNoRelocatingShards - Whether to wait until there are no relocating shards in the cluster\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForNoInitializingShards - Whether to wait until there are no initializing shards in the cluster\n\t * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n\t */\n\tapi.cluster.prototype.health = ca({\n\t  params: {\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'cluster',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForNodes: {\n\t      type: 'string',\n\t      name: 'wait_for_nodes'\n\t    },\n\t    waitForEvents: {\n\t      type: 'enum',\n\t      options: [\n\t        'immediate',\n\t        'urgent',\n\t        'high',\n\t        'normal',\n\t        'low',\n\t        'languid'\n\t      ],\n\t      name: 'wait_for_events'\n\t    },\n\t    waitForNoRelocatingShards: {\n\t      type: 'boolean',\n\t      name: 'wait_for_no_relocating_shards'\n\t    },\n\t    waitForNoInitializingShards: {\n\t      type: 'boolean',\n\t      name: 'wait_for_no_initializing_shards'\n\t    },\n\t    waitForStatus: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ],\n\t      name: 'wait_for_status'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/health/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/health'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cluster-pending.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.cluster.prototype.pendingTasks = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.putSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [cluster.remoteInfo](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cluster-remote-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.cluster.prototype.remoteInfo = ca({\n\t  url: {\n\t    fmt: '/_remote/info'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.reroute](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cluster-reroute.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.retryFailed - Retries allocation of shards that are blocked due to too many subsequent allocation failures\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.reroute = ca({\n\t  params: {\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    retryFailed: {\n\t      type: 'boolean',\n\t      name: 'retry_failed'\n\t    },\n\t    metric: {\n\t      type: 'list',\n\t      options: [\n\t        '_all',\n\t        'blocks',\n\t        'metadata',\n\t        'nodes',\n\t        'routing_table',\n\t        'master_node',\n\t        'version'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/reroute'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.state](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cluster-state.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t */\n\tapi.cluster.prototype.state = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        },\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.stats](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cluster-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.cluster.prototype.stats = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [count](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/search-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum count for each shard, upon reaching which the query execution will terminate early\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n\t */\n\tapi.count = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    minScore: {\n\t      type: 'number',\n\t      name: 'min_score'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_count'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [create](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_create',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [delete](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-delete.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi['delete'] = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [deleteByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-delete-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the delete-by-query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the delete-by-query is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle for this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.deleteByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [deleteScript](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.deleteScript = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_scripts/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [exists](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.exists = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [existsSource](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.existsSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [explain](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/search-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.explain = ca({\n\t  params: {\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [fieldCaps](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/search-field-caps.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of field names\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.fieldCaps = ca({\n\t  params: {\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_field_caps',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_field_caps'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [get](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.get = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getScript](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.getScript = ca({\n\t  url: {\n\t    fmt: '/_scripts/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getSource](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.getSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [index](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.index = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    opType: {\n\t      type: 'enum',\n\t      'default': 'index',\n\t      options: [\n\t        'index',\n\t        'create'\n\t      ],\n\t      name: 'op_type'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.indices = namespace();\n\n\t/**\n\t * Perform a [indices.analyze](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-analyze.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n\t * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n\t */\n\tapi.indices.prototype.analyze = ca({\n\t  params: {\n\t    index: {\n\t      type: 'string'\n\t    },\n\t    preferLocal: {\n\t      type: 'boolean',\n\t      name: 'prefer_local'\n\t    },\n\t    format: {\n\t      type: 'enum',\n\t      'default': 'detailed',\n\t      options: [\n\t        'detailed',\n\t        'text'\n\t      ]\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_analyze',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_analyze'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.clearCache](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-clearcache.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Clear request cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n\t */\n\tapi.indices.prototype.clearCache = ca({\n\t  params: {\n\t    fieldData: {\n\t      type: 'boolean',\n\t      name: 'field_data'\n\t    },\n\t    fielddata: {\n\t      type: 'boolean'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    query: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    index: {\n\t      type: 'list'\n\t    },\n\t    recycler: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    request: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_cache/clear',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cache/clear'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.close](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n\t */\n\tapi.indices.prototype.close = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_close',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.create](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-create-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for before the operation returns.\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t */\n\tapi.indices.prototype.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    updateAllTypes: {\n\t      type: 'boolean',\n\t      name: 'update_all_types'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.delete](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-delete-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n\t */\n\tapi.indices.prototype['delete'] = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n\t */\n\tapi.indices.prototype.deleteAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.deleteTemplate = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.exists](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t */\n\tapi.indices.prototype.exists = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.existsAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.existsTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsType](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-types-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n\t */\n\tapi.indices.prototype.existsType = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_mapping/<%=type%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      type: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.flush](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flush = ca({\n\t  params: {\n\t    force: {\n\t      type: 'boolean'\n\t    },\n\t    waitIfOngoing: {\n\t      type: 'boolean',\n\t      name: 'wait_if_ongoing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.flushSynced](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-synced-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flushSynced = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush/synced',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush/synced'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.forcemerge](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-forcemerge.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.forcemerge = ca({\n\t  params: {\n\t    flush: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    maxNumSegments: {\n\t      type: 'number',\n\t      name: 'max_num_segments'\n\t    },\n\t    onlyExpungeDeletes: {\n\t      type: 'boolean',\n\t      name: 'only_expunge_deletes'\n\t    },\n\t    waitForMerge: {\n\t      type: 'boolean',\n\t      name: 'wait_for_merge'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_forcemerge',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_forcemerge'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.get](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-get-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t */\n\tapi.indices.prototype.get = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [indices.getAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.getAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_alias',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getFieldMapping](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-get-field-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n\t */\n\tapi.indices.prototype.getFieldMapping = ca({\n\t  params: {\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      name: 'include_defaults'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/field/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getMapping](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-get-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t */\n\tapi.indices.prototype.getMapping = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-get-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n\t */\n\tapi.indices.prototype.getSettings = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': [\n\t        'open',\n\t        'closed'\n\t      ],\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.getTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_template/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_template'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getUpgrade](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.getUpgrade = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.open](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of active shards to wait for before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n\t */\n\tapi.indices.prototype.open = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'closed',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_open',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.putAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n\t */\n\tapi.indices.prototype.putAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putMapping](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-put-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n\t */\n\tapi.indices.prototype.putMapping = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    updateAllTypes: {\n\t      type: 'boolean',\n\t      name: 'update_all_types'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preserveExisting - Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.putSettings = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    preserveExisting: {\n\t      type: 'boolean',\n\t      name: 'preserve_existing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.putTemplate = ca({\n\t  params: {\n\t    order: {\n\t      type: 'number'\n\t    },\n\t    create: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.recovery = ca({\n\t  params: {\n\t    detailed: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    activeOnly: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'active_only'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_recovery',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.refresh](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-refresh.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.refresh = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_refresh',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_refresh'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.rollover](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-rollover-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the newly created rollover index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.alias - The name of the alias to rollover\n\t * @param {<<api-param-type-string,`String`>>} params.newIndex - The name of the rollover index\n\t */\n\tapi.indices.prototype.rollover = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=alias%>/_rollover/<%=newIndex%>',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        },\n\t        newIndex: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=alias%>/_rollover',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.segments](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.segments = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_segments',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shardStores](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-shards-stores.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.shardStores = ca({\n\t  params: {\n\t    status: {\n\t      type: 'list',\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red',\n\t        'all'\n\t      ]\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_shard_stores',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_shard_stores'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shrink](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-shrink-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to shrink\n\t * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to shrink into\n\t */\n\tapi.indices.prototype.shrink = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_shrink/<%=target%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      target: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.split](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-split-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to split\n\t * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to split into\n\t */\n\tapi.indices.prototype.split = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_split/<%=target%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      target: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.stats](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n\t */\n\tapi.indices.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'list'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'indices',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_stats/<%=metric%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_stats',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.updateAliases](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.indices.prototype.updateAliases = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_aliases'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.upgrade](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.upgrade = ca({\n\t  params: {\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    onlyAncientSegments: {\n\t      type: 'boolean',\n\t      name: 'only_ancient_segments'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.validateQuery](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/search-validate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allShards - Execute validation on all shards instead of one random shard per index\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n\t */\n\tapi.indices.prototype.validateQuery = ca({\n\t  params: {\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    rewrite: {\n\t      type: 'boolean'\n\t    },\n\t    allShards: {\n\t      type: 'boolean',\n\t      name: 'all_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_validate/query'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [info](http://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.info = ca({\n\t  url: {\n\t    fmt: '/'\n\t  }\n\t});\n\n\tapi.ingest = namespace();\n\n\t/**\n\t * Perform a [ingest.deletePipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/6.x/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.deletePipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [ingest.getPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/6.x/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.id - Comma separated list of pipeline ids. Wildcards supported\n\t */\n\tapi.ingest.prototype.getPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [ingest.processorGrok](https://www.elastic.co/guide/en/elasticsearch/plugins/6.x/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.ingest.prototype.processorGrok = ca({\n\t  url: {\n\t    fmt: '/_ingest/processor/grok'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [ingest.putPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/6.x/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.putPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [ingest.simulate](https://www.elastic.co/guide/en/elasticsearch/plugins/6.x/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Verbose mode. Display data output for each processor in executed pipeline\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.simulate = ca({\n\t  params: {\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>/_simulate',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline/_simulate'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mget](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-multi-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.mget = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mget'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearch](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/search-multi-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-number,`Number`>>} [params.preFilterShardSize=128] - A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it's rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearch = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    preFilterShardSize: {\n\t      type: 'number',\n\t      'default': 128,\n\t      name: 'pre_filter_shard_size'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/search-multi-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearchTemplate = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch/template'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mtermvectors](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-multi-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t */\n\tapi.mtermvectors = ca({\n\t  params: {\n\t    ids: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mtermvectors'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\tapi.nodes = namespace();\n\n\t/**\n\t * Perform a [nodes.hotThreads](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cluster-nodes-hot-threads.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n\t * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n\t * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.hotThreads = ca({\n\t  params: {\n\t    interval: {\n\t      type: 'time'\n\t    },\n\t    snapshots: {\n\t      type: 'number'\n\t    },\n\t    threads: {\n\t      type: 'number'\n\t    },\n\t    ignoreIdleThreads: {\n\t      type: 'boolean',\n\t      name: 'ignore_idle_threads'\n\t    },\n\t    type: {\n\t      type: 'enum',\n\t      options: [\n\t        'cpu',\n\t        'wait',\n\t        'block'\n\t      ]\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/hotthreads'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.info](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cluster-nodes-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n\t */\n\tapi.nodes.prototype.info = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.stats](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cluster-nodes-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at index, node or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'boolean'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'node',\n\t      options: [\n\t        'indices',\n\t        'node',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.usage](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/cluster-nodes-usage.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.usage = ca({\n\t  params: {\n\t    human: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/usage/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'rest_actions'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/usage',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/usage/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'rest_actions'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/usage'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [ping](http://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.ping = ca({\n\t  url: {\n\t    fmt: '/'\n\t  },\n\t  requestTimeout: 3000,\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [putScript](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.context - Script context\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.putScript = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    context: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_scripts/<%=id%>/<%=context%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        },\n\t        context: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_scripts/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [rankEval](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-rank-eval.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.rankEval = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_rank_eval',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_rank_eval',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_rank_eval'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [reindex](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the reindex is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t */\n\tapi.reindex = ca({\n\t  params: {\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [reindexRethrottle](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - The task id to rethrottle\n\t */\n\tapi.reindexRethrottle = ca({\n\t  params: {\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      required: true,\n\t      name: 'requests_per_second'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex/<%=taskId%>/_rethrottle',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [renderSearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n\t */\n\tapi.renderSearchTemplate = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_render/template/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_render/template'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [scroll](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n\t */\n\tapi.scroll = ca({\n\t  params: {\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    scrollId: {\n\t      type: 'string',\n\t      name: 'scroll_id'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [search](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/search-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.docvalueFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n\t * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n\t * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n\t * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.trackTotalHits - Indicate if the number of documents that match the query should be tracked\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-number,`Number`>>} [params.batchedReduceSize=512] - The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.\n\t * @param {<<api-param-type-number,`Number`>>} [params.maxConcurrentShardRequests=The default grows with the number of nodes in the cluster but is at most 256.] - The number of concurrent shard requests this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests\n\t * @param {<<api-param-type-number,`Number`>>} [params.preFilterShardSize=128] - A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it's rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.search = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    docvalueFields: {\n\t      type: 'list',\n\t      name: 'docvalue_fields'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    suggestField: {\n\t      type: 'string',\n\t      name: 'suggest_field'\n\t    },\n\t    suggestMode: {\n\t      type: 'enum',\n\t      'default': 'missing',\n\t      options: [\n\t        'missing',\n\t        'popular',\n\t        'always'\n\t      ],\n\t      name: 'suggest_mode'\n\t    },\n\t    suggestSize: {\n\t      type: 'number',\n\t      name: 'suggest_size'\n\t    },\n\t    suggestText: {\n\t      type: 'string',\n\t      name: 'suggest_text'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    trackScores: {\n\t      type: 'boolean',\n\t      name: 'track_scores'\n\t    },\n\t    trackTotalHits: {\n\t      type: 'boolean',\n\t      name: 'track_total_hits'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    batchedReduceSize: {\n\t      type: 'number',\n\t      'default': 512,\n\t      name: 'batched_reduce_size'\n\t    },\n\t    maxConcurrentShardRequests: {\n\t      type: 'number',\n\t      'default': 'The default grows with the number of nodes in the cluster but is at most 256.',\n\t      name: 'max_concurrent_shard_requests'\n\t    },\n\t    preFilterShardSize: {\n\t      type: 'number',\n\t      'default': 128,\n\t      name: 'pre_filter_shard_size'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchShards](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/search-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.searchShards = ca({\n\t  params: {\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_search_shards',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search_shards'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.profile - Specify whether to profile the query execution\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.searchTemplate = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    profile: {\n\t      type: 'boolean'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/template'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.snapshot = namespace();\n\n\t/**\n\t * Perform a [snapshot.create](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.create = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.createRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.createRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    verify: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.delete](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype['delete'] = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.deleteRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.deleteRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.get](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Whether to show verbose snapshot info or only show the basic info found in the repository index blob\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.get = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    verbose: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [snapshot.getRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.getRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.restore](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.restore = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.status](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.status = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        },\n\t        snapshot: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/_status'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.verifyRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.verifyRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/_verify',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\tapi.tasks = namespace();\n\n\t/**\n\t * Perform a [tasks.cancel](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodes - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Cancel tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTaskId - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Cancel the task with specified task id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.cancel = ca({\n\t  params: {\n\t    nodes: {\n\t      type: 'list'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTaskId: {\n\t      type: 'string',\n\t      name: 'parent_task_id'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_tasks/<%=taskId%>/_cancel',\n\t      req: {\n\t        taskId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_tasks/_cancel'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [tasks.get](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Return the task with specified id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.get = ca({\n\t  params: {\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks/<%=taskId%>',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [tasks.list](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodes - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTaskId - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.groupBy=nodes] - Group tasks by nodes or parent/child relationships\n\t */\n\tapi.tasks.prototype.list = ca({\n\t  params: {\n\t    nodes: {\n\t      type: 'list'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTaskId: {\n\t      type: 'string',\n\t      name: 'parent_task_id'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    groupBy: {\n\t      type: 'enum',\n\t      'default': 'nodes',\n\t      options: [\n\t        'nodes',\n\t        'parents',\n\t        'none'\n\t      ],\n\t      name: 'group_by'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [termvectors](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n\t */\n\tapi.termvectors = ca({\n\t  params: {\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [update](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-update.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: painless)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.update = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    lang: {\n\t      type: 'string'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    retryOnConflict: {\n\t      type: 'number',\n\t      name: 'retry_on_conflict'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [updateByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docs-update-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the update by query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - Ingest pipeline to set on index requests made by this action. (default: none)\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.versionType - Should the document increment the version number (internal) on hit or not (reindex)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the update by query operation is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.updateByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    versionType: {\n\t      type: 'boolean',\n\t      name: 'version_type'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar ca = __webpack_require__(46).makeFactoryWithModifier(function (spec) {\n\t  return __webpack_require__(4).merge(spec, {\n\t    params: {\n\t      filterPath: {\n\t        type: 'list',\n\t        name: 'filter_path'\n\t      }\n\t    }\n\t  });\n\t});\n\tvar namespace = __webpack_require__(46).namespaceFactory;\n\tvar api = module.exports = {};\n\n\tapi._namespaces = ['cat', 'cluster', 'indices', 'ingest', 'nodes', 'snapshot', 'tasks'];\n\n\t/**\n\t * Perform a [bulk](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-bulk.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - Default list of fields to exclude from the returned _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - Default list of fields to extract and return from the _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n\t */\n\tapi.bulk = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    type: {\n\t      type: 'string'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_bulk'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.cat = namespace();\n\n\t/**\n\t * Perform a [cat.aliases](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.cat.prototype.aliases = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/aliases/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/aliases'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.allocation](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-allocation.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n\t */\n\tapi.cat.prototype.allocation = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/allocation/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/allocation'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.count](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.count = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/count/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/count'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.fielddata](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-fielddata.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n\t */\n\tapi.cat.prototype.fielddata = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/fielddata/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/fielddata'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.health](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.health = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    ts: {\n\t      type: 'boolean',\n\t      'default': true\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/health'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.help](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t */\n\tapi.cat.prototype.help = ca({\n\t  params: {\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.indices](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-indices.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-string,`String`>>} params.health - A health status (\"green\", \"yellow\", or \"red\" to filter only indices matching the specified health status\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.indices = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'm',\n\t        'g'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    health: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ]\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    pri: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/indices/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/indices'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.master](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-master.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.master = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/master'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodeattrs](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-nodeattrs.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodeattrs = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodeattrs'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodes](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-nodes.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Return the full node ID instead of the shortened version (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodes = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    fullId: {\n\t      type: 'boolean',\n\t      name: 'full_id'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodes'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-pending-tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.pendingTasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.plugins](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-plugins.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.plugins = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/plugins'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.recovery = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/recovery/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.repositories](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-repositories.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.repositories = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/repositories'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.segments](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.segments = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/segments/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.shards](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.shards = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/shards/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/shards'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.snapshots](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Set to true to ignore unavailable snapshots\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n\t */\n\tapi.cat.prototype.snapshots = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'ignore_unavailable'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/snapshots/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/snapshots'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.tasks](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-number,`Number`>>} params.parentTask - Return tasks with specified parent task id. Set to -1 to return all.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.tasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    nodeId: {\n\t      type: 'list',\n\t      name: 'node_id'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTask: {\n\t      type: 'number',\n\t      name: 'parent_task'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.templates](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>} params.name - A pattern that returned template names must match\n\t */\n\tapi.cat.prototype.templates = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/templates/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/templates'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.threadPool](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cat-thread-pool.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.size - The multiplier in which to display values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.threadPoolPatterns - A comma-separated list of regular-expressions to filter the thread pools in the output\n\t */\n\tapi.cat.prototype.threadPool = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    size: {\n\t      type: 'enum',\n\t      options: [\n\t        '',\n\t        'k',\n\t        'm',\n\t        'g',\n\t        't',\n\t        'p'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/thread_pool/<%=threadPoolPatterns%>',\n\t      req: {\n\t        threadPoolPatterns: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/thread_pool'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [clearScroll](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n\t */\n\tapi.clearScroll = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\tapi.cluster = namespace();\n\n\t/**\n\t * Perform a [cluster.allocationExplain](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-allocation-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeYesDecisions - Return 'YES' decisions in explanation (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDiskInfo - Return information about disk usage and shard sizes (default: false)\n\t */\n\tapi.cluster.prototype.allocationExplain = ca({\n\t  params: {\n\t    includeYesDecisions: {\n\t      type: 'boolean',\n\t      name: 'include_yes_decisions'\n\t    },\n\t    includeDiskInfo: {\n\t      type: 'boolean',\n\t      name: 'include_disk_info'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/allocation/explain'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default clusters setting.\n\t */\n\tapi.cluster.prototype.getSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.health](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n\t * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n\t * @param {<<api-param-type-string,`String`>>} params.waitForEvents - Wait until all currently queued events with the given priority are processed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForNoRelocatingShards - Whether to wait until there are no relocating shards in the cluster\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForNoInitializingShards - Whether to wait until there are no initializing shards in the cluster\n\t * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n\t */\n\tapi.cluster.prototype.health = ca({\n\t  params: {\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'cluster',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForNodes: {\n\t      type: 'string',\n\t      name: 'wait_for_nodes'\n\t    },\n\t    waitForEvents: {\n\t      type: 'enum',\n\t      options: [\n\t        'immediate',\n\t        'urgent',\n\t        'high',\n\t        'normal',\n\t        'low',\n\t        'languid'\n\t      ],\n\t      name: 'wait_for_events'\n\t    },\n\t    waitForNoRelocatingShards: {\n\t      type: 'boolean',\n\t      name: 'wait_for_no_relocating_shards'\n\t    },\n\t    waitForNoInitializingShards: {\n\t      type: 'boolean',\n\t      name: 'wait_for_no_initializing_shards'\n\t    },\n\t    waitForStatus: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ],\n\t      name: 'wait_for_status'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/health/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/health'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-pending.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.cluster.prototype.pendingTasks = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.putSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [cluster.remoteInfo](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-remote-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.cluster.prototype.remoteInfo = ca({\n\t  url: {\n\t    fmt: '/_remote/info'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.reroute](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-reroute.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.retryFailed - Retries allocation of shards that are blocked due to too many subsequent allocation failures\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.reroute = ca({\n\t  params: {\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    retryFailed: {\n\t      type: 'boolean',\n\t      name: 'retry_failed'\n\t    },\n\t    metric: {\n\t      type: 'list',\n\t      options: [\n\t        '_all',\n\t        'blocks',\n\t        'metadata',\n\t        'nodes',\n\t        'routing_table',\n\t        'master_node',\n\t        'version'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/reroute'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.state](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-state.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t */\n\tapi.cluster.prototype.state = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        },\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.stats](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.cluster.prototype.stats = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [count](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum count for each shard, upon reaching which the query execution will terminate early\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n\t */\n\tapi.count = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    minScore: {\n\t      type: 'number',\n\t      name: 'min_score'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_count'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [create](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_create',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [delete](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-delete.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi['delete'] = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [deleteByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-delete-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the delete-by-query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the delete-by-query is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle for this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.deleteByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [deleteScript](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.deleteScript = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_scripts/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [exists](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.exists = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [existsSource](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.existsSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [explain](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.explain = ca({\n\t  params: {\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [fieldCaps](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-field-caps.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of field names\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.fieldCaps = ca({\n\t  params: {\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_field_caps',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_field_caps'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [get](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.get = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getScript](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.getScript = ca({\n\t  url: {\n\t    fmt: '/_scripts/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getSource](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.getSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [index](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.index = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    opType: {\n\t      type: 'enum',\n\t      'default': 'index',\n\t      options: [\n\t        'index',\n\t        'create'\n\t      ],\n\t      name: 'op_type'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.indices = namespace();\n\n\t/**\n\t * Perform a [indices.analyze](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-analyze.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n\t * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n\t */\n\tapi.indices.prototype.analyze = ca({\n\t  params: {\n\t    index: {\n\t      type: 'string'\n\t    },\n\t    preferLocal: {\n\t      type: 'boolean',\n\t      name: 'prefer_local'\n\t    },\n\t    format: {\n\t      type: 'enum',\n\t      'default': 'detailed',\n\t      options: [\n\t        'detailed',\n\t        'text'\n\t      ]\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_analyze',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_analyze'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.clearCache](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-clearcache.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Clear request cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n\t */\n\tapi.indices.prototype.clearCache = ca({\n\t  params: {\n\t    fieldData: {\n\t      type: 'boolean',\n\t      name: 'field_data'\n\t    },\n\t    fielddata: {\n\t      type: 'boolean'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    query: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    index: {\n\t      type: 'list'\n\t    },\n\t    recycler: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    request: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_cache/clear',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cache/clear'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.close](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n\t */\n\tapi.indices.prototype.close = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_close',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.create](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-create-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for before the operation returns.\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t */\n\tapi.indices.prototype.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    updateAllTypes: {\n\t      type: 'boolean',\n\t      name: 'update_all_types'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.delete](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-delete-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n\t */\n\tapi.indices.prototype['delete'] = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n\t */\n\tapi.indices.prototype.deleteAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.deleteTemplate = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.exists](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t */\n\tapi.indices.prototype.exists = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.existsAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.existsTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsType](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-types-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n\t */\n\tapi.indices.prototype.existsType = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_mapping/<%=type%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      type: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.flush](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flush = ca({\n\t  params: {\n\t    force: {\n\t      type: 'boolean'\n\t    },\n\t    waitIfOngoing: {\n\t      type: 'boolean',\n\t      name: 'wait_if_ongoing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.flushSynced](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-synced-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flushSynced = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush/synced',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush/synced'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.forcemerge](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-forcemerge.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.forcemerge = ca({\n\t  params: {\n\t    flush: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    maxNumSegments: {\n\t      type: 'number',\n\t      name: 'max_num_segments'\n\t    },\n\t    onlyExpungeDeletes: {\n\t      type: 'boolean',\n\t      name: 'only_expunge_deletes'\n\t    },\n\t    waitForMerge: {\n\t      type: 'boolean',\n\t      name: 'wait_for_merge'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_forcemerge',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_forcemerge'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.get](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-get-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t */\n\tapi.indices.prototype.get = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [indices.getAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.getAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_alias',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getFieldMapping](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-get-field-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n\t */\n\tapi.indices.prototype.getFieldMapping = ca({\n\t  params: {\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      name: 'include_defaults'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/field/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getMapping](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-get-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t */\n\tapi.indices.prototype.getMapping = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-get-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n\t */\n\tapi.indices.prototype.getSettings = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': [\n\t        'open',\n\t        'closed'\n\t      ],\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.getTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_template/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_template'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getUpgrade](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.getUpgrade = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.open](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of active shards to wait for before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n\t */\n\tapi.indices.prototype.open = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'closed',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_open',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.putAlias](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n\t */\n\tapi.indices.prototype.putAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putMapping](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-put-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n\t */\n\tapi.indices.prototype.putMapping = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    updateAllTypes: {\n\t      type: 'boolean',\n\t      name: 'update_all_types'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preserveExisting - Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.putSettings = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    preserveExisting: {\n\t      type: 'boolean',\n\t      name: 'preserve_existing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.putTemplate = ca({\n\t  params: {\n\t    order: {\n\t      type: 'number'\n\t    },\n\t    create: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.recovery = ca({\n\t  params: {\n\t    detailed: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    activeOnly: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'active_only'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_recovery',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.refresh](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-refresh.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.refresh = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_refresh',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_refresh'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.rollover](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-rollover-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the newly created rollover index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.alias - The name of the alias to rollover\n\t * @param {<<api-param-type-string,`String`>>} params.newIndex - The name of the rollover index\n\t */\n\tapi.indices.prototype.rollover = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=alias%>/_rollover/<%=newIndex%>',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        },\n\t        newIndex: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=alias%>/_rollover',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.segments](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.segments = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_segments',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shardStores](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-shards-stores.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.shardStores = ca({\n\t  params: {\n\t    status: {\n\t      type: 'list',\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red',\n\t        'all'\n\t      ]\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_shard_stores',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_shard_stores'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shrink](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-shrink-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to shrink\n\t * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to shrink into\n\t */\n\tapi.indices.prototype.shrink = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_shrink/<%=target%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      target: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.split](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-split-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to split\n\t * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to split into\n\t */\n\tapi.indices.prototype.split = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_split/<%=target%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      target: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.stats](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n\t */\n\tapi.indices.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'list'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'indices',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_stats/<%=metric%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_stats',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.updateAliases](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.indices.prototype.updateAliases = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_aliases'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.upgrade](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.upgrade = ca({\n\t  params: {\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    onlyAncientSegments: {\n\t      type: 'boolean',\n\t      name: 'only_ancient_segments'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.validateQuery](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-validate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allShards - Execute validation on all shards instead of one random shard per index\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n\t */\n\tapi.indices.prototype.validateQuery = ca({\n\t  params: {\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    rewrite: {\n\t      type: 'boolean'\n\t    },\n\t    allShards: {\n\t      type: 'boolean',\n\t      name: 'all_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_validate/query'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [info](http://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.info = ca({\n\t  url: {\n\t    fmt: '/'\n\t  }\n\t});\n\n\tapi.ingest = namespace();\n\n\t/**\n\t * Perform a [ingest.deletePipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/6.2/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.deletePipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [ingest.getPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/6.2/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.id - Comma separated list of pipeline ids. Wildcards supported\n\t */\n\tapi.ingest.prototype.getPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [ingest.processorGrok](https://www.elastic.co/guide/en/elasticsearch/plugins/6.2/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.ingest.prototype.processorGrok = ca({\n\t  url: {\n\t    fmt: '/_ingest/processor/grok'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [ingest.putPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/6.2/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.putPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [ingest.simulate](https://www.elastic.co/guide/en/elasticsearch/plugins/6.2/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Verbose mode. Display data output for each processor in executed pipeline\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.simulate = ca({\n\t  params: {\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>/_simulate',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline/_simulate'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mget](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-multi-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.mget = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mget'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearch](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-multi-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-number,`Number`>>} [params.preFilterShardSize=128] - A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it's rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearch = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    preFilterShardSize: {\n\t      type: 'number',\n\t      'default': 128,\n\t      name: 'pre_filter_shard_size'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-multi-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearchTemplate = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch/template'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mtermvectors](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-multi-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t */\n\tapi.mtermvectors = ca({\n\t  params: {\n\t    ids: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mtermvectors'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\tapi.nodes = namespace();\n\n\t/**\n\t * Perform a [nodes.hotThreads](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-nodes-hot-threads.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n\t * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n\t * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.hotThreads = ca({\n\t  params: {\n\t    interval: {\n\t      type: 'time'\n\t    },\n\t    snapshots: {\n\t      type: 'number'\n\t    },\n\t    threads: {\n\t      type: 'number'\n\t    },\n\t    ignoreIdleThreads: {\n\t      type: 'boolean',\n\t      name: 'ignore_idle_threads'\n\t    },\n\t    type: {\n\t      type: 'enum',\n\t      options: [\n\t        'cpu',\n\t        'wait',\n\t        'block'\n\t      ]\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/hotthreads'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.info](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-nodes-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n\t */\n\tapi.nodes.prototype.info = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.stats](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-nodes-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at index, node or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'boolean'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'node',\n\t      options: [\n\t        'indices',\n\t        'node',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.usage](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-nodes-usage.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.usage = ca({\n\t  params: {\n\t    human: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/usage/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'rest_actions'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/usage',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/usage/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'rest_actions'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/usage'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [ping](http://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.ping = ca({\n\t  url: {\n\t    fmt: '/'\n\t  },\n\t  requestTimeout: 3000,\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [putScript](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.context - Script context\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.putScript = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    context: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_scripts/<%=id%>/<%=context%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        },\n\t        context: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_scripts/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [rankEval](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-rank-eval.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.rankEval = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_rank_eval',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_rank_eval',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_rank_eval'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [reindex](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the reindex is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t */\n\tapi.reindex = ca({\n\t  params: {\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [reindexRethrottle](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - The task id to rethrottle\n\t */\n\tapi.reindexRethrottle = ca({\n\t  params: {\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      required: true,\n\t      name: 'requests_per_second'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex/<%=taskId%>/_rethrottle',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [renderSearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n\t */\n\tapi.renderSearchTemplate = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_render/template/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_render/template'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [scroll](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n\t */\n\tapi.scroll = ca({\n\t  params: {\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    scrollId: {\n\t      type: 'string',\n\t      name: 'scroll_id'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [search](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.docvalueFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n\t * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n\t * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n\t * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.trackTotalHits - Indicate if the number of documents that match the query should be tracked\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-number,`Number`>>} [params.batchedReduceSize=512] - The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.\n\t * @param {<<api-param-type-number,`Number`>>} [params.maxConcurrentShardRequests=The default grows with the number of nodes in the cluster but is at most 256.] - The number of concurrent shard requests this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests\n\t * @param {<<api-param-type-number,`Number`>>} [params.preFilterShardSize=128] - A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it's rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.search = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    docvalueFields: {\n\t      type: 'list',\n\t      name: 'docvalue_fields'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    suggestField: {\n\t      type: 'string',\n\t      name: 'suggest_field'\n\t    },\n\t    suggestMode: {\n\t      type: 'enum',\n\t      'default': 'missing',\n\t      options: [\n\t        'missing',\n\t        'popular',\n\t        'always'\n\t      ],\n\t      name: 'suggest_mode'\n\t    },\n\t    suggestSize: {\n\t      type: 'number',\n\t      name: 'suggest_size'\n\t    },\n\t    suggestText: {\n\t      type: 'string',\n\t      name: 'suggest_text'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    trackScores: {\n\t      type: 'boolean',\n\t      name: 'track_scores'\n\t    },\n\t    trackTotalHits: {\n\t      type: 'boolean',\n\t      name: 'track_total_hits'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    batchedReduceSize: {\n\t      type: 'number',\n\t      'default': 512,\n\t      name: 'batched_reduce_size'\n\t    },\n\t    maxConcurrentShardRequests: {\n\t      type: 'number',\n\t      'default': 'The default grows with the number of nodes in the cluster but is at most 256.',\n\t      name: 'max_concurrent_shard_requests'\n\t    },\n\t    preFilterShardSize: {\n\t      type: 'number',\n\t      'default': 128,\n\t      name: 'pre_filter_shard_size'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchShards](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.searchShards = ca({\n\t  params: {\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_search_shards',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search_shards'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.profile - Specify whether to profile the query execution\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.searchTemplate = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    profile: {\n\t      type: 'boolean'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/template'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.snapshot = namespace();\n\n\t/**\n\t * Perform a [snapshot.create](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.create = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.createRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.createRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    verify: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.delete](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype['delete'] = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.deleteRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.deleteRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.get](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Whether to show verbose snapshot info or only show the basic info found in the repository index blob\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.get = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    verbose: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [snapshot.getRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.getRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.restore](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.restore = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.status](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.status = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        },\n\t        snapshot: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/_status'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.verifyRepository](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.verifyRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/_verify',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\tapi.tasks = namespace();\n\n\t/**\n\t * Perform a [tasks.cancel](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodes - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Cancel tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTaskId - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Cancel the task with specified task id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.cancel = ca({\n\t  params: {\n\t    nodes: {\n\t      type: 'list'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTaskId: {\n\t      type: 'string',\n\t      name: 'parent_task_id'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_tasks/<%=taskId%>/_cancel',\n\t      req: {\n\t        taskId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_tasks/_cancel'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [tasks.get](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Return the task with specified id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.get = ca({\n\t  params: {\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks/<%=taskId%>',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [tasks.list](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodes - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTaskId - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.groupBy=nodes] - Group tasks by nodes or parent/child relationships\n\t */\n\tapi.tasks.prototype.list = ca({\n\t  params: {\n\t    nodes: {\n\t      type: 'list'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTaskId: {\n\t      type: 'string',\n\t      name: 'parent_task_id'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    groupBy: {\n\t      type: 'enum',\n\t      'default': 'nodes',\n\t      options: [\n\t        'nodes',\n\t        'parents',\n\t        'none'\n\t      ],\n\t      name: 'group_by'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [termvectors](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n\t */\n\tapi.termvectors = ca({\n\t  params: {\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [update](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-update.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: painless)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.update = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    lang: {\n\t      type: 'string'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    retryOnConflict: {\n\t      type: 'number',\n\t      name: 'retry_on_conflict'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [updateByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-update-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the update by query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - Ingest pipeline to set on index requests made by this action. (default: none)\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.versionType - Should the document increment the version number (internal) on hit or not (reindex)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the update by query operation is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.updateByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    versionType: {\n\t      type: 'boolean',\n\t      name: 'version_type'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar ca = __webpack_require__(46).makeFactoryWithModifier(function (spec) {\n\t  return __webpack_require__(4).merge(spec, {\n\t    params: {\n\t      filterPath: {\n\t        type: 'list',\n\t        name: 'filter_path'\n\t      }\n\t    }\n\t  });\n\t});\n\tvar namespace = __webpack_require__(46).namespaceFactory;\n\tvar api = module.exports = {};\n\n\tapi._namespaces = ['cat', 'cluster', 'indices', 'ingest', 'nodes', 'snapshot', 'tasks'];\n\n\t/**\n\t * Perform a [bulk](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - Default list of fields to exclude from the returned _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - Default list of fields to extract and return from the _source field, can be overridden on each sub-request\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n\t */\n\tapi.bulk = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    type: {\n\t      type: 'string'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_bulk',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_bulk'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.cat = namespace();\n\n\t/**\n\t * Perform a [cat.aliases](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.cat.prototype.aliases = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/aliases/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/aliases'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.allocation](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-allocation.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n\t */\n\tapi.cat.prototype.allocation = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/allocation/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/allocation'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.count](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.count = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/count/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/count'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.fielddata](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n\t */\n\tapi.cat.prototype.fielddata = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/fielddata/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/fielddata'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.health](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.health = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    ts: {\n\t      type: 'boolean',\n\t      'default': true\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/health'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.help](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t */\n\tapi.cat.prototype.help = ca({\n\t  params: {\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.indices](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-indices.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-string,`String`>>} params.health - A health status (\"green\", \"yellow\", or \"red\" to filter only indices matching the specified health status\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.indices = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'm',\n\t        'g'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    health: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ]\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    pri: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/indices/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/indices'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.master](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-master.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.master = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/master'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodeattrs](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodeattrs.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodeattrs = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodeattrs'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.nodes](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodes.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Return the full node ID instead of the shortened version (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.nodes = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    fullId: {\n\t      type: 'boolean',\n\t      name: 'full_id'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/nodes'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-pending-tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.pendingTasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.plugins](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.plugins = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/plugins'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.recovery = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/recovery/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.repositories](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-repositories.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.repositories = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/repositories'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.segments](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.segments = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/segments/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.shards](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n\t */\n\tapi.cat.prototype.shards = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    bytes: {\n\t      type: 'enum',\n\t      options: [\n\t        'b',\n\t        'k',\n\t        'kb',\n\t        'm',\n\t        'mb',\n\t        'g',\n\t        'gb',\n\t        't',\n\t        'tb',\n\t        'p',\n\t        'pb'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/shards/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/shards'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.snapshots](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Set to true to ignore unavailable snapshots\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n\t */\n\tapi.cat.prototype.snapshots = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'ignore_unavailable'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/snapshots/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/snapshots'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.tasks](https://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-number,`Number`>>} params.parentTask - Return tasks with specified parent task id. Set to -1 to return all.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t */\n\tapi.cat.prototype.tasks = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    nodeId: {\n\t      type: 'list',\n\t      name: 'node_id'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTask: {\n\t      type: 'number',\n\t      name: 'parent_task'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cat/tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cat.templates](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>} params.name - A pattern that returned template names must match\n\t */\n\tapi.cat.prototype.templates = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/templates/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/templates'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cat.threadPool](https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n\t * @param {<<api-param-type-string,`String`>>} params.size - The multiplier in which to display values\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.threadPoolPatterns - A comma-separated list of regular-expressions to filter the thread pools in the output\n\t */\n\tapi.cat.prototype.threadPool = ca({\n\t  params: {\n\t    format: {\n\t      type: 'string'\n\t    },\n\t    size: {\n\t      type: 'enum',\n\t      options: [\n\t        '',\n\t        'k',\n\t        'm',\n\t        'g',\n\t        't',\n\t        'p'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    h: {\n\t      type: 'list'\n\t    },\n\t    help: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    s: {\n\t      type: 'list'\n\t    },\n\t    v: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cat/thread_pool/<%=threadPoolPatterns%>',\n\t      req: {\n\t        threadPoolPatterns: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cat/thread_pool'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [clearScroll](https://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n\t */\n\tapi.clearScroll = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\tapi.cluster = namespace();\n\n\t/**\n\t * Perform a [cluster.allocationExplain](https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-allocation-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeYesDecisions - Return 'YES' decisions in explanation (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDiskInfo - Return information about disk usage and shard sizes (default: false)\n\t */\n\tapi.cluster.prototype.allocationExplain = ca({\n\t  params: {\n\t    includeYesDecisions: {\n\t      type: 'boolean',\n\t      name: 'include_yes_decisions'\n\t    },\n\t    includeDiskInfo: {\n\t      type: 'boolean',\n\t      name: 'include_disk_info'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/allocation/explain'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default clusters setting.\n\t */\n\tapi.cluster.prototype.getSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.health](https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-health.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n\t * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n\t * @param {<<api-param-type-string,`String`>>} params.waitForEvents - Wait until all currently queued events with the given priority are processed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForNoRelocatingShards - Whether to wait until there are no relocating shards in the cluster\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForNoInitializingShards - Whether to wait until there are no initializing shards in the cluster\n\t * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n\t */\n\tapi.cluster.prototype.health = ca({\n\t  params: {\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'cluster',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForNodes: {\n\t      type: 'string',\n\t      name: 'wait_for_nodes'\n\t    },\n\t    waitForEvents: {\n\t      type: 'enum',\n\t      options: [\n\t        'immediate',\n\t        'urgent',\n\t        'high',\n\t        'normal',\n\t        'low',\n\t        'languid'\n\t      ],\n\t      name: 'wait_for_events'\n\t    },\n\t    waitForNoRelocatingShards: {\n\t      type: 'boolean',\n\t      name: 'wait_for_no_relocating_shards'\n\t    },\n\t    waitForNoInitializingShards: {\n\t      type: 'boolean',\n\t      name: 'wait_for_no_initializing_shards'\n\t    },\n\t    waitForStatus: {\n\t      type: 'enum',\n\t      'default': null,\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red'\n\t      ],\n\t      name: 'wait_for_status'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/health/<%=index%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/health'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-pending.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.cluster.prototype.pendingTasks = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/pending_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.putSettings = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/settings'\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [cluster.remoteInfo](https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-remote-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.cluster.prototype.remoteInfo = ca({\n\t  url: {\n\t    fmt: '/_remote/info'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [cluster.reroute](https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-reroute.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.retryFailed - Retries allocation of shards that are blocked due to too many subsequent allocation failures\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t */\n\tapi.cluster.prototype.reroute = ca({\n\t  params: {\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    retryFailed: {\n\t      type: 'boolean',\n\t      name: 'retry_failed'\n\t    },\n\t    metric: {\n\t      type: 'list',\n\t      options: [\n\t        '_all',\n\t        'blocks',\n\t        'metadata',\n\t        'nodes',\n\t        'routing_table',\n\t        'master_node',\n\t        'version'\n\t      ]\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_cluster/reroute'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [cluster.state](https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-state.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t */\n\tapi.cluster.prototype.state = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        },\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'blocks',\n\t            'metadata',\n\t            'nodes',\n\t            'routing_table',\n\t            'routing_nodes',\n\t            'master_node',\n\t            'version'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/state'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [cluster.stats](https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.cluster.prototype.stats = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cluster/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [count](https://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum count for each shard, upon reaching which the query execution will terminate early\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n\t */\n\tapi.count = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    minScore: {\n\t      type: 'number',\n\t      name: 'min_score'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_count',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_count'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [create](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_create',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [delete](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi['delete'] = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [deleteByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the delete-by-query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the delete-by-query is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle for this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.deleteByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_delete_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [deleteScript](https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.deleteScript = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_scripts/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [exists](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.exists = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [existsSource](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.existsSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [explain](https://www.elastic.co/guide/en/elasticsearch/reference/master/search-explain.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.explain = ca({\n\t  params: {\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [fieldCaps](https://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-caps.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of field names\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.fieldCaps = ca({\n\t  params: {\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_field_caps',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_field_caps'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [get](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n\t */\n\tapi.get = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getScript](https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.getScript = ca({\n\t  url: {\n\t    fmt: '/_scripts/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [getSource](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n\t */\n\tapi.getSource = ca({\n\t  params: {\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [index](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.index = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    opType: {\n\t      type: 'enum',\n\t      'default': 'index',\n\t      options: [\n\t        'index',\n\t        'create'\n\t      ],\n\t      name: 'op_type'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.indices = namespace();\n\n\t/**\n\t * Perform a [indices.analyze](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n\t * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n\t */\n\tapi.indices.prototype.analyze = ca({\n\t  params: {\n\t    index: {\n\t      type: 'string'\n\t    },\n\t    preferLocal: {\n\t      type: 'boolean',\n\t      name: 'prefer_local'\n\t    },\n\t    format: {\n\t      type: 'enum',\n\t      'default': 'detailed',\n\t      options: [\n\t        'detailed',\n\t        'text'\n\t      ]\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_analyze',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_analyze'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.clearCache](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Clear request cache\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n\t */\n\tapi.indices.prototype.clearCache = ca({\n\t  params: {\n\t    fieldData: {\n\t      type: 'boolean',\n\t      name: 'field_data'\n\t    },\n\t    fielddata: {\n\t      type: 'boolean'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    query: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    index: {\n\t      type: 'list'\n\t    },\n\t    recycler: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    request: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_cache/clear',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_cache/clear'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.close](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n\t */\n\tapi.indices.prototype.close = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_close',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.create](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-create-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for before the operation returns.\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t */\n\tapi.indices.prototype.create = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.delete](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-delete-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n\t */\n\tapi.indices.prototype['delete'] = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteAlias](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n\t */\n\tapi.indices.prototype.deleteAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.deleteTemplate = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [indices.exists](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t */\n\tapi.indices.prototype.exists = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsAlias](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.existsAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.existsTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.existsType](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-types-exists.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n\t */\n\tapi.indices.prototype.existsType = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_mapping/<%=type%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      type: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [indices.flush](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flush = ca({\n\t  params: {\n\t    force: {\n\t      type: 'boolean'\n\t    },\n\t    waitIfOngoing: {\n\t      type: 'boolean',\n\t      name: 'wait_if_ongoing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.flushSynced](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n\t */\n\tapi.indices.prototype.flushSynced = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_flush/synced',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_flush/synced'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.forcemerge](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-forcemerge.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.forcemerge = ca({\n\t  params: {\n\t    flush: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    maxNumSegments: {\n\t      type: 'number',\n\t      name: 'max_num_segments'\n\t    },\n\t    onlyExpungeDeletes: {\n\t      type: 'boolean',\n\t      name: 'only_expunge_deletes'\n\t    },\n\t    waitForMerge: {\n\t      type: 'boolean',\n\t      name: 'wait_for_merge'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_forcemerge',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_forcemerge'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.get](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t */\n\tapi.indices.prototype.get = ca({\n\t  params: {\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [indices.getAlias](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n\t */\n\tapi.indices.prototype.getAlias = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'all',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_alias/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_alias',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_alias'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getFieldMapping](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n\t */\n\tapi.indices.prototype.getFieldMapping = ca({\n\t  params: {\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      name: 'include_defaults'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        },\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/field/<%=fields%>',\n\t      req: {\n\t        fields: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getMapping](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n\t */\n\tapi.indices.prototype.getMapping = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mapping',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n\t */\n\tapi.indices.prototype.getSettings = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': [\n\t        'open',\n\t        'closed'\n\t      ],\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    includeDefaults: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_defaults'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings/<%=name%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n\t */\n\tapi.indices.prototype.getTemplate = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_template/<%=name%>',\n\t      req: {\n\t        name: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_template'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.getUpgrade](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.getUpgrade = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.open](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of active shards to wait for before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n\t */\n\tapi.indices.prototype.open = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'closed',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_open',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.putAlias](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n\t */\n\tapi.indices.prototype.putAlias = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_alias/<%=name%>',\n\t    req: {\n\t      index: {\n\t        type: 'list'\n\t      },\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putMapping](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n\t */\n\tapi.indices.prototype.putMapping = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_mapping/<%=type%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mapping/<%=type%>',\n\t      req: {\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-update-settings.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.preserveExisting - Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.putSettings = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    preserveExisting: {\n\t      type: 'boolean',\n\t      name: 'preserve_existing'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_settings',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_settings'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n\t */\n\tapi.indices.prototype.putTemplate = ca({\n\t  params: {\n\t    order: {\n\t      type: 'number'\n\t    },\n\t    create: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_template/<%=name%>',\n\t    req: {\n\t      name: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [indices.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.recovery = ca({\n\t  params: {\n\t    detailed: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    activeOnly: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'active_only'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_recovery',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_recovery'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.refresh](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.refresh = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_refresh',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_refresh'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.rollover](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-rollover-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the newly created rollover index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.alias - The name of the alias to rollover\n\t * @param {<<api-param-type-string,`String`>>} params.newIndex - The name of the rollover index\n\t */\n\tapi.indices.prototype.rollover = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    dryRun: {\n\t      type: 'boolean',\n\t      name: 'dry_run'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=alias%>/_rollover/<%=newIndex%>',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        },\n\t        newIndex: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=alias%>/_rollover',\n\t      req: {\n\t        alias: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.segments](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-segments.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.segments = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_segments',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_segments'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shardStores](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shards-stores.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.shardStores = ca({\n\t  params: {\n\t    status: {\n\t      type: 'list',\n\t      options: [\n\t        'green',\n\t        'yellow',\n\t        'red',\n\t        'all'\n\t      ]\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_shard_stores',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_shard_stores'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.shrink](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shrink-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to shrink\n\t * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to shrink into\n\t */\n\tapi.indices.prototype.shrink = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_shrink/<%=target%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      target: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.split](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-split-index.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to split\n\t * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to split into\n\t */\n\tapi.indices.prototype.split = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/_split/<%=target%>',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      target: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.stats](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n\t */\n\tapi.indices.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'list'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'indices',\n\t      options: [\n\t        'cluster',\n\t        'indices',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_stats/<%=metric%>',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_stats',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [indices.updateAliases](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t */\n\tapi.indices.prototype.updateAliases = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_aliases'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.upgrade](https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.indices.prototype.upgrade = ca({\n\t  params: {\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    onlyAncientSegments: {\n\t      type: 'boolean',\n\t      name: 'only_ancient_segments'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_upgrade',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_upgrade'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [indices.validateQuery](https://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allShards - Execute validation on all shards instead of one random shard per index\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n\t */\n\tapi.indices.prototype.validateQuery = ca({\n\t  params: {\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    rewrite: {\n\t      type: 'boolean'\n\t    },\n\t    allShards: {\n\t      type: 'boolean',\n\t      name: 'all_shards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_validate/query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_validate/query'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [info](http://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.info = ca({\n\t  url: {\n\t    fmt: '/'\n\t  }\n\t});\n\n\tapi.ingest = namespace();\n\n\t/**\n\t * Perform a [ingest.deletePipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.deletePipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [ingest.getPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.id - Comma separated list of pipeline ids. Wildcards supported\n\t */\n\tapi.ingest.prototype.getPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [ingest.processorGrok](https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.ingest.prototype.processorGrok = ca({\n\t  url: {\n\t    fmt: '/_ingest/processor/grok'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [ingest.putPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.putPipeline = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_ingest/pipeline/<%=id%>',\n\t    req: {\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [ingest.simulate](https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Verbose mode. Display data output for each processor in executed pipeline\n\t * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n\t */\n\tapi.ingest.prototype.simulate = ca({\n\t  params: {\n\t    verbose: {\n\t      type: 'boolean',\n\t      'default': false\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_ingest/pipeline/<%=id%>/_simulate',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_ingest/pipeline/_simulate'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mget](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.mget = ca({\n\t  params: {\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    realtime: {\n\t      type: 'boolean'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mget',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mget'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearch](https://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-number,`Number`>>} [params.preFilterShardSize=128] - A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it's rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearch = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    preFilterShardSize: {\n\t      type: 'number',\n\t      'default': 128,\n\t      name: 'pre_filter_shard_size'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [msearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n\t */\n\tapi.msearchTemplate = ca({\n\t  params: {\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    maxConcurrentSearches: {\n\t      type: 'number',\n\t      name: 'max_concurrent_searches'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_msearch/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_msearch/template'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  bulkBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [mtermvectors](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t */\n\tapi.mtermvectors = ca({\n\t  params: {\n\t    ids: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_mtermvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_mtermvectors'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\tapi.nodes = namespace();\n\n\t/**\n\t * Perform a [nodes.hotThreads](https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-hot-threads.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n\t * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n\t * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.hotThreads = ca({\n\t  params: {\n\t    interval: {\n\t      type: 'time'\n\t    },\n\t    snapshots: {\n\t      type: 'number'\n\t    },\n\t    threads: {\n\t      type: 'number'\n\t    },\n\t    ignoreIdleThreads: {\n\t      type: 'boolean',\n\t      name: 'ignore_idle_threads'\n\t    },\n\t    type: {\n\t      type: 'enum',\n\t      options: [\n\t        'cpu',\n\t        'wait',\n\t        'block'\n\t      ]\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/hotthreads'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.info](https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n\t */\n\tapi.nodes.prototype.info = ca({\n\t  params: {\n\t    flatSettings: {\n\t      type: 'boolean',\n\t      name: 'flat_settings'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            'settings',\n\t            'os',\n\t            'process',\n\t            'jvm',\n\t            'thread_pool',\n\t            'transport',\n\t            'http',\n\t            'plugins',\n\t            'ingest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.stats](https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n\t * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at index, node or shard level\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.includeSegmentFileSizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.stats = ca({\n\t  params: {\n\t    completionFields: {\n\t      type: 'list',\n\t      name: 'completion_fields'\n\t    },\n\t    fielddataFields: {\n\t      type: 'list',\n\t      name: 'fielddata_fields'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    groups: {\n\t      type: 'boolean'\n\t    },\n\t    level: {\n\t      type: 'enum',\n\t      'default': 'node',\n\t      options: [\n\t        'indices',\n\t        'node',\n\t        'shards'\n\t      ]\n\t    },\n\t    types: {\n\t      type: 'list'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    includeSegmentFileSizes: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'include_segment_file_sizes'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        },\n\t        indexMetric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'completion',\n\t            'docs',\n\t            'fielddata',\n\t            'query_cache',\n\t            'flush',\n\t            'get',\n\t            'indexing',\n\t            'merge',\n\t            'request_cache',\n\t            'refresh',\n\t            'search',\n\t            'segments',\n\t            'store',\n\t            'warmer',\n\t            'suggest'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/stats',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'breaker',\n\t            'fs',\n\t            'http',\n\t            'indices',\n\t            'jvm',\n\t            'os',\n\t            'process',\n\t            'thread_pool',\n\t            'transport',\n\t            'discovery'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/stats'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [nodes.usage](https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-usage.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t */\n\tapi.nodes.prototype.usage = ca({\n\t  params: {\n\t    human: {\n\t      type: 'boolean',\n\t      'default': false\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/usage/<%=metric%>',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        },\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'rest_actions'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/<%=nodeId%>/usage',\n\t      req: {\n\t        nodeId: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/usage/<%=metric%>',\n\t      req: {\n\t        metric: {\n\t          type: 'list',\n\t          options: [\n\t            '_all',\n\t            'rest_actions'\n\t          ]\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_nodes/usage'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [ping](http://www.elastic.co/guide/) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t */\n\tapi.ping = ca({\n\t  url: {\n\t    fmt: '/'\n\t  },\n\t  requestTimeout: 3000,\n\t  method: 'HEAD'\n\t});\n\n\t/**\n\t * Perform a [putScript](https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n\t * @param {<<api-param-type-string,`String`>>} params.context - Script context\n\t * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n\t */\n\tapi.putScript = ca({\n\t  params: {\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    context: {\n\t      type: 'string'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_scripts/<%=id%>/<%=context%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        },\n\t        context: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_scripts/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'PUT'\n\t});\n\n\t/**\n\t * Perform a [rankEval](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-rank-eval.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.rankEval = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_rank_eval',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_rank_eval',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_rank_eval'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [reindex](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the reindex is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t */\n\tapi.reindex = ca({\n\t  params: {\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex'\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [reindexRethrottle](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-reindex.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - The task id to rethrottle\n\t */\n\tapi.reindexRethrottle = ca({\n\t  params: {\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      required: true,\n\t      name: 'requests_per_second'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_reindex/<%=taskId%>/_rethrottle',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [renderSearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n\t */\n\tapi.renderSearchTemplate = ca({\n\t  urls: [\n\t    {\n\t      fmt: '/_render/template/<%=id%>',\n\t      req: {\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_render/template'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [scroll](https://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n\t */\n\tapi.scroll = ca({\n\t  params: {\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    scrollId: {\n\t      type: 'string',\n\t      name: 'scroll_id'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_search/scroll/<%=scrollId%>',\n\t      req: {\n\t        scrollId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/scroll'\n\t    }\n\t  ],\n\t  paramAsBody: {\n\t    param: 'scrollId',\n\t    body: 'scroll_id'\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [search](https://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return as part of a hit\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.docvalueFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n\t * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n\t * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n\t * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.trackTotalHits - Indicate if the number of documents that match the query should be tracked\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.allowPartialSearchResults=true] - Indicate if an error should be returned if there is a partial search failure or timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-number,`Number`>>} [params.batchedReduceSize=512] - The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.\n\t * @param {<<api-param-type-number,`Number`>>} [params.maxConcurrentShardRequests=The default grows with the number of nodes in the cluster but is at most 256.] - The number of concurrent shard requests this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests\n\t * @param {<<api-param-type-number,`Number`>>} [params.preFilterShardSize=128] - A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it's rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.search = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    storedFields: {\n\t      type: 'list',\n\t      name: 'stored_fields'\n\t    },\n\t    docvalueFields: {\n\t      type: 'list',\n\t      name: 'docvalue_fields'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    suggestField: {\n\t      type: 'string',\n\t      name: 'suggest_field'\n\t    },\n\t    suggestMode: {\n\t      type: 'enum',\n\t      'default': 'missing',\n\t      options: [\n\t        'missing',\n\t        'popular',\n\t        'always'\n\t      ],\n\t      name: 'suggest_mode'\n\t    },\n\t    suggestSize: {\n\t      type: 'number',\n\t      name: 'suggest_size'\n\t    },\n\t    suggestText: {\n\t      type: 'string',\n\t      name: 'suggest_text'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    trackScores: {\n\t      type: 'boolean',\n\t      name: 'track_scores'\n\t    },\n\t    trackTotalHits: {\n\t      type: 'boolean',\n\t      name: 'track_total_hits'\n\t    },\n\t    allowPartialSearchResults: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'allow_partial_search_results'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    batchedReduceSize: {\n\t      type: 'number',\n\t      'default': 512,\n\t      name: 'batched_reduce_size'\n\t    },\n\t    maxConcurrentShardRequests: {\n\t      type: 'number',\n\t      'default': 'The default grows with the number of nodes in the cluster but is at most 256.',\n\t      name: 'max_concurrent_shard_requests'\n\t    },\n\t    preFilterShardSize: {\n\t      type: 'number',\n\t      'default': 128,\n\t      name: 'pre_filter_shard_size'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchShards](https://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t */\n\tapi.searchShards = ca({\n\t  params: {\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/_search_shards',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search_shards'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [searchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.profile - Specify whether to profile the query execution\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.typedKeys - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.searchTemplate = ca({\n\t  params: {\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'query_and_fetch',\n\t        'dfs_query_then_fetch',\n\t        'dfs_query_and_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    explain: {\n\t      type: 'boolean'\n\t    },\n\t    profile: {\n\t      type: 'boolean'\n\t    },\n\t    typedKeys: {\n\t      type: 'boolean',\n\t      name: 'typed_keys'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_search/template',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_search/template'\n\t    }\n\t  ],\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\tapi.snapshot = namespace();\n\n\t/**\n\t * Perform a [snapshot.create](https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.create = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.createRepository](https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.createRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    verify: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.delete](https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype['delete'] = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.deleteRepository](https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.deleteRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>',\n\t    req: {\n\t      repository: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  },\n\t  method: 'DELETE'\n\t});\n\n\t/**\n\t * Perform a [snapshot.get](https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Whether to show verbose snapshot info or only show the basic info found in the repository index blob\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.get = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    verbose: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'list'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [snapshot.getRepository](https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n\t */\n\tapi.snapshot.prototype.getRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    local: {\n\t      type: 'boolean'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>',\n\t      req: {\n\t        repository: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.restore](https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n\t */\n\tapi.snapshot.prototype.restore = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      },\n\t      snapshot: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [snapshot.status](https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n\t */\n\tapi.snapshot.prototype.status = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        },\n\t        snapshot: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/<%=repository%>/_status',\n\t      req: {\n\t        repository: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_snapshot/_status'\n\t    }\n\t  ]\n\t});\n\n\t/**\n\t * Perform a [snapshot.verifyRepository](https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n\t */\n\tapi.snapshot.prototype.verifyRepository = ca({\n\t  params: {\n\t    masterTimeout: {\n\t      type: 'time',\n\t      name: 'master_timeout'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_snapshot/<%=repository%>/_verify',\n\t    req: {\n\t      repository: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  method: 'POST'\n\t});\n\n\tapi.tasks = namespace();\n\n\t/**\n\t * Perform a [tasks.cancel](https://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodes - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Cancel tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTaskId - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Cancel the task with specified task id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.cancel = ca({\n\t  params: {\n\t    nodes: {\n\t      type: 'list'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTaskId: {\n\t      type: 'string',\n\t      name: 'parent_task_id'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/_tasks/<%=taskId%>/_cancel',\n\t      req: {\n\t        taskId: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/_tasks/_cancel'\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [tasks.get](https://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.taskId - Return the task with specified id (node_id:task_number)\n\t */\n\tapi.tasks.prototype.get = ca({\n\t  params: {\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks/<%=taskId%>',\n\t    req: {\n\t      taskId: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  }\n\t});\n\n\t/**\n\t * Perform a [tasks.list](https://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodes - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n\t * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n\t * @param {<<api-param-type-string,`String`>>} params.parentTaskId - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.groupBy=nodes] - Group tasks by nodes or parent/child relationships\n\t */\n\tapi.tasks.prototype.list = ca({\n\t  params: {\n\t    nodes: {\n\t      type: 'list'\n\t    },\n\t    actions: {\n\t      type: 'list'\n\t    },\n\t    detailed: {\n\t      type: 'boolean'\n\t    },\n\t    parentNode: {\n\t      type: 'string',\n\t      name: 'parent_node'\n\t    },\n\t    parentTaskId: {\n\t      type: 'string',\n\t      name: 'parent_task_id'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      name: 'wait_for_completion'\n\t    },\n\t    groupBy: {\n\t      type: 'enum',\n\t      'default': 'nodes',\n\t      options: [\n\t        'nodes',\n\t        'parents',\n\t        'none'\n\t      ],\n\t      name: 'group_by'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/_tasks'\n\t  }\n\t});\n\n\t/**\n\t * Perform a [termvectors](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n\t * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n\t * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n\t */\n\tapi.termvectors = ca({\n\t  params: {\n\t    termStatistics: {\n\t      type: 'boolean',\n\t      'default': false,\n\t      required: false,\n\t      name: 'term_statistics'\n\t    },\n\t    fieldStatistics: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false,\n\t      name: 'field_statistics'\n\t    },\n\t    fields: {\n\t      type: 'list',\n\t      required: false\n\t    },\n\t    offsets: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    positions: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    payloads: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      required: false\n\t    },\n\t    preference: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    routing: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    parent: {\n\t      type: 'string',\n\t      required: false\n\t    },\n\t    realtime: {\n\t      type: 'boolean',\n\t      required: false\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'external',\n\t        'external_gte',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        },\n\t        id: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_termvectors',\n\t      req: {\n\t        index: {\n\t          type: 'string'\n\t        },\n\t        type: {\n\t          type: 'string'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [update](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: painless)\n\t * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n\t * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n\t * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n\t * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n\t * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n\t * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n\t * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n\t * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n\t * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n\t */\n\tapi.update = ca({\n\t  params: {\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    fields: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    lang: {\n\t      type: 'string'\n\t    },\n\t    parent: {\n\t      type: 'string'\n\t    },\n\t    refresh: {\n\t      type: 'enum',\n\t      options: [\n\t        'true',\n\t        'false',\n\t        'wait_for',\n\t        ''\n\t      ]\n\t    },\n\t    retryOnConflict: {\n\t      type: 'number',\n\t      name: 'retry_on_conflict'\n\t    },\n\t    routing: {\n\t      type: 'string'\n\t    },\n\t    timeout: {\n\t      type: 'time'\n\t    },\n\t    version: {\n\t      type: 'number'\n\t    },\n\t    versionType: {\n\t      type: 'enum',\n\t      options: [\n\t        'internal',\n\t        'force'\n\t      ],\n\t      name: 'version_type'\n\t    }\n\t  },\n\t  url: {\n\t    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n\t    req: {\n\t      index: {\n\t        type: 'string'\n\t      },\n\t      type: {\n\t        type: 'string'\n\t      },\n\t      id: {\n\t        type: 'string'\n\t      }\n\t    }\n\t  },\n\t  needBody: true,\n\t  method: 'POST'\n\t});\n\n\t/**\n\t * Perform a [updateByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update-by-query.html) request\n\t *\n\t * @param {Object} params - An object with parameters used to carry out this action\n\t * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n\t * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n\t * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n\t * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n\t * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the update by query hits version conflicts?\n\t * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n\t * @param {<<api-param-type-string,`String`>>} params.pipeline - Ingest pipeline to set on index requests made by this action. (default: none)\n\t * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n\t * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n\t * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n\t * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n\t * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.versionType - Should the document increment the version number (internal) on hit or not (reindex)\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n\t * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n\t * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n\t * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n\t * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n\t * @param {<<api-param-type-boolean,`Boolean`>>} [params.waitForCompletion=true] - Should the request should block until the update by query operation is complete.\n\t * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n\t * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n\t * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n\t */\n\tapi.updateByQuery = ca({\n\t  params: {\n\t    analyzer: {\n\t      type: 'string'\n\t    },\n\t    analyzeWildcard: {\n\t      type: 'boolean',\n\t      name: 'analyze_wildcard'\n\t    },\n\t    defaultOperator: {\n\t      type: 'enum',\n\t      'default': 'OR',\n\t      options: [\n\t        'AND',\n\t        'OR'\n\t      ],\n\t      name: 'default_operator'\n\t    },\n\t    df: {\n\t      type: 'string'\n\t    },\n\t    from: {\n\t      type: 'number'\n\t    },\n\t    ignoreUnavailable: {\n\t      type: 'boolean',\n\t      name: 'ignore_unavailable'\n\t    },\n\t    allowNoIndices: {\n\t      type: 'boolean',\n\t      name: 'allow_no_indices'\n\t    },\n\t    conflicts: {\n\t      type: 'enum',\n\t      'default': 'abort',\n\t      options: [\n\t        'abort',\n\t        'proceed'\n\t      ]\n\t    },\n\t    expandWildcards: {\n\t      type: 'enum',\n\t      'default': 'open',\n\t      options: [\n\t        'open',\n\t        'closed',\n\t        'none',\n\t        'all'\n\t      ],\n\t      name: 'expand_wildcards'\n\t    },\n\t    lenient: {\n\t      type: 'boolean'\n\t    },\n\t    pipeline: {\n\t      type: 'string'\n\t    },\n\t    preference: {\n\t      type: 'string'\n\t    },\n\t    q: {\n\t      type: 'string'\n\t    },\n\t    routing: {\n\t      type: 'list'\n\t    },\n\t    scroll: {\n\t      type: 'time'\n\t    },\n\t    searchType: {\n\t      type: 'enum',\n\t      options: [\n\t        'query_then_fetch',\n\t        'dfs_query_then_fetch'\n\t      ],\n\t      name: 'search_type'\n\t    },\n\t    searchTimeout: {\n\t      type: 'time',\n\t      name: 'search_timeout'\n\t    },\n\t    size: {\n\t      type: 'number'\n\t    },\n\t    sort: {\n\t      type: 'list'\n\t    },\n\t    _source: {\n\t      type: 'list'\n\t    },\n\t    _sourceExclude: {\n\t      type: 'list',\n\t      name: '_source_exclude'\n\t    },\n\t    _sourceInclude: {\n\t      type: 'list',\n\t      name: '_source_include'\n\t    },\n\t    terminateAfter: {\n\t      type: 'number',\n\t      name: 'terminate_after'\n\t    },\n\t    stats: {\n\t      type: 'list'\n\t    },\n\t    version: {\n\t      type: 'boolean'\n\t    },\n\t    versionType: {\n\t      type: 'boolean',\n\t      name: 'version_type'\n\t    },\n\t    requestCache: {\n\t      type: 'boolean',\n\t      name: 'request_cache'\n\t    },\n\t    refresh: {\n\t      type: 'boolean'\n\t    },\n\t    timeout: {\n\t      type: 'time',\n\t      'default': '1m'\n\t    },\n\t    waitForActiveShards: {\n\t      type: 'string',\n\t      name: 'wait_for_active_shards'\n\t    },\n\t    scrollSize: {\n\t      type: 'number',\n\t      name: 'scroll_size'\n\t    },\n\t    waitForCompletion: {\n\t      type: 'boolean',\n\t      'default': true,\n\t      name: 'wait_for_completion'\n\t    },\n\t    requestsPerSecond: {\n\t      type: 'number',\n\t      'default': 0,\n\t      name: 'requests_per_second'\n\t    },\n\t    slices: {\n\t      type: 'number',\n\t      'default': 1\n\t    }\n\t  },\n\t  urls: [\n\t    {\n\t      fmt: '/<%=index%>/<%=type%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        },\n\t        type: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    },\n\t    {\n\t      fmt: '/<%=index%>/_update_by_query',\n\t      req: {\n\t        index: {\n\t          type: 'list'\n\t        }\n\t      }\n\t    }\n\t  ],\n\t  method: 'POST'\n\t});\n\n\n/***/ })\n/******/ ])\n});\n;\n}());\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/elasticsearch-browser/elasticsearch.js\n// module id = Ci8L\n// module chunks = 0","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_has.js\n// module id = D2L2\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = DuR2\n// module chunks = 0","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_is-object.js\n// module id = EqjI\n// module chunks = 0","var core = module.exports = { version: '2.5.3' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_core.js\n// module id = FeBl\n// module chunks = 0","// Production steps of ECMA-262, Edition 6, 22.1.2.1\n// es6-ified by @alexsasharegan\nif (!Array.from) {\n  Array.from = function () {\n    var toStr = Object.prototype.toString;\n    var isCallable = function isCallable(fn) {\n      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n    };\n    var toInteger = function toInteger(value) {\n      var number = Number(value);\n      if (isNaN(number)) {\n        return 0;\n      }\n      if (number === 0 || !isFinite(number)) {\n        return number;\n      }\n      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n    };\n    var maxSafeInteger = Math.pow(2, 53) - 1;\n    var toLength = function toLength(value) {\n      return Math.min(Math.max(toInteger(value), 0), maxSafeInteger);\n    };\n\n    // The length property of the from method is 1.\n    return function from(arrayLike /*, mapFn, thisArg */) {\n      // 1. Let C be the this value.\n      var C = this;\n\n      // 2. Let items be ToObject(arrayLike).\n      var items = Object(arrayLike);\n\n      // 3. ReturnIfAbrupt(items).\n      if (arrayLike == null) {\n        throw new TypeError('Array.from requires an array-like object - not null or undefined');\n      }\n\n      // 4. If mapfn is undefined, then let mapping be false.\n      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n      var T = void 0;\n\n      if (typeof mapFn !== 'undefined') {\n        // 5. else\n        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n        if (!isCallable(mapFn)) {\n          throw new TypeError('Array.from: when provided, the second argument must be a function');\n        }\n\n        // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 2) {\n          T = arguments[2];\n        }\n      }\n\n      // 10. Let lenValue be Get(items, \"length\").\n      // 11. Let len be ToLength(lenValue).\n      var len = toLength(items.length);\n\n      // 13. If IsConstructor(C) is true, then\n      // 13. a. Let A be the result of calling the [[Construct]] internal method\n      // of C with an argument list containing the single item len.\n      // 14. a. Else, Let A be ArrayCreate(len).\n      var A = isCallable(C) ? Object(new C(len)) : new Array(len);\n\n      // 16. Let k be 0.\n      var k = 0;\n      // 17. Repeat, while k < len… (also steps a - h)\n      var kValue = void 0;\n      while (k < len) {\n        kValue = items[k];\n        if (mapFn) {\n          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n        } else {\n          A[k] = kValue;\n        }\n        k += 1;\n      }\n      // 18. Let putStatus be Put(A, \"length\", len, true).\n      A.length = len;\n      // 20. Return A.\n      return A;\n    };\n  }();\n}\n\n// https://tc39.github.io/ecma262/#sec-array.prototype.find\n// Needed for IE support\nif (!Array.prototype.find) {\n  // eslint-disable-next-line no-extend-native\n  Object.defineProperty(Array.prototype, 'find', {\n    value: function value(predicate) {\n      // 1. Let O be ? ToObject(this value).\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      }\n\n      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n      var thisArg = arguments[1];\n\n      // 5. Let k be 0.\n      var k = 0;\n\n      // 6. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kValue be ? Get(O, Pk).\n        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n        // d. If testResult is true, return kValue.\n        var kValue = o[k];\n        if (predicate.call(thisArg, kValue, k, o)) {\n          return kValue;\n        }\n        // e. Increase k by 1.\n        k++;\n      }\n\n      // 7. Return undefined.\n      return undefined;\n    }\n  });\n}\n\nif (!Array.isArray) {\n  Array.isArray = function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n}\n\n// Static\nexport var from = Array.from;\nexport var isArray = Array.isArray;\n\n// Instance\nexport var arrayIncludes = function arrayIncludes(array, value) {\n  return array.indexOf(value) !== -1;\n};\nexport var arrayFind = function arrayFind(array, fn, thisArg) {\n  return array.find(fn, thisArg);\n};\nexport function concat() {\n  return Array.prototype.concat.apply([], arguments);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap-vue/es/utils/array.js\n// module id = GnGf\n// module chunks = 0","\"use strict\";\n\nexports.__esModule = true;\n\nvar _from = require(\"../core-js/array/from\");\n\nvar _from2 = _interopRequireDefault(_from);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return (0, _from2.default)(arr);\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/helpers/toConsumableArray.js\n// module id = Gu7T\n// module chunks = 0","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-keys-internal.js\n// module id = Ibhu\n// module chunks = 0","import { from as arrayFrom } from './array';\n\n// Determine if an element is an HTML Element\nexport var isElement = function isElement(el) {\n  return el && el.nodeType === Node.ELEMENT_NODE;\n};\n\n// Determine if an HTML element is visible - Faster than CSS check\nexport var isVisible = function isVisible(el) {\n  return isElement(el) && document.body.contains(el) && el.getBoundingClientRect().height > 0 && el.getBoundingClientRect().width > 0;\n};\n\n// Determine if an element is disabled\nexport var isDisabled = function isDisabled(el) {\n  return !isElement(el) || el.disabled || el.classList.contains('disabled') || Boolean(el.getAttribute('disabled'));\n};\n\n// Cause/wait-for an element to reflow it's content (adjusting it's height/width)\nexport var reflow = function reflow(el) {\n  // requsting an elements offsetHight will trigger a reflow of the element content\n  return isElement(el) && el.offsetHeight;\n};\n\n// Select all elements matching selector. Returns [] if none found\nexport var selectAll = function selectAll(selector, root) {\n  if (!isElement(root)) {\n    root = document;\n  }\n  return arrayFrom(root.querySelectorAll(selector));\n};\n\n// Select a single element, returns null if not found\nexport var select = function select(selector, root) {\n  if (!isElement(root)) {\n    root = document;\n  }\n  return root.querySelector(selector) || null;\n};\n\n// Determine if an element matches a selector\nexport var matches = function matches(el, selector) {\n  if (!isElement(el)) {\n    return false;\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n  // Prefer native implementations over polyfill function\n  var proto = Element.prototype;\n  var Matches = proto.matches || proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector ||\n  /* istanbul ignore next */\n  function (sel) {\n    var element = this;\n    var m = selectAll(sel, element.document || element.ownerDocument);\n    var i = m.length;\n    // eslint-disable-next-line no-empty\n    while (--i >= 0 && m.item(i) !== element) {}\n    return i > -1;\n  };\n\n  return Matches.call(el, selector);\n};\n\n// Finds closest element matching selector. Returns null if not found\nexport var closest = function closest(selector, root) {\n  if (!isElement(root)) {\n    return null;\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n  // Since we dont support IE < 10, we can use the \"Matches\" version of the polyfill for speed\n  // Prefer native implementation over polyfill function\n  var Closest = Element.prototype.closest ||\n  /* istanbul ignore next */\n  function (sel) {\n    var element = this;\n    if (!document.documentElement.contains(element)) {\n      return null;\n    }\n    do {\n      // Use our \"patched\" matches function\n      if (matches(element, sel)) {\n        return element;\n      }\n      element = element.parentElement;\n    } while (element !== null);\n    return null;\n  };\n\n  var el = Closest.call(root, selector);\n  // Emulate jQuery closest and return null if match is the passed in element (root)\n  return el === root ? null : el;\n};\n\n// Get an element given an ID\nexport var getById = function getById(id) {\n  return document.getElementById(/^#/.test(id) ? id.slice(1) : id) || null;\n};\n\n// Add a class to an element\nexport var addClass = function addClass(el, className) {\n  if (className && isElement(el)) {\n    el.classList.add(className);\n  }\n};\n\n// Remove a class from an element\nexport var removeClass = function removeClass(el, className) {\n  if (className && isElement(el)) {\n    el.classList.remove(className);\n  }\n};\n\n// Test if an element has a class\nexport var hasClass = function hasClass(el, className) {\n  if (className && isElement(el)) {\n    return el.classList.contains(className);\n  }\n  return false;\n};\n\n// Set an attribute on an element\nexport var setAttr = function setAttr(el, attr, value) {\n  if (attr && isElement(el)) {\n    el.setAttribute(attr, value);\n  }\n};\n\n// Remove an attribute from an element\nexport var removeAttr = function removeAttr(el, attr) {\n  if (attr && isElement(el)) {\n    el.removeAttribute(attr);\n  }\n};\n\n// Get an attribute value from an element (returns null if not found)\nexport var getAttr = function getAttr(el, attr) {\n  if (attr && isElement(el)) {\n    return el.getAttribute(attr);\n  }\n  return null;\n};\n\n// Determine if an attribute exists on an element (returns true or false, or null if element not found)\nexport var hasAttr = function hasAttr(el, attr) {\n  if (attr && isElement(el)) {\n    return el.hasAttribute(attr);\n  }\n  return null;\n};\n\n// Return the Bounding Client Rec of an element. Retruns null if not an element\nexport var getBCR = function getBCR(el) {\n  return isElement(el) ? el.getBoundingClientRect() : null;\n};\n\n// Get computed style object for an element\nexport var getCS = function getCS(el) {\n  return isElement(el) ? window.getComputedStyle(el) : {};\n};\n\n// Return an element's offset wrt document element\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.offset\nexport var offset = function offset(el) {\n  if (isElement(el)) {\n    if (!el.getClientRects().length) {\n      return { top: 0, left: 0 };\n    }\n    var bcr = getBCR(el);\n    var win = el.ownerDocument.defaultView;\n    return {\n      top: bcr.top + win.pageYOffset,\n      left: bcr.left + win.pageXOffset\n    };\n  }\n};\n\n// Return an element's offset wrt to it's offsetParent\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.position\nexport var position = function position(el) {\n  if (!isElement(el)) {\n    return;\n  }\n  var parentOffset = { top: 0, left: 0 };\n  var offsetSelf = void 0;\n  var offsetParent = void 0;\n  if (getCS(el).position === 'fixed') {\n    offsetSelf = getBCR(el);\n  } else {\n    offsetSelf = offset(el);\n    var doc = el.ownerDocument;\n    offsetParent = el.offsetParent || doc.documentElement;\n    while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && getCS(offsetParent).position === 'static') {\n      offsetParent = offsetParent.parentNode;\n    }\n    if (offsetParent && offsetParent !== el && offsetParent.nodeType === Node.ELEMENT_NODE) {\n      parentOffset = offset(offsetParent);\n      parentOffset.top += parseFloat(getCS(offsetParent).borderTopWidth);\n      parentOffset.left += parseFloat(getCS(offsetParent).borderLeftWidth);\n    }\n  }\n  return {\n    top: offsetSelf.top - parentOffset.top - parseFloat(getCS(el).marginTop),\n    left: offsetSelf.left - parentOffset.left - parseFloat(getCS(el).marginLeft)\n  };\n};\n\n// Attach an event listener to an element\nexport var eventOn = function eventOn(el, evtName, handler) {\n  if (el && el.addEventListener) {\n    el.addEventListener(evtName, handler);\n  }\n};\n\n// Remove an event listener from an element\nexport var eventOff = function eventOff(el, evtName, handler) {\n  if (el && el.removeEventListener) {\n    el.removeEventListener(evtName, handler);\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap-vue/es/utils/dom.js\n// module id = Kz7p\n// module chunks = 0","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iobject.js\n// module id = MU5D\n// module chunks = 0","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_is-array-iter.js\n// module id = Mhyx\n// module chunks = 0","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-primitive.js\n// module id = MmMw\n// module chunks = 0","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_Symbol.js\n// module id = NkRn\n// module chunks = 0","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/debounce.js\n// module id = O4Lo\n// module chunks = 0","module.exports = true;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_library.js\n// module id = O4g8\n// module chunks = 0","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_dom-create.js\n// module id = ON07\n// module chunks = 0","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-gpo.js\n// module id = PzxK\n// module chunks = 0","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-length.js\n// module id = QRG4\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_cof.js\n// module id = R9M2\n// module chunks = 0","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_html.js\n// module id = RPLV\n// module chunks = 0","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/now.js\n// module id = RVHk\n// module chunks = 0","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_classof.js\n// module id = RY/4\n// module chunks = 0","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_fails.js\n// module id = S82l\n// module chunks = 0","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_ie8-dom-define.js\n// module id = SfB7\n// module chunks = 0","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_root.js\n// module id = TQ3y\n// module chunks = 0","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-iobject.js\n// module id = TcQ7\n// module chunks = 0","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport { isArray } from '../utils/array';\n/**\n * Issue #569: collapse::toggle::state triggered too many times\n * @link https://github.com/bootstrap-vue/bootstrap-vue/issues/569\n */\n\nvar BVRL = '__BV_root_listeners__';\n\nexport default {\n  methods: {\n    /**\n         * Safely register event listeners on the root Vue node.\n         * While Vue automatically removes listeners for individual components,\n         * when a component registers a listener on root and is destroyed,\n         * this orphans a callback because the node is gone,\n         * but the root does not clear the callback.\n         *\n         * This adds a non-reactive prop to a vm on the fly\n         * in order to avoid object observation and its performance costs\n         * to something that needs no reactivity.\n         * It should be highly unlikely there are any naming collisions.\n         * @param {string} event\n         * @param {function} callback\n         * @chainable\n         */\n    listenOnRoot: function listenOnRoot(event, callback) {\n      if (!this[BVRL] || !isArray(this[BVRL])) {\n        this[BVRL] = [];\n      }\n      this[BVRL].push({ event: event, callback: callback });\n      this.$root.$on(event, callback);\n      return this;\n    },\n\n\n    /**\n         * Convenience method for calling vm.$emit on vm.$root.\n         * @param {string} event\n         * @param {*} args\n         * @chainable\n         */\n    emitOnRoot: function emitOnRoot(event) {\n      var _$root;\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_$root = this.$root).$emit.apply(_$root, [event].concat(_toConsumableArray(args)));\n      return this;\n    }\n  },\n\n  beforeDestroy: function beforeDestroy() {\n    if (this[BVRL] && isArray(this[BVRL])) {\n      while (this[BVRL].length > 0) {\n        // shift to process in order\n        var _BVRL$shift = this[BVRL].shift(),\n            event = _BVRL$shift.event,\n            callback = _BVRL$shift.callback;\n\n        this.$root.$off(event, callback);\n      }\n    }\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap-vue/es/mixins/listen-on-root.js\n// module id = null\n// module chunks = ","import listenOnRootMixin from '../../mixins/listen-on-root';\nimport { hasClass, reflow } from '../../utils/dom';\n\n// Events we emit on $root\nvar EVENT_STATE = 'bv::collapse::state';\nvar EVENT_ACCORDION = 'bv::collapse::accordion';\n// Events we listen to on $root\nvar EVENT_TOGGLE = 'bv::toggle::collapse';\n\nexport default {\n  mixins: [listenOnRootMixin],\n  render: function render(h) {\n    var t = this;\n    var content = h(t.tag, {\n      class: t.classObject,\n      directives: [{ name: 'show', value: t.show }],\n      attrs: { id: t.id || null },\n      on: { click: t.clickHandler }\n    }, [t.$slots.default]);\n    return h('transition', {\n      props: {\n        enterClass: '',\n        enterActiveClass: 'collapsing',\n        enterToClass: '',\n        leaveClass: '',\n        leaveActiveClass: 'collapsing',\n        leaveToClass: ''\n      },\n      on: {\n        enter: t.onEnter,\n        afterEnter: t.onAfterEnter,\n        leave: t.onLeave,\n        afterLeave: t.onAfterLeave\n      }\n    }, [content]);\n  },\n  data: function data() {\n    return {\n      show: this.visible,\n      transitioning: false\n    };\n  },\n\n  model: {\n    prop: 'visible',\n    event: 'input'\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    isNav: {\n      type: Boolean,\n      default: false\n    },\n    accordion: {\n      type: String,\n      default: null\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  },\n  watch: {\n    visible: function visible(newVal) {\n      if (newVal !== this.show) {\n        this.show = newVal;\n      }\n    },\n    show: function show(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.emitState();\n      }\n    }\n  },\n  computed: {\n    classObject: function classObject() {\n      return {\n        'navbar-collapse': this.isNav,\n        'collapse': !this.transitioning,\n        'show': this.show && !this.transitioning\n      };\n    }\n  },\n  methods: {\n    toggle: function toggle() {\n      this.show = !this.show;\n    },\n    onEnter: function onEnter(el) {\n      el.style.height = 0;\n      reflow(el);\n      el.style.height = el.scrollHeight + 'px';\n      this.transitioning = true;\n      // This should be moved out so we can add cancellable events\n      this.$emit('show');\n    },\n    onAfterEnter: function onAfterEnter(el) {\n      el.style.height = null;\n      this.transitioning = false;\n      this.$emit('shown');\n    },\n    onLeave: function onLeave(el) {\n      el.style.height = 'auto';\n      el.style.display = 'block';\n      el.style.height = el.getBoundingClientRect().height + 'px';\n      reflow(el);\n      this.transitioning = true;\n      el.style.height = 0;\n      // This should be moved out so we can add cancellable events\n      this.$emit('hide');\n    },\n    onAfterLeave: function onAfterLeave(el) {\n      el.style.height = null;\n      this.transitioning = false;\n      this.$emit('hidden');\n    },\n    emitState: function emitState() {\n      this.$emit('input', this.show);\n      // Let v-b-toggle know the state of this collapse\n      this.$root.$emit(EVENT_STATE, this.id, this.show);\n      if (this.accordion && this.show) {\n        // Tell the other collapses in this accordion to close\n        this.$root.$emit(EVENT_ACCORDION, this.id, this.accordion);\n      }\n    },\n    clickHandler: function clickHandler(evt) {\n      // If we are in a nav/navbar, close the collapse when non-disabled link clicked\n      var el = evt.target;\n      if (!this.isNav || !el || getComputedStyle(this.$el).display !== 'block') {\n        return;\n      }\n      if (hasClass(el, 'nav-link') || hasClass(el, 'dropdown-item')) {\n        this.show = false;\n      }\n    },\n    handleToggleEvt: function handleToggleEvt(target) {\n      if (target !== this.id) {\n        return;\n      }\n      this.toggle();\n    },\n    handleAccordionEvt: function handleAccordionEvt(openedId, accordion) {\n      if (!this.accordion || accordion !== this.accordion) {\n        return;\n      }\n      if (openedId === this.id) {\n        // Open this collapse if not shown\n        if (!this.show) {\n          this.toggle();\n        }\n      } else {\n        // Close this collapse if shown\n        if (this.show) {\n          this.toggle();\n        }\n      }\n    },\n    handleResize: function handleResize() {\n      // Handler for orientation/resize to set collapsed state in nav/navbar\n      this.show = getComputedStyle(this.$el).display === 'block';\n    }\n  },\n  created: function created() {\n    // Listen for toggle events to open/close us\n    this.listenOnRoot(EVENT_TOGGLE, this.handleToggleEvt);\n    // Listen to otehr collapses for accordion events\n    this.listenOnRoot(EVENT_ACCORDION, this.handleAccordionEvt);\n  },\n  mounted: function mounted() {\n    if (this.isNav && typeof document !== 'undefined') {\n      // Set up handlers\n      window.addEventListener('resize', this.handleResize, false);\n      window.addEventListener('orientationchange', this.handleResize, false);\n      this.handleResize();\n    }\n    this.emitState();\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.isNav && typeof document !== 'undefined') {\n      window.removeEventListener('resize', this.handleResize, false);\n      window.removeEventListener('orientationchange', this.handleResize, false);\n    }\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap-vue/es/components/collapse/collapse.js\n// module id = null\n// module chunks = ","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/isObjectLike.js\n// module id = UnEC\n// module chunks = 0","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-integer.js\n// module id = UuGF\n// module chunks = 0","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/component-normalizer.js\n// module id = VU/8\n// module chunks = 0","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_property-desc.js\n// module id = X8DO\n// module chunks = 0","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-create.js\n// module id = Yobk\n// module chunks = 0","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_baseGetTag.js\n// module id = aCM0\n// module chunks = 0","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_shared-key.js\n// module id = ax3d\n// module chunks = 0","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_freeGlobal.js\n// module id = blYT\n// module chunks = 0","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.infiniteScroll = factory());\n}(this, function () { 'use strict';\n\n  var ctx = '@@InfiniteScroll';\n\n  var throttle = function throttle(fn, delay) {\n    var now, lastExec, timer, context, args; //eslint-disable-line\n\n    var execute = function execute() {\n      fn.apply(context, args);\n      lastExec = now;\n    };\n\n    return function () {\n      context = this;\n      args = arguments;\n\n      now = Date.now();\n\n      if (timer) {\n        clearTimeout(timer);\n        timer = null;\n      }\n\n      if (lastExec) {\n        var diff = delay - (now - lastExec);\n        if (diff < 0) {\n          execute();\n        } else {\n          timer = setTimeout(function () {\n            execute();\n          }, diff);\n        }\n      } else {\n        execute();\n      }\n    };\n  };\n\n  var getScrollTop = function getScrollTop(element) {\n    if (element === window) {\n      return Math.max(window.pageYOffset || 0, document.documentElement.scrollTop);\n    }\n\n    return element.scrollTop;\n  };\n\n  var getComputedStyle = document.defaultView.getComputedStyle;\n\n  var getScrollEventTarget = function getScrollEventTarget(element) {\n    var currentNode = element;\n    // bugfix, see http://w3help.org/zh-cn/causes/SD9013 and http://stackoverflow.com/questions/17016740/onscroll-function-is-not-working-for-chrome\n    while (currentNode && currentNode.tagName !== 'HTML' && currentNode.tagName !== 'BODY' && currentNode.nodeType === 1) {\n      var overflowY = getComputedStyle(currentNode).overflowY;\n      if (overflowY === 'scroll' || overflowY === 'auto') {\n        return currentNode;\n      }\n      currentNode = currentNode.parentNode;\n    }\n    return window;\n  };\n\n  var getVisibleHeight = function getVisibleHeight(element) {\n    if (element === window) {\n      return document.documentElement.clientHeight;\n    }\n\n    return element.clientHeight;\n  };\n\n  var getElementTop = function getElementTop(element) {\n    if (element === window) {\n      return getScrollTop(window);\n    }\n    return element.getBoundingClientRect().top + getScrollTop(window);\n  };\n\n  var isAttached = function isAttached(element) {\n    var currentNode = element.parentNode;\n    while (currentNode) {\n      if (currentNode.tagName === 'HTML') {\n        return true;\n      }\n      if (currentNode.nodeType === 11) {\n        return false;\n      }\n      currentNode = currentNode.parentNode;\n    }\n    return false;\n  };\n\n  var doBind = function doBind() {\n    if (this.binded) return; // eslint-disable-line\n    this.binded = true;\n\n    var directive = this;\n    var element = directive.el;\n\n    var throttleDelayExpr = element.getAttribute('infinite-scroll-throttle-delay');\n    var throttleDelay = 200;\n    if (throttleDelayExpr) {\n      throttleDelay = Number(directive.vm[throttleDelayExpr] || throttleDelayExpr);\n      if (isNaN(throttleDelay) || throttleDelay < 0) {\n        throttleDelay = 200;\n      }\n    }\n    directive.throttleDelay = throttleDelay;\n\n    directive.scrollEventTarget = getScrollEventTarget(element);\n    directive.scrollListener = throttle(doCheck.bind(directive), directive.throttleDelay);\n    directive.scrollEventTarget.addEventListener('scroll', directive.scrollListener);\n\n    this.vm.$on('hook:beforeDestroy', function () {\n      directive.scrollEventTarget.removeEventListener('scroll', directive.scrollListener);\n    });\n\n    var disabledExpr = element.getAttribute('infinite-scroll-disabled');\n    var disabled = false;\n\n    if (disabledExpr) {\n      this.vm.$watch(disabledExpr, function (value) {\n        directive.disabled = value;\n        if (!value && directive.immediateCheck) {\n          doCheck.call(directive);\n        }\n      });\n      disabled = Boolean(directive.vm[disabledExpr]);\n    }\n    directive.disabled = disabled;\n\n    var distanceExpr = element.getAttribute('infinite-scroll-distance');\n    var distance = 0;\n    if (distanceExpr) {\n      distance = Number(directive.vm[distanceExpr] || distanceExpr);\n      if (isNaN(distance)) {\n        distance = 0;\n      }\n    }\n    directive.distance = distance;\n\n    var immediateCheckExpr = element.getAttribute('infinite-scroll-immediate-check');\n    var immediateCheck = true;\n    if (immediateCheckExpr) {\n      immediateCheck = Boolean(directive.vm[immediateCheckExpr]);\n    }\n    directive.immediateCheck = immediateCheck;\n\n    if (immediateCheck) {\n      doCheck.call(directive);\n    }\n\n    var eventName = element.getAttribute('infinite-scroll-listen-for-event');\n    if (eventName) {\n      directive.vm.$on(eventName, function () {\n        doCheck.call(directive);\n      });\n    }\n  };\n\n  var doCheck = function doCheck(force) {\n    var scrollEventTarget = this.scrollEventTarget;\n    var element = this.el;\n    var distance = this.distance;\n\n    if (force !== true && this.disabled) return; //eslint-disable-line\n    var viewportScrollTop = getScrollTop(scrollEventTarget);\n    var viewportBottom = viewportScrollTop + getVisibleHeight(scrollEventTarget);\n\n    var shouldTrigger = false;\n\n    if (scrollEventTarget === element) {\n      shouldTrigger = scrollEventTarget.scrollHeight - viewportBottom <= distance;\n    } else {\n      var elementBottom = getElementTop(element) - getElementTop(scrollEventTarget) + element.offsetHeight + viewportScrollTop;\n\n      shouldTrigger = viewportBottom + distance >= elementBottom;\n    }\n\n    if (shouldTrigger && this.expression) {\n      this.expression();\n    }\n  };\n\n  var InfiniteScroll = {\n    bind: function bind(el, binding, vnode) {\n      el[ctx] = {\n        el: el,\n        vm: vnode.context,\n        expression: binding.value\n      };\n      var args = arguments;\n      el[ctx].vm.$on('hook:mounted', function () {\n        el[ctx].vm.$nextTick(function () {\n          if (isAttached(el)) {\n            doBind.call(el[ctx], args);\n          }\n\n          el[ctx].bindTryCount = 0;\n\n          var tryBind = function tryBind() {\n            if (el[ctx].bindTryCount > 10) return; //eslint-disable-line\n            el[ctx].bindTryCount++;\n            if (isAttached(el)) {\n              doBind.call(el[ctx], args);\n            } else {\n              setTimeout(tryBind, 50);\n            }\n          };\n\n          tryBind();\n        });\n      });\n    },\n    unbind: function unbind(el) {\n      if (el && el[ctx] && el[ctx].scrollEventTarget) el[ctx].scrollEventTarget.removeEventListener('scroll', el[ctx].scrollListener);\n    }\n  };\n\n  var install = function install(Vue) {\n    Vue.directive('InfiniteScroll', InfiniteScroll);\n  };\n\n  if (window.Vue) {\n    window.infiniteScroll = InfiniteScroll;\n    Vue.use(install); // eslint-disable-line\n  }\n\n  InfiniteScroll.install = install;\n\n  return InfiniteScroll;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-infinite-scroll/vue-infinite-scroll.js\n// module id = bqTm\n// module chunks = 0","module.exports = { \"default\": require(\"core-js/library/fn/array/from\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/core-js/array/from.js\n// module id = c/Tr\n// module chunks = 0","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_wks.js\n// module id = dSzd\n// module chunks = 0","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iter-detect.js\n// module id = dY0y\n// module chunks = 0","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_set-to-string-tag.js\n// module id = e6n0\n// module chunks = 0","var global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function (key) {\n  return store[key] || (store[key] = {});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_shared.js\n// module id = e8AB\n// module chunks = 0","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-dp.js\n// module id = evD5\n// module chunks = 0","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_create-property.js\n// module id = fBQ2\n// module chunks = 0","module.exports = { \"default\": require(\"core-js/library/fn/object/keys\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/core-js/object/keys.js\n// module id = fZjL\n// module chunks = 0","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-absolute-index.js\n// module id = fkB2\n// module chunks = 0","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_string-at.js\n// module id = h65t\n// module chunks = 0","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_hide.js\n// module id = hJx8\n// module chunks = 0","require('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/fn/object/keys.js\n// module id = jFbC\n// module chunks = 0","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && key in exports) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_export.js\n// module id = kM2E\n// module chunks = 0","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/toNumber.js\n// module id = kxzG\n// module chunks = 0","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_a-function.js\n// module id = lOnJ\n// module chunks = 0","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-keys.js\n// module id = lktj\n// module chunks = 0","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iter-call.js\n// module id = msXi\n// module chunks = 0","/**\n * Aliasing Object[method] allows the minifier to shorten methods to a single character variable,\n * as well as giving BV a chance to inject polyfills.\n * As long as we avoid\n * - import * as Object from \"utils/object\"\n * all unused exports should be removed by tree-shaking.\n */\n\n// @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign !== 'function') {\n  Object.assign = function (target, varArgs) {\n    // .length of function is 2\n\n    if (target == null) {\n      // TypeError if undefined or null\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    var to = Object(target);\n\n    for (var index = 1; index < arguments.length; index++) {\n      var nextSource = arguments[index];\n\n      if (nextSource != null) {\n        // Skip over if undefined or null\n        for (var nextKey in nextSource) {\n          // Avoid bugs when hasOwnProperty is shadowed\n          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n    return to;\n  };\n}\n\n// @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Polyfill\nif (!Object.is) {\n  Object.is = function (x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      // eslint-disable-next-line no-self-compare\n      return x !== x && y !== y;\n    }\n  };\n}\n\nexport var assign = Object.assign;\nexport var getOwnPropertyNames = Object.getOwnPropertyNames;\nexport var keys = Object.keys;\nexport var defineProperties = Object.defineProperties;\nexport var defineProperty = Object.defineProperty;\nexport var freeze = Object.freeze;\nexport var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nexport var getOwnPropertySymbols = Object.getOwnPropertySymbols;\nexport var getPrototypeOf = Object.getPrototypeOf;\nexport var create = Object.create;\nexport var isFrozen = Object.isFrozen;\nexport var is = Object.is;\n\nexport function readonlyDescriptor() {\n  return { enumerable: true, configurable: false, writable: false };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap-vue/es/utils/object.js\n// module id = null\n// module chunks = ","import { keys } from '../utils/object';\n\nvar allListenTypes = { hover: true, click: true, focus: true };\n\nexport default function targets(vnode, binding, listenTypes, fn) {\n  var targets = keys(binding.modifiers || {}).filter(function (t) {\n    return !allListenTypes[t];\n  });\n\n  if (binding.value) {\n    targets.push(binding.value);\n  }\n\n  var listener = function listener() {\n    fn({ targets: targets, vnode: vnode });\n  };\n\n  keys(allListenTypes).forEach(function (type) {\n    if (listenTypes[type] || binding.modifiers[type]) {\n      vnode.elm.addEventListener(type, listener);\n    }\n  });\n\n  // Return the list of targets\n  return targets;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap-vue/es/utils/target.js\n// module id = null\n// module chunks = ","import target from '../../utils/target';\nimport { setAttr, addClass, removeClass } from '../../utils/dom';\n\n// Are we client side?\nvar inBrowser = typeof window !== 'undefined';\n\n// target listen types\nvar listenTypes = { click: true\n\n  // Property key for handler storage\n};var BVT = '__BV_toggle__';\n\n// Emitted Control Event for collapse (emitted to collapse)\nvar EVENT_TOGGLE = 'bv::toggle::collapse';\n\n// Listen to Event for toggle state update (Emited by collapse)\nvar EVENT_STATE = 'bv::collapse::state';\n\nexport default {\n  bind: function bind(el, binding, vnode) {\n    var targets = target(vnode, binding, listenTypes, function (_ref) {\n      var targets = _ref.targets,\n          vnode = _ref.vnode;\n\n      targets.forEach(function (target) {\n        vnode.context.$root.$emit(EVENT_TOGGLE, target);\n      });\n    });\n\n    if (inBrowser && vnode.context && targets.length > 0) {\n      // Add aria attributes to element\n      setAttr(el, 'aria-controls', targets.join(' '));\n      setAttr(el, 'aria-expanded', 'false');\n      if (el.tagName !== 'BUTTON') {\n        // If element is not a button, we add `role=\"button\"` for accessibility\n        setAttr(el, 'role', 'button');\n      }\n\n      // Toggle state hadnler, stored on element\n      el[BVT] = function toggleDirectiveHandler(id, state) {\n        if (targets.indexOf(id) !== -1) {\n          // Set aria-expanded state\n          setAttr(el, 'aria-expanded', state ? 'true' : 'false');\n          // Set/Clear 'collapsed' class state\n          if (state) {\n            removeClass(el, 'collapsed');\n          } else {\n            addClass(el, 'collapsed');\n          }\n        }\n      };\n\n      // Listen for toggle state changes\n      vnode.context.$root.$on(EVENT_STATE, el[BVT]);\n    }\n  },\n  unbind: function unbind(el, binding, vnode) {\n    if (el[BVT]) {\n      // Remove our $root listener\n      vnode.context.$root.$off(EVENT_STATE, el[BVT]);\n      el[BVT] = null;\n    }\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap-vue/es/directives/toggle/toggle.js\n// module id = null\n// module chunks = ","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-dps.js\n// module id = qio6\n// module chunks = 0","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es6.array.from.js\n// module id = qyJz\n// module chunks = 0","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-object.js\n// module id = sB3e\n// module chunks = 0","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_getRawTag.js\n// module id = uLhX\n// module chunks = 0","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-sap.js\n// module id = uqUo\n// module chunks = 0","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_array-includes.js\n// module id = vFc/\n// module chunks = 0","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = (!BUGGY && $native) || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iter-define.js\n// module id = vIB/\n// module chunks = 0","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_enum-bug-keys.js\n// module id = xnc9\n// module chunks = 0","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/isObject.js\n// module id = yCNF\n// module chunks = 0","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es6.string.iterator.js\n// module id = zQR9\n// module chunks = 0"],"sourceRoot":""}